/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkApplianceTrafficShapingUplinkSelectionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * The default uplink. Must be one of: 'wan1' or 'wan2'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONDefaultUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Immediate WAN failover and failback
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate extends SpeakeasyBase {
  /**
   * Whether immediate WAN failover and failback is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;
}

/**
 * WAN failover and failback
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback extends SpeakeasyBase {
  /**
   * Immediate WAN failover and failback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "immediate" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate
  )
  immediate?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate;
}

/**
 * Fail over criterion for uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesFailOverCriterionEnum {
  PoorPerformance = "poorPerformance",
  UplinkDown = "uplinkDown",
}

/**
 * Name of builtin performance class. Must be present when performanceClass type is 'builtin' and value must be one of: 'VoIP'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum {
  VoIP = "VoIP",
}

/**
 * Type of this performance class. Must be one of: 'builtin' or 'custom'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassTypeEnum {
  Builtin = "builtin",
  Custom = "custom",
}

/**
 * Performance class setting for uplink preference rule
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass extends SpeakeasyBase {
  /**
   * Name of builtin performance class. Must be present when performanceClass type is 'builtin' and value must be one of: 'VoIP'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "builtinPerformanceClassName" })
  builtinPerformanceClassName?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum;

  /**
   * ID of created custom performance class, must be present when performanceClass type is "custom"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customPerformanceClassId" })
  customPerformanceClassId?: string;

  /**
   * Type of this performance class. Must be one of: 'builtin' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassTypeEnum;
}

/**
 * Preferred uplink for uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPreferredUplinkEnum {
  BestForVoIP = "bestForVoIP",
  DefaultUplink = "defaultUplink",
  LoadBalancing = "loadBalancing",
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Traffic filter type. Must be one of: 'applicationCategory', 'application' or 'custom'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Application = "application",
  ApplicationCategory = "applicationCategory",
  Custom = "custom",
}

/**
 * Destination of 'custom' type traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" or "fqdn" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * FQDN format address. Cannot be used in combination with the "cidr" or "fqdn" property and is currently only available in the "destination" object of the "vpnTrafficUplinkPreference" object. E.g.: "www.google.com"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fqdn" })
  fqdn?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" or "fqdn" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp = "icmp",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of 'custom' type traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value of traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * ID of 'applicationCategory' or 'application' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Traffic filter type. Must be one of: 'applicationCategory', 'application' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value of traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue;
}

export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Fail over criterion for uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failOverCriterion" })
  failOverCriterion?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesFailOverCriterionEnum;

  /**
   * Performance class setting for uplink preference rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "performanceClass" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass
  )
  performanceClass?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass;

  /**
   * Preferred uplink for uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Traffic filters
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters[];
}

/**
 * Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesPreferredUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Traffic filter type. Must be "custom"
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Custom = "custom",
}

/**
 * Destination of 'custom' type traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;
}

/**
 * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
 */
export enum GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of 'custom' type traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value of traffic filter
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Traffic filter type. Must be "custom"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value of traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue;
}

export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Traffic filters
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters[];
}

/**
 * Successful operation
 */
export class GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON extends SpeakeasyBase {
  /**
   * Whether active-active AutoVPN is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeActiveAutoVpnEnabled" })
  activeActiveAutoVpnEnabled?: boolean;

  /**
   * The default uplink. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultUplink" })
  defaultUplink?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONDefaultUplinkEnum;

  /**
   * WAN failover and failback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failoverAndFailback" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback
  )
  failoverAndFailback?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback;

  /**
   * Whether load balancing is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loadBalancingEnabled" })
  loadBalancingEnabled?: boolean;

  /**
   * Uplink preference rules for VPN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences,
  })
  @Expose({ name: "vpnTrafficUplinkPreferences" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences
  )
  vpnTrafficUplinkPreferences?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences[];

  /**
   * Uplink preference rules for WAN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences,
  })
  @Expose({ name: "wanTrafficUplinkPreferences" })
  @Type(
    () =>
      GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences
  )
  wanTrafficUplinkPreferences?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences[];
}

export class GetNetworkApplianceTrafficShapingUplinkSelectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject?: GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON;
}
