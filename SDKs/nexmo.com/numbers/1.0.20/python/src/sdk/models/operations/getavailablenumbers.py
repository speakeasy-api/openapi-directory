"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account_unauthorized as shared_account_unauthorized
from ..shared import available_numbers as shared_available_numbers
from ..shared import search_pattern_enum as shared_search_pattern_enum
from ..shared import type_enum as shared_type_enum
from enum import Enum
from typing import Optional

class GetAvailableNumbersFeaturesEnum(str, Enum):
    r"""Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`."""
    SMS = 'SMS'
    VOICE = 'VOICE'
    SMS_VOICE = 'SMS,VOICE'
    MMS = 'MMS'
    SMS_MMS = 'SMS,MMS'
    VOICE_MMS = 'VOICE,MMS'
    SMS_MMS_VOICE = 'SMS,MMS,VOICE'


@dataclasses.dataclass
class GetAvailableNumbersRequest:
    
    country: str = dataclasses.field(metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""The two character country code to filter on (in ISO 3166-1 alpha-2 format)"""  
    features: Optional[GetAvailableNumbersFeaturesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'features', 'style': 'form', 'explode': True }})
    r"""Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`."""  
    index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'index', 'style': 'form', 'explode': True }})
    r"""Page index"""  
    pattern: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pattern', 'style': 'form', 'explode': True }})
    r"""The number pattern you want to search for. Use in conjunction with `search_pattern`."""  
    search_pattern: Optional[shared_search_pattern_enum.SearchPatternEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_pattern', 'style': 'form', 'explode': True }})
    r"""The strategy you want to use for matching:
    
    
    * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA)
    * `1` - Search for numbers that contain `pattern`
    * `2` - Search for numbers that end with `pattern`
    """  
    size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Page size"""  
    type: Optional[shared_type_enum.TypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Set this parameter to filter the type of number, such as mobile or landline"""  
    

@dataclasses.dataclass
class GetAvailableNumbersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_unauthorized: Optional[shared_account_unauthorized.AccountUnauthorized] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    available_numbers: Optional[shared_available_numbers.AvailableNumbers] = dataclasses.field(default=None)
    r"""OK"""  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    