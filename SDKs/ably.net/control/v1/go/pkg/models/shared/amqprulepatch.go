// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AmqpRulePatchRuleTypeEnum string

const (
	AmqpRulePatchRuleTypeEnumAmqp AmqpRulePatchRuleTypeEnum = "amqp"
)

func (e AmqpRulePatchRuleTypeEnum) ToPointer() *AmqpRulePatchRuleTypeEnum {
	return &e
}

func (e *AmqpRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amqp":
		*e = AmqpRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmqpRulePatchRuleTypeEnum: %v", v)
	}
}

type AmqpRulePatchTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AmqpRulePatchTarget struct {
	Enveloped *bool                        `json:"enveloped,omitempty"`
	Format    *string                      `json:"format,omitempty"`
	Headers   []AmqpRulePatchTargetHeaders `json:"headers,omitempty"`
	QueueID   *string                      `json:"queueId,omitempty"`
}

type AmqpRulePatch struct {
	RequestMode *string                   `json:"requestMode,omitempty"`
	RuleType    AmqpRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch          `json:"source,omitempty"`
	Status      *string                   `json:"status,omitempty"`
	Target      *AmqpRulePatchTarget      `json:"target,omitempty"`
}
