"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasCategoryScoresNightLife:
    r"""night life category"""
    
    overall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall'), 'exclude': lambda f: f is None }})
    r"""score of nigh life possibility from 0 (nothing to do at night) to 100 (many night activities to enjoy)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasCategoryScoresRestaurant:
    r"""restaurant category"""
    
    overall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall'), 'exclude': lambda f: f is None }})
    r"""score of eating possibility from 0 (no place to eat) to 100 (many restaurants to enjoy)"""  
    vegetarian: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vegetarian'), 'exclude': lambda f: f is None }})
    r"""score of vegetatian eating possibility from 0 (no place to eat vegetatian) to 100 (many restaurants to enjoy)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasCategoryScoresShopping:
    r"""shopping category"""
    
    luxury: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('luxury'), 'exclude': lambda f: f is None }})
    r"""score of luxury shopping possibility from 0 (no luxury shop) to 100 (many luxury shops to enjoy)"""  
    overall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall'), 'exclude': lambda f: f is None }})
    r"""score of shopping possibility from 0 (no shop) to 100 (many shops to enjoy)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasCategoryScoresSight:
    r"""sight category"""
    
    beach_and_park: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beachAndPark'), 'exclude': lambda f: f is None }})
    r"""score of outdoor activity possibility from 0 (no outdoor spaces) to 100 (many parks or beaches to enjoy)"""  
    historical: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('historical'), 'exclude': lambda f: f is None }})
    r"""score of historical discovery possibility from 0 (no historical site) to 100 (many historical site to enjoy)"""  
    overall: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall'), 'exclude': lambda f: f is None }})
    r"""score of sight seeing possibility from 0 (nothing to see) to 100 (many sceneries to enjoy)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasCategoryScores:
    r"""category scoring of the location"""
    
    night_life: Optional[CategoryRatedAreasCategoryScoresNightLife] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nightLife'), 'exclude': lambda f: f is None }})
    r"""night life category"""  
    restaurant: Optional[CategoryRatedAreasCategoryScoresRestaurant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restaurant'), 'exclude': lambda f: f is None }})
    r"""restaurant category"""  
    shopping: Optional[CategoryRatedAreasCategoryScoresShopping] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopping'), 'exclude': lambda f: f is None }})
    r"""shopping category"""  
    sight: Optional[CategoryRatedAreasCategoryScoresSight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sight'), 'exclude': lambda f: f is None }})
    r"""sight category"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreasGeoCode:
    r"""Geographic coordinates describing the position of any location on the surface of Earth"""
    
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})
    r"""Latitude of the position expressed in decimal degrees (WSG 84), e.g. 6.244203. A positive value denotes northern hemisphere or the equator, and a negative value denotes southern hemisphere. The number of digits to represent the precision of the coordinate."""  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})
    r"""Longitude of the position expressed in decimal degrees (WSG 84), e.g. -75.581211. A positive value denotes east longitude or the prime meridian, and a negative value denotes west longitude.  The number of digits to represent the precision of the coordinate."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryRatedAreas:
    r"""Identification of a specific version of a resource"""
    
    category_scores: Optional[CategoryRatedAreasCategoryScores] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryScores'), 'exclude': lambda f: f is None }})
    r"""category scoring of the location"""  
    geo_code: Optional[CategoryRatedAreasGeoCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCode'), 'exclude': lambda f: f is None }})
    r"""Geographic coordinates describing the position of any location on the surface of Earth"""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radius'), 'exclude': lambda f: f is None }})
    r"""Radius of the area in meters"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the manipulatd resource"""  
    