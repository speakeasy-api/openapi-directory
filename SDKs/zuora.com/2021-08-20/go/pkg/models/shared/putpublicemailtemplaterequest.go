// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PUTPublicEmailTemplateRequestCcEmailTypeEnum - Email cc type.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
type PUTPublicEmailTemplateRequestCcEmailTypeEnum string

const (
	PUTPublicEmailTemplateRequestCcEmailTypeEnumBillToContact                       PUTPublicEmailTemplateRequestCcEmailTypeEnum = "BillToContact"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumSoldToContact                       PUTPublicEmailTemplateRequestCcEmailTypeEnum = "SoldToContact"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumSpecificEmails                      PUTPublicEmailTemplateRequestCcEmailTypeEnum = "SpecificEmails"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumTenantAdmin                         PUTPublicEmailTemplateRequestCcEmailTypeEnum = "TenantAdmin"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumBillToAndSoldToContacts             PUTPublicEmailTemplateRequestCcEmailTypeEnum = "BillToAndSoldToContacts"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumRunOwner                            PUTPublicEmailTemplateRequestCcEmailTypeEnum = "RunOwner"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumAllContacts                         PUTPublicEmailTemplateRequestCcEmailTypeEnum = "AllContacts"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerBillToContact           PUTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerBillToContact"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerSoldToContact           PUTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerSoldToContact"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts PUTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	PUTPublicEmailTemplateRequestCcEmailTypeEnumInvoiceOwnerAllContacts             PUTPublicEmailTemplateRequestCcEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *PUTPublicEmailTemplateRequestCcEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = PUTPublicEmailTemplateRequestCcEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTPublicEmailTemplateRequestCcEmailTypeEnum: %s", s)
	}
}

// PUTPublicEmailTemplateRequestEncodingTypeEnum - The endcode type of the email body.
type PUTPublicEmailTemplateRequestEncodingTypeEnum string

const (
	PUTPublicEmailTemplateRequestEncodingTypeEnumUTF8      PUTPublicEmailTemplateRequestEncodingTypeEnum = "UTF8"
	PUTPublicEmailTemplateRequestEncodingTypeEnumShiftJis  PUTPublicEmailTemplateRequestEncodingTypeEnum = "Shift_JIS"
	PUTPublicEmailTemplateRequestEncodingTypeEnumIso2022Jp PUTPublicEmailTemplateRequestEncodingTypeEnum = "ISO_2022_JP"
	PUTPublicEmailTemplateRequestEncodingTypeEnumEucJp     PUTPublicEmailTemplateRequestEncodingTypeEnum = "EUC_JP"
	PUTPublicEmailTemplateRequestEncodingTypeEnumXSjis0213 PUTPublicEmailTemplateRequestEncodingTypeEnum = "X_SJIS_0213"
)

func (e *PUTPublicEmailTemplateRequestEncodingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTF8":
		fallthrough
	case "Shift_JIS":
		fallthrough
	case "ISO_2022_JP":
		fallthrough
	case "EUC_JP":
		fallthrough
	case "X_SJIS_0213":
		*e = PUTPublicEmailTemplateRequestEncodingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTPublicEmailTemplateRequestEncodingTypeEnum: %s", s)
	}
}

// PUTPublicEmailTemplateRequestFromEmailTypeEnum - The type of fromEmail.
type PUTPublicEmailTemplateRequestFromEmailTypeEnum string

const (
	PUTPublicEmailTemplateRequestFromEmailTypeEnumTenantEmail   PUTPublicEmailTemplateRequestFromEmailTypeEnum = "TenantEmail"
	PUTPublicEmailTemplateRequestFromEmailTypeEnumSpecificEmail PUTPublicEmailTemplateRequestFromEmailTypeEnum = "SpecificEmail"
)

func (e *PUTPublicEmailTemplateRequestFromEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = PUTPublicEmailTemplateRequestFromEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTPublicEmailTemplateRequestFromEmailTypeEnum: %s", s)
	}
}

// PUTPublicEmailTemplateRequestReplyToEmailTypeEnum - The type of the reply email.
type PUTPublicEmailTemplateRequestReplyToEmailTypeEnum string

const (
	PUTPublicEmailTemplateRequestReplyToEmailTypeEnumTenantEmail   PUTPublicEmailTemplateRequestReplyToEmailTypeEnum = "TenantEmail"
	PUTPublicEmailTemplateRequestReplyToEmailTypeEnumSpecificEmail PUTPublicEmailTemplateRequestReplyToEmailTypeEnum = "SpecificEmail"
)

func (e *PUTPublicEmailTemplateRequestReplyToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = PUTPublicEmailTemplateRequestReplyToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTPublicEmailTemplateRequestReplyToEmailTypeEnum: %s", s)
	}
}

// PUTPublicEmailTemplateRequestToEmailTypeEnum - Email receive type.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
type PUTPublicEmailTemplateRequestToEmailTypeEnum string

const (
	PUTPublicEmailTemplateRequestToEmailTypeEnumBillToContact                       PUTPublicEmailTemplateRequestToEmailTypeEnum = "BillToContact"
	PUTPublicEmailTemplateRequestToEmailTypeEnumSoldToContact                       PUTPublicEmailTemplateRequestToEmailTypeEnum = "SoldToContact"
	PUTPublicEmailTemplateRequestToEmailTypeEnumSpecificEmails                      PUTPublicEmailTemplateRequestToEmailTypeEnum = "SpecificEmails"
	PUTPublicEmailTemplateRequestToEmailTypeEnumTenantAdmin                         PUTPublicEmailTemplateRequestToEmailTypeEnum = "TenantAdmin"
	PUTPublicEmailTemplateRequestToEmailTypeEnumBillToAndSoldToContacts             PUTPublicEmailTemplateRequestToEmailTypeEnum = "BillToAndSoldToContacts"
	PUTPublicEmailTemplateRequestToEmailTypeEnumRunOwner                            PUTPublicEmailTemplateRequestToEmailTypeEnum = "RunOwner"
	PUTPublicEmailTemplateRequestToEmailTypeEnumAllContacts                         PUTPublicEmailTemplateRequestToEmailTypeEnum = "AllContacts"
	PUTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerBillToContact           PUTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerBillToContact"
	PUTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerSoldToContact           PUTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerSoldToContact"
	PUTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts PUTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	PUTPublicEmailTemplateRequestToEmailTypeEnumInvoiceOwnerAllContacts             PUTPublicEmailTemplateRequestToEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *PUTPublicEmailTemplateRequestToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = PUTPublicEmailTemplateRequestToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTPublicEmailTemplateRequestToEmailTypeEnum: %s", s)
	}
}

// PUTPublicEmailTemplateRequest - The request body to update an email template.
type PUTPublicEmailTemplateRequest struct {
	// The status of the email template.
	Active *bool `json:"active,omitempty"`
	// Email bcc address.
	BccEmailAddress *string `json:"bccEmailAddress,omitempty"`
	// Email cc address.
	CcEmailAddress *string `json:"ccEmailAddress,omitempty"`
	// Email cc type.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	CcEmailType *PUTPublicEmailTemplateRequestCcEmailTypeEnum `json:"ccEmailType,omitempty"`
	// The description of the email template.
	Description *string `json:"description,omitempty"`
	// The email body. You can add merge fields in the email object using angle brackets.
	// User can also embed html tags if 'isHtml' is true.
	EmailBody *string `json:"emailBody,omitempty"`
	// The email subject. You can add merge fields in the email subject using angle brackets.
	EmailSubject *string `json:"emailSubject,omitempty"`
	// The endcode type of the email body.
	EncodingType *PUTPublicEmailTemplateRequestEncodingTypeEnum `json:"encodingType,omitempty"`
	// If fromEmailType is SpecificEmail, this field is required
	FromEmailAddress *string `json:"fromEmailAddress,omitempty"`
	// The type of fromEmail.
	FromEmailType *PUTPublicEmailTemplateRequestFromEmailTypeEnum `json:"fromEmailType,omitempty"`
	// The name of email sender.
	FromName *string `json:"fromName,omitempty"`
	// Specifies whether the style of email body is HTML.
	IsHTML *bool `json:"isHtml,omitempty"`
	// The name of the email template.
	Name *string `json:"name,omitempty"`
	// If replyToEmailType is SpecificEmail, this field is required.
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
	// The type of the reply email.
	ReplyToEmailType *PUTPublicEmailTemplateRequestReplyToEmailTypeEnum `json:"replyToEmailType,omitempty"`
	// If toEmailType is SpecificEmail, this field is required.
	ToEmailAddress *string `json:"toEmailAddress,omitempty"`
	// Email receive type.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	// * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
	ToEmailType *PUTPublicEmailTemplateRequestToEmailTypeEnum `json:"toEmailType,omitempty"`
}
