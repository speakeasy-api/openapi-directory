/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetMessagesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The default value is DESCENDING
 *
 * @remarks
 *
 * If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
 *
 */
export enum GetMessagesSortOrderEnum {
  Ascending = "ASCENDING",
}

export class GetMessagesRequest extends SpeakeasyBase {
  /**
   * See the message filtering for more information.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: string;

  /**
   * The maximum number of messages that are returned.  The default is 1000.
   *
   * @remarks
   * The value of `limit` is not a guarantee that a specific number of messages will be in the response, even if there are more messages available.  Consider the case where you have 150 messages and you specify `limit=50`.  It is possible that only 49 messages will be returned.  The  way to make sure that there are no more messages is to submit a new call using the `id` filter field with the `<` operator (described below).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * The default value is DESCENDING
   *
   * @remarks
   *
   * If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortOrder",
  })
  sortOrder?: GetMessagesSortOrderEnum;
}

export class GetMessagesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Bad Request. The content or structure of your submission, or a parameter, was found to be invalid.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Contains the requested array of messages
   */
  @SpeakeasyMetadata({ elemType: shared.Message })
  messages?: shared.Message[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
