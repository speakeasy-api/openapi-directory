"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultBundlesAuthz:
    r"""Auth"""
    
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Service"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultBundles:
    r"""Bundles"""
    
    authz: Optional[TwoHundredSingleResultResultBundlesAuthz] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authz'), 'exclude': lambda f: f is None }})
    r"""Auth"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultDecisionLogs:
    r"""Logs"""
    
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Service"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultKeysGlobalKey:
    r"""Global Key"""
    
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""Scope"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultKeys:
    r"""Keys"""
    
    global_key: Optional[TwoHundredSingleResultResultKeysGlobalKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global-key'), 'exclude': lambda f: f is None }})
    r"""Global Key"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultLabels:
    r"""Labels"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Label ID"""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultServicesAcmecorp:
    
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultServices:
    r"""The types of services"""
    
    acmecorp: Optional[TwoHundredSingleResultResultServicesAcmecorp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acmecorp'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResultStatus:
    r"""Status"""
    
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Service"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResultResult:
    
    bundles: Optional[TwoHundredSingleResultResultBundles] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundles'), 'exclude': lambda f: f is None }})
    r"""Bundles"""  
    decision_logs: Optional[TwoHundredSingleResultResultDecisionLogs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decision_logs'), 'exclude': lambda f: f is None }})
    r"""Logs"""  
    default_authorization_decision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_authorization_decision'), 'exclude': lambda f: f is None }})  
    default_decision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_decision'), 'exclude': lambda f: f is None }})  
    keys: Optional[TwoHundredSingleResultResultKeys] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys'), 'exclude': lambda f: f is None }})
    r"""Keys"""  
    labels: Optional[TwoHundredSingleResultResultLabels] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels"""  
    services: Optional[TwoHundredSingleResultResultServices] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})
    r"""The types of services"""  
    status: Optional[TwoHundredSingleResultResultStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TwoHundredSingleResult:
    r"""Success"""
    
    result: Optional[TwoHundredSingleResultResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})  
    