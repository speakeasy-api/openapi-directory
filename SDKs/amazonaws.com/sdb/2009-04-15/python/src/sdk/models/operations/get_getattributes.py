"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETGETAttributesActionEnum(str, Enum):
    GET_ATTRIBUTES = 'GetAttributes'

class GETGETAttributesVersionEnum(str, Enum):
    TWO_THOUSAND_AND_NINE_04_15 = '2009-04-15'


@dataclasses.dataclass
class GETGETAttributesRequest:
    
    action: GETGETAttributesActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    aws_access_key_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'AWSAccessKeyId', 'style': 'form', 'explode': True }})  
    domain_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainName', 'style': 'form', 'explode': True }})
    r"""The name of the domain in which to perform the operation."""  
    item_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ItemName', 'style': 'form', 'explode': True }})
    r"""The name of the item."""  
    signature: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Signature', 'style': 'form', 'explode': True }})  
    signature_method: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SignatureMethod', 'style': 'form', 'explode': True }})  
    signature_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SignatureVersion', 'style': 'form', 'explode': True }})  
    timestamp: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Timestamp', 'style': 'form', 'explode': True }})  
    version: GETGETAttributesVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    attribute_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AttributeNames', 'style': 'form', 'explode': True }})
    r"""The names of the attributes."""  
    consistent_read: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConsistentRead', 'style': 'form', 'explode': True }})
    r"""Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read."""  
    

@dataclasses.dataclass
class GETGETAttributesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    