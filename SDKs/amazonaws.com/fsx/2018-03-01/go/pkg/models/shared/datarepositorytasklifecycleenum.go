// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DataRepositoryTaskLifecycleEnum string

const (
	DataRepositoryTaskLifecycleEnumPending   DataRepositoryTaskLifecycleEnum = "PENDING"
	DataRepositoryTaskLifecycleEnumExecuting DataRepositoryTaskLifecycleEnum = "EXECUTING"
	DataRepositoryTaskLifecycleEnumFailed    DataRepositoryTaskLifecycleEnum = "FAILED"
	DataRepositoryTaskLifecycleEnumSucceeded DataRepositoryTaskLifecycleEnum = "SUCCEEDED"
	DataRepositoryTaskLifecycleEnumCanceled  DataRepositoryTaskLifecycleEnum = "CANCELED"
	DataRepositoryTaskLifecycleEnumCanceling DataRepositoryTaskLifecycleEnum = "CANCELING"
)

func (e DataRepositoryTaskLifecycleEnum) ToPointer() *DataRepositoryTaskLifecycleEnum {
	return &e
}

func (e *DataRepositoryTaskLifecycleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "EXECUTING":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "CANCELING":
		*e = DataRepositoryTaskLifecycleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataRepositoryTaskLifecycleEnum: %v", v)
	}
}
