// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnmappedIdentityResolutionStatusCodeEnum - The resolution status for the external identity.
type UnmappedIdentityResolutionStatusCodeEnum string

const (
	UnmappedIdentityResolutionStatusCodeEnumCodeUnspecified             UnmappedIdentityResolutionStatusCodeEnum = "CODE_UNSPECIFIED"
	UnmappedIdentityResolutionStatusCodeEnumNotFound                    UnmappedIdentityResolutionStatusCodeEnum = "NOT_FOUND"
	UnmappedIdentityResolutionStatusCodeEnumIdentitySourceNotFound      UnmappedIdentityResolutionStatusCodeEnum = "IDENTITY_SOURCE_NOT_FOUND"
	UnmappedIdentityResolutionStatusCodeEnumIdentitySourceMisconfigured UnmappedIdentityResolutionStatusCodeEnum = "IDENTITY_SOURCE_MISCONFIGURED"
	UnmappedIdentityResolutionStatusCodeEnumTooManyMappingsFound        UnmappedIdentityResolutionStatusCodeEnum = "TOO_MANY_MAPPINGS_FOUND"
	UnmappedIdentityResolutionStatusCodeEnumInternalError               UnmappedIdentityResolutionStatusCodeEnum = "INTERNAL_ERROR"
)

func (e *UnmappedIdentityResolutionStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CODE_UNSPECIFIED":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "IDENTITY_SOURCE_NOT_FOUND":
		fallthrough
	case "IDENTITY_SOURCE_MISCONFIGURED":
		fallthrough
	case "TOO_MANY_MAPPINGS_FOUND":
		fallthrough
	case "INTERNAL_ERROR":
		*e = UnmappedIdentityResolutionStatusCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnmappedIdentityResolutionStatusCodeEnum: %s", s)
	}
}

type UnmappedIdentity struct {
	// Reference to a user, group, or domain.
	ExternalIdentity *Principal `json:"externalIdentity,omitempty"`
	// The resolution status for the external identity.
	ResolutionStatusCode *UnmappedIdentityResolutionStatusCodeEnum `json:"resolutionStatusCode,omitempty"`
}
