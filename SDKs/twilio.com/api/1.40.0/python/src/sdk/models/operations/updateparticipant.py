"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_v2010_account_conference_participant as shared_api_v2010_account_conference_participant
from enum import Enum
from typing import Optional

UPDATE_PARTICIPANT_SERVERS = [
	"https://api.twilio.com",
]


@dataclasses.dataclass
class UpdateParticipantSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateParticipantUpdateParticipantRequestHoldMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateParticipantUpdateParticipantRequestWaitMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateParticipantUpdateParticipantRequest:
    
    announce_method: Optional[UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AnnounceMethod' }})
    r"""The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`."""  
    announce_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AnnounceUrl' }})
    r"""The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs."""  
    beep_on_exit: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'BeepOnExit' }})
    r"""Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`."""  
    call_sid_to_coach: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallSidToCoach' }})
    r"""The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`."""  
    coaching: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Coaching' }})
    r"""Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined."""  
    end_conference_on_exit: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EndConferenceOnExit' }})
    r"""Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`."""  
    hold: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Hold' }})
    r"""Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference."""  
    hold_method: Optional[UpdateParticipantUpdateParticipantRequestHoldMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'HoldMethod' }})
    r"""The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`."""  
    hold_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'HoldUrl' }})
    r"""The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs."""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Muted' }})
    r"""Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`."""  
    wait_method: Optional[UpdateParticipantUpdateParticipantRequestWaitMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitMethod' }})
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""  
    wait_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitUrl' }})
    r"""The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic)."""  
    

@dataclasses.dataclass
class UpdateParticipantRequest:
    
    account_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AccountSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update."""  
    call_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'CallSid', 'style': 'simple', 'explode': False }})
    r"""The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20."""  
    conference_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ConferenceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the conference with the participant to update."""  
    request_body: Optional[UpdateParticipantUpdateParticipantRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateParticipantResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_v2010_account_conference_participant: Optional[shared_api_v2010_account_conference_participant.APIV2010AccountConferenceParticipant] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    