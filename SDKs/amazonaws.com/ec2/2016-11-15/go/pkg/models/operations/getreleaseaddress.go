// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETReleaseAddressActionEnum
type GETReleaseAddressActionEnum string

const (
	GETReleaseAddressActionEnumReleaseAddress GETReleaseAddressActionEnum = "ReleaseAddress"
)

func (e *GETReleaseAddressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ReleaseAddress":
		*e = GETReleaseAddressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReleaseAddressActionEnum: %s", s)
	}
}

// GETReleaseAddressVersionEnum
type GETReleaseAddressVersionEnum string

const (
	GETReleaseAddressVersionEnumTwoThousandAndSixteen1115 GETReleaseAddressVersionEnum = "2016-11-15"
)

func (e *GETReleaseAddressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETReleaseAddressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReleaseAddressVersionEnum: %s", s)
	}
}

type GETReleaseAddressRequest struct {
	Action GETReleaseAddressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// [EC2-VPC] The allocation ID. Required for EC2-VPC.
	AllocationID *string `queryParam:"style=form,explode=true,name=AllocationId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p> <p>If you provide an incorrect network border group, you receive an <code>InvalidAddress.NotFound</code> error.</p> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you receive an <code>InvalidParameterCombination</code> error.</p>
	NetworkBorderGroup *string `queryParam:"style=form,explode=true,name=NetworkBorderGroup"`
	// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
	PublicIP          *string                      `queryParam:"style=form,explode=true,name=PublicIp"`
	Version           GETReleaseAddressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReleaseAddressResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
