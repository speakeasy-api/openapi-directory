<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Debug 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessResponse
     */
	public function cloudsearchDebugDatasourcesItemsCheckAccess(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/debug/{name}:checkAccess', \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "principal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsCheckAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkAccessResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckAccessResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlResponse
     */
	public function cloudsearchDebugDatasourcesItemsSearchByViewUrl(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/debug/{name}/items:searchByViewUrl', \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchItemsByViewUrlRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugDatasourcesItemsSearchByViewUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchItemsByViewUrlResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchItemsByViewUrlResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityResponse
     */
	public function cloudsearchDebugIdentitysourcesItemsListForunmappedidentity(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/debug/{parent}/items:forunmappedidentity', \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesItemsListForunmappedidentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listItemNamesForUnmappedIdentityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListItemNamesForUnmappedIdentityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListResponse
     */
	public function cloudsearchDebugIdentitysourcesUnmappedidsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/debug/{parent}/unmappedids', \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchDebugIdentitysourcesUnmappedidsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnmappedIdentitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUnmappedIdentitiesResponse', 'json');
            }
        }

        return $response;
    }
}