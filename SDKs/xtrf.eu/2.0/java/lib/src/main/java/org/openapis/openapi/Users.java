/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * To change the description use /examples/TagsDescriptions.json
 */
public class Users {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Users(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Sets user's password to a new value.
     * Sets user's password to a new value.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangePasswordResponse changePassword(org.openapis.openapi.models.operations.ChangePasswordRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChangePasswordPathParams.class, baseUrl, "/users/{userId}/password", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangePasswordResponse res = new org.openapis.openapi.models.operations.ChangePasswordResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Returns list of simple users representations
     * Returns list of simple users representations
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAllNamesWithIds1Response getAllNamesWithIds1() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAllNamesWithIds1Response res = new org.openapis.openapi.models.operations.GetAllNamesWithIds1Response() {{
            entityWithNameDTOS = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EntityWithNameDTO[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EntityWithNameDTO[].class);
                res.entityWithNameDTOS = out;
            }
        }

        return res;
    }

    /**
     * Returns user details.
     * Returns user details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetById6Response getById6(org.openapis.openapi.models.operations.GetById6Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetById6PathParams.class, baseUrl, "/users/{userId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetById6Response res = new org.openapis.openapi.models.operations.GetById6Response() {{
            userDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserDTO.class);
                res.userDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns custom field of a given user.
     * Returns custom field of a given user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCustomField1Response getCustomField1(org.openapis.openapi.models.operations.GetCustomField1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCustomField1PathParams.class, baseUrl, "/users/{userId}/customFields/{customFieldKey}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCustomField1Response res = new org.openapis.openapi.models.operations.GetCustomField1Response() {{
            customFieldDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomFieldDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomFieldDTO.class);
                res.customFieldDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns custom fields of a given user.
     * Returns custom fields of a given user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCustomFields4Response getCustomFields4(org.openapis.openapi.models.operations.GetCustomFields4Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCustomFields4PathParams.class, baseUrl, "/users/{userId}/customFields", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCustomFields4Response res = new org.openapis.openapi.models.operations.GetCustomFields4Response() {{
            customFieldsDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomFieldDTO[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomFieldDTO[].class);
                res.customFieldsDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns currently signed in user details.
     * Returns currently signed in user details.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMeResponse getMe() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/users/me");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMeResponse res = new org.openapis.openapi.models.operations.GetMeResponse() {{
            userDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserDTO.class);
                res.userDTO = out;
            }
        }

        return res;
    }

    /**
     * Returns time zone preferred by user currently signed in.
     * Returns time zone preferred by user currently signed in.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTimeZoneResponse getTimeZone() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/users/me/timeZone");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTimeZoneResponse res = new org.openapis.openapi.models.operations.GetTimeZoneResponse() {{
            timeZoneDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TimeZoneDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TimeZoneDTO.class);
                res.timeZoneDTO = out;
            }
        }

        return res;
    }

    /**
     * Updates given custom field of a given user.
     * Updates given custom field of a given user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCustomField1Response updateCustomField1(org.openapis.openapi.models.operations.UpdateCustomField1Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCustomField1PathParams.class, baseUrl, "/users/{userId}/customFields/{customFieldKey}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCustomField1Response res = new org.openapis.openapi.models.operations.UpdateCustomField1Response() {{
            customFieldDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomFieldDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomFieldDTO.class);
                res.customFieldDTO = out;
            }
        }

        return res;
    }

    /**
     * Updates custom fields of a given user.
     * Updates custom fields of a given user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCustomFields2Response updateCustomFields2(org.openapis.openapi.models.operations.UpdateCustomFields2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCustomFields2PathParams.class, baseUrl, "/users/{userId}/customFields", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCustomFields2Response res = new org.openapis.openapi.models.operations.UpdateCustomFields2Response() {{
            customFieldsDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CustomFieldDTO[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CustomFieldDTO[].class);
                res.customFieldsDTO = out;
            }
        }

        return res;
    }

    /**
     * Updates an existing user.
     * Updates an existing user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Update3Response update3(org.openapis.openapi.models.operations.Update3Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.Update3PathParams.class, baseUrl, "/users/{userId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Update3Response res = new org.openapis.openapi.models.operations.Update3Response() {{
            userDTO = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserDTO out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserDTO.class);
                res.userDTO = out;
            }
        }

        return res;
    }
}