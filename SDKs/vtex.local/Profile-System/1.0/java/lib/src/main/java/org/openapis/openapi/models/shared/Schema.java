/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Schema {
    /**
     * Schema's human readable description.
     */
    @JsonProperty("description")
    public String description;

    public Schema withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentTTL")
    public Long documentTTL;

    public Schema withDocumentTTL(Long documentTTL) {
        this.documentTTL = documentTTL;
        return this;
    }
    
    /**
     * Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
     */
    @JsonProperty("properties")
    public SchemaProperties properties;

    public Schema withProperties(SchemaProperties properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * Schema required fields.
     */
    @JsonProperty("required")
    public String[] required;

    public Schema withRequired(String[] required) {
        this.required = required;
        return this;
    }
    
    /**
     * Schema title.
     */
    @JsonProperty("title")
    public String title;

    public Schema withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Schema type.
     */
    @JsonProperty("type")
    public String type;

    public Schema withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("v-indexed")
    public Object[] vIndexed;

    public Schema withVIndexed(Object[] vIndexed) {
        this.vIndexed = vIndexed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("v-unique")
    public Object[] vUnique;

    public Schema withVUnique(Object[] vUnique) {
        this.vUnique = vUnique;
        return this;
    }
    
    /**
     * Schema version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public Schema withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    public Schema(@JsonProperty("description") String description, @JsonProperty("properties") SchemaProperties properties, @JsonProperty("required") String[] required, @JsonProperty("title") String title, @JsonProperty("type") String type) {
        this.description = description;
        this.properties = properties;
        this.required = required;
        this.title = title;
        this.type = type;
  }
}
