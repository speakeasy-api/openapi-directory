/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Environment - An Environment represents the set of test runs (Steps) from the parent Execution that are configured with the same set of dimensions (Model, Version, Locale, and Orientation). Multiple such runs occur particularly because of features like sharding (splitting up a test suite to run in parallel across devices) and reruns (running a test multiple times to check for different outcomes).
 */
public class Environment {
    /**
     * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionTime")
    public Timestamp completionTime;

    public Environment withCompletionTime(Timestamp completionTime) {
        this.completionTime = completionTime;
        return this;
    }
    
    /**
     * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public Timestamp creationTime;

    public Environment withCreationTime(Timestamp creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Dimension values describing the environment. Dimension values always consist of "Model", "Version", "Locale", and "Orientation". - In response: always set - In create request: always set - In update request: never set
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionValue")
    public EnvironmentDimensionValueEntry[] dimensionValue;

    public Environment withDimensionValue(EnvironmentDimensionValueEntry[] dimensionValue) {
        this.dimensionValue = dimensionValue;
        return this;
    }
    
    /**
     * A short human-readable name to display in the UI. Maximum of 100 characters. For example: Nexus 5, API 27.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Environment withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. An Environment id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentId")
    public String environmentId;

    public Environment withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }
    
    /**
     * Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentResult")
    public MergedResult environmentResult;

    public Environment withEnvironmentResult(MergedResult environmentResult) {
        this.environmentResult = environmentResult;
        return this;
    }
    
    /**
     * Output only. An Execution id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionId")
    public String executionId;

    public Environment withExecutionId(String executionId) {
        this.executionId = executionId;
        return this;
    }
    
    /**
     * Output only. A History id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("historyId")
    public String historyId;

    public Environment withHistoryId(String historyId) {
        this.historyId = historyId;
        return this;
    }
    
    /**
     * Output only. A Project id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    public String projectId;

    public Environment withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }
    
    /**
     * The storage for test results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultsStorage")
    public ResultsStorage resultsStorage;

    public Environment withResultsStorage(ResultsStorage resultsStorage) {
        this.resultsStorage = resultsStorage;
        return this;
    }
    
    /**
     * Output only. Summaries of shards. Only one shard will present unless sharding feature is enabled in TestExecutionService.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shardSummaries")
    public ShardSummary[] shardSummaries;

    public Environment withShardSummaries(ShardSummary[] shardSummaries) {
        this.shardSummaries = shardSummaries;
        return this;
    }
    
    public Environment(){}
}
