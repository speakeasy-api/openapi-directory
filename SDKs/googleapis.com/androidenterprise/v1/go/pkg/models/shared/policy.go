// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyAutoUpdatePolicyEnum - Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect. "choiceToTheUser" allows the device's user to configure the app update policy. "always" enables auto updates. "never" disables auto updates. "wifiOnly" enables auto updates only when the device is connected to wifi.
type PolicyAutoUpdatePolicyEnum string

const (
	PolicyAutoUpdatePolicyEnumAutoUpdatePolicyUnspecified PolicyAutoUpdatePolicyEnum = "autoUpdatePolicyUnspecified"
	PolicyAutoUpdatePolicyEnumChoiceToTheUser             PolicyAutoUpdatePolicyEnum = "choiceToTheUser"
	PolicyAutoUpdatePolicyEnumNever                       PolicyAutoUpdatePolicyEnum = "never"
	PolicyAutoUpdatePolicyEnumWifiOnly                    PolicyAutoUpdatePolicyEnum = "wifiOnly"
	PolicyAutoUpdatePolicyEnumAlways                      PolicyAutoUpdatePolicyEnum = "always"
)

func (e *PolicyAutoUpdatePolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "autoUpdatePolicyUnspecified":
		fallthrough
	case "choiceToTheUser":
		fallthrough
	case "never":
		fallthrough
	case "wifiOnly":
		fallthrough
	case "always":
		*e = PolicyAutoUpdatePolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyAutoUpdatePolicyEnum: %s", s)
	}
}

// PolicyDeviceReportPolicyEnum - Whether the device reports app states to the EMM. The default value is "deviceReportDisabled".
type PolicyDeviceReportPolicyEnum string

const (
	PolicyDeviceReportPolicyEnumDeviceReportPolicyUnspecified PolicyDeviceReportPolicyEnum = "deviceReportPolicyUnspecified"
	PolicyDeviceReportPolicyEnumDeviceReportDisabled          PolicyDeviceReportPolicyEnum = "deviceReportDisabled"
	PolicyDeviceReportPolicyEnumDeviceReportEnabled           PolicyDeviceReportPolicyEnum = "deviceReportEnabled"
)

func (e *PolicyDeviceReportPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deviceReportPolicyUnspecified":
		fallthrough
	case "deviceReportDisabled":
		fallthrough
	case "deviceReportEnabled":
		*e = PolicyDeviceReportPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyDeviceReportPolicyEnum: %s", s)
	}
}

// PolicyProductAvailabilityPolicyEnum - The availability granted to the device for the specified products. "all" gives the device access to all products, regardless of approval status. "all" does not enable automatic visibility of "alpha" or "beta" tracks. "whitelist" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.
type PolicyProductAvailabilityPolicyEnum string

const (
	PolicyProductAvailabilityPolicyEnumProductAvailabilityPolicyUnspecified PolicyProductAvailabilityPolicyEnum = "productAvailabilityPolicyUnspecified"
	PolicyProductAvailabilityPolicyEnumWhitelist                            PolicyProductAvailabilityPolicyEnum = "whitelist"
	PolicyProductAvailabilityPolicyEnumAll                                  PolicyProductAvailabilityPolicyEnum = "all"
)

func (e *PolicyProductAvailabilityPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "productAvailabilityPolicyUnspecified":
		fallthrough
	case "whitelist":
		fallthrough
	case "all":
		*e = PolicyProductAvailabilityPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyProductAvailabilityPolicyEnum: %s", s)
	}
}

// Policy - The device policy for a given managed device.
type Policy struct {
	// Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect. "choiceToTheUser" allows the device's user to configure the app update policy. "always" enables auto updates. "never" disables auto updates. "wifiOnly" enables auto updates only when the device is connected to wifi.
	AutoUpdatePolicy *PolicyAutoUpdatePolicyEnum `json:"autoUpdatePolicy,omitempty"`
	// Whether the device reports app states to the EMM. The default value is "deviceReportDisabled".
	DeviceReportPolicy *PolicyDeviceReportPolicyEnum `json:"deviceReportPolicy,omitempty"`
	// Maintenance window for managed Google Play Accounts. This allows Play store to update the apps on the foreground in the designated window.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`
	// The availability granted to the device for the specified products. "all" gives the device access to all products, regardless of approval status. "all" does not enable automatic visibility of "alpha" or "beta" tracks. "whitelist" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.
	ProductAvailabilityPolicy *PolicyProductAvailabilityPolicyEnum `json:"productAvailabilityPolicy,omitempty"`
	// The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.
	ProductPolicy []ProductPolicy `json:"productPolicy,omitempty"`
}
