"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum(str, Enum):
    r"""The algorithm used to encrypt the PDF document."""
    AES_128 = 'AES-128'
    AES_256 = 'AES-256'


@dataclasses.dataclass
class AddRestrictionsV1RequestBodyFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'file' }})  
    

@dataclasses.dataclass
class AddRestrictionsV1RequestBody:
    
    file: AddRestrictionsV1RequestBodyFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    r"""The input PDF document"""  
    owner_password: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'owner_password' }})
    r"""The password required to open and change permissions of the PDF document."""  
    allow_accessibility: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_accessibility' }})
    r"""If false, accessibility programs can't read the text or images of the document."""  
    allow_assemble_document: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_assemble_document' }})
    r"""If false, the user can't assemble or manipulate the document."""  
    allow_change_content: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_change_content' }})
    r"""If false, the user can't change the content of the document."""  
    allow_comment_and_fill_form: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_comment_and_fill_form' }})
    r"""If false, the user can't add, edit or modify annotations or fill form fields."""  
    allow_copy_content: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_copy_content' }})
    r"""If false, the user can't copy text and images to the clipboard."""  
    allow_fill_form: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_fill_form' }})
    r"""If false, the user can't fill forms fields."""  
    allow_print: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_print' }})
    r"""If false, the user can't print the document."""  
    allow_print_high_resolution: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_print_high_resolution' }})
    r"""If false, the user can't print the document in high resolution."""  
    encryption_algorithm: Optional[AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'encryption_algorithm' }})
    r"""The algorithm used to encrypt the PDF document."""  
    user_password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_password' }})
    r"""The password required to open the PDF document. If the `user_password` is not set, the user will be able to open the document without a password."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddRestrictionsV14XXApplicationProblemPlusJSON:
    r"""Error"""
    
    errors: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AddRestrictionsV1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_restrictions_v1_200_application_pdf_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""The document was processed succesfully."""  
    add_restrictions_v1_4_xx_application_problem_plus_json_object: Optional[AddRestrictionsV14XXApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    