"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import transactionaccount as shared_transactionaccount
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TransactionStatusEnum(str, Enum):
    r"""The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent."""
    PENDING = 'pending'
    POSTED = 'posted'

class TransactionTypeEnum(str, Enum):
    r"""Whether the transaction is a debit or a credit"""
    DEBIT = 'debit'
    CREDIT = 'credit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transaction:
    r"""Success"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    amount_in_base_currency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_in_base_currency'), 'exclude': lambda f: f is None }})
    r"""The amount of the transaction in the user's base currency."""  
    category: Optional[shared_category.Category] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    cheque_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cheque_number'), 'exclude': lambda f: f is None }})  
    closing_balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closing_balance'), 'exclude': lambda f: f is None }})
    r"""The closing balance of the account at the transaction."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""When the transaction was created."""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date the transaction took place."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the transaction."""  
    is_transfer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_transfer'), 'exclude': lambda f: f is None }})
    r"""Whether the transaction is a transfer."""  
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})  
    memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo'), 'exclude': lambda f: f is None }})  
    needs_review: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('needs_review'), 'exclude': lambda f: f is None }})
    r"""Whether the transaction needs to be reviewed."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})  
    original_payee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_payee'), 'exclude': lambda f: f is None }})
    r"""The payee the transaction was created with."""  
    payee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee'), 'exclude': lambda f: f is None }})
    r"""The payee/merchant of the transaction."""  
    status: Optional[TransactionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent."""  
    transaction_account: Optional[shared_transactionaccount.TransactionAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_account'), 'exclude': lambda f: f is None }})  
    type: Optional[TransactionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Whether the transaction is a debit or a credit"""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""When the transaction was last updated."""  
    upload_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_source'), 'exclude': lambda f: f is None }})
    r"""Where the transaction came from."""  
    