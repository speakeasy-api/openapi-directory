/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Container - Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions.
 */
public class Container {
    /**
     * GTM Account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public Container withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The Container ID uniquely identifies the GTM Container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerId")
    public String containerId;

    public Container withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }
    
    /**
     * List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    public String[] domainName;

    public Container withDomainName(String[] domainName) {
        this.domainName = domainName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public ContainerFeatures features;

    public Container withFeatures(ContainerFeatures features) {
        this.features = features;
        return this;
    }
    
    /**
     * The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public Container withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Container withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public Container withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * GTM Container's API relative path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public Container withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Container Public ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicId")
    public String publicId;

    public Container withPublicId(String publicId) {
        this.publicId = publicId;
        return this;
    }
    
    /**
     * All Tag IDs that refer to this Container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagIds")
    public String[] tagIds;

    public Container withTagIds(String[] tagIds) {
        this.tagIds = tagIds;
        return this;
    }
    
    /**
     * Auto generated link to the tag manager UI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagManagerUrl")
    public String tagManagerUrl;

    public Container withTagManagerUrl(String tagManagerUrl) {
        this.tagManagerUrl = tagManagerUrl;
        return this;
    }
    
    /**
     * List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taggingServerUrls")
    public String[] taggingServerUrls;

    public Container withTaggingServerUrls(String[] taggingServerUrls) {
        this.taggingServerUrls = taggingServerUrls;
        return this;
    }
    
    /**
     * List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageContext")
    public ContainerUsageContextEnum[] usageContext;

    public Container withUsageContext(ContainerUsageContextEnum[] usageContext) {
        this.usageContext = usageContext;
        return this;
    }
    
    public Container(){}
}
