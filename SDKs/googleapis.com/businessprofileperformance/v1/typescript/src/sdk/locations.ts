/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Locations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   *  Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
   */
  businessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeries(
    req: operations.BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{location}:fetchMultiDailyMetricsTimeSeries",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse =
        new operations.BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fetchMultiDailyMetricsTimeSeriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchMultiDailyMetricsTimeSeriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
   */
  businessprofileperformanceLocationsGetDailyMetricsTimeSeries(
    req: operations.BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:getDailyMetricsTimeSeries",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse =
        new operations.BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDailyMetricsTimeSeriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDailyMetricsTimeSeriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`
   */
  businessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyList(
    req: operations.BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/searchkeywords/impressions/monthly",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse =
        new operations.BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSearchKeywordImpressionsMonthlyResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.ListSearchKeywordImpressionsMonthlyResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
