"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import napublicdataresponse as shared_napublicdataresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetpublicdataSecurity:
    
    code_oauth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    password_oauth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetpublicdataRequiredDataEnum(str, Enum):
    TEMPERATURE = 'temperature'
    HUMIDITY = 'humidity'
    PRESSURE = 'pressure'
    WIND = 'wind'
    RAIN = 'rain'


@dataclasses.dataclass
class GetpublicdataRequest:
    
    lat_ne: int = dataclasses.field(metadata={'query_param': { 'field_name': 'lat_ne', 'style': 'form', 'explode': True }})
    r"""Latitude of the north east corner of the requested area. -85 <= lat_ne <= 85 and lat_ne>lat_sw"""  
    lat_sw: int = dataclasses.field(metadata={'query_param': { 'field_name': 'lat_sw', 'style': 'form', 'explode': True }})
    r"""Latitude of the south west corner of the requested area. -85 <= lat_sw <= 85"""  
    lon_ne: int = dataclasses.field(metadata={'query_param': { 'field_name': 'lon_ne', 'style': 'form', 'explode': True }})
    r"""Longitude of the north east corner of the requested area. -180 <= lon_ne <= 180 and lon_ne>lon_sw"""  
    lon_sw: int = dataclasses.field(metadata={'query_param': { 'field_name': 'lon_sw', 'style': 'form', 'explode': True }})
    r"""Longitude of the south west corner of the requested area. -180 <= lon_sw <= 180"""  
    filter: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""True to exclude stations with abnormal temperature measures. Default is false."""  
    required_data: Optional[list[GetpublicdataRequiredDataEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'required_data', 'style': 'form', 'explode': False }})
    r"""To filter stations based on relevant measurements you want (e.g. rain will only return stations with rain gauges). Default is no filter. You can find all measurements available on the Thermostat page."""  
    

@dataclasses.dataclass
class GetpublicdataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    na_public_data_response: Optional[shared_napublicdataresponse.NAPublicDataResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    