"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasource as shared_datasource
from ..shared import importmode_enum as shared_importmode_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDatasetImportJobRequest:
    
    dataset_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetArn') }})  
    dataset_import_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetImportJobName') }})  
    data_source: shared_datasource.DataSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSource') }})  
    format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Format'), 'exclude': lambda f: f is None }})  
    geolocation_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeolocationFormat'), 'exclude': lambda f: f is None }})  
    import_mode: Optional[shared_importmode_enum.ImportModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportMode'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    timestamp_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimestampFormat'), 'exclude': lambda f: f is None }})  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeZone'), 'exclude': lambda f: f is None }})  
    use_geolocation_for_time_zone: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseGeolocationForTimeZone'), 'exclude': lambda f: f is None }})  
    