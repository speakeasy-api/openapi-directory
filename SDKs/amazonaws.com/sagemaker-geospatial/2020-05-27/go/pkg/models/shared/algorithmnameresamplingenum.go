// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AlgorithmNameResamplingEnum string

const (
	AlgorithmNameResamplingEnumNear        AlgorithmNameResamplingEnum = "NEAR"
	AlgorithmNameResamplingEnumBilinear    AlgorithmNameResamplingEnum = "BILINEAR"
	AlgorithmNameResamplingEnumCubic       AlgorithmNameResamplingEnum = "CUBIC"
	AlgorithmNameResamplingEnumCubicspline AlgorithmNameResamplingEnum = "CUBICSPLINE"
	AlgorithmNameResamplingEnumLanczos     AlgorithmNameResamplingEnum = "LANCZOS"
	AlgorithmNameResamplingEnumAverage     AlgorithmNameResamplingEnum = "AVERAGE"
	AlgorithmNameResamplingEnumRms         AlgorithmNameResamplingEnum = "RMS"
	AlgorithmNameResamplingEnumMode        AlgorithmNameResamplingEnum = "MODE"
	AlgorithmNameResamplingEnumMax         AlgorithmNameResamplingEnum = "MAX"
	AlgorithmNameResamplingEnumMin         AlgorithmNameResamplingEnum = "MIN"
	AlgorithmNameResamplingEnumMed         AlgorithmNameResamplingEnum = "MED"
	AlgorithmNameResamplingEnumQ1          AlgorithmNameResamplingEnum = "Q1"
	AlgorithmNameResamplingEnumQ3          AlgorithmNameResamplingEnum = "Q3"
	AlgorithmNameResamplingEnumSum         AlgorithmNameResamplingEnum = "SUM"
)

func (e AlgorithmNameResamplingEnum) ToPointer() *AlgorithmNameResamplingEnum {
	return &e
}

func (e *AlgorithmNameResamplingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEAR":
		fallthrough
	case "BILINEAR":
		fallthrough
	case "CUBIC":
		fallthrough
	case "CUBICSPLINE":
		fallthrough
	case "LANCZOS":
		fallthrough
	case "AVERAGE":
		fallthrough
	case "RMS":
		fallthrough
	case "MODE":
		fallthrough
	case "MAX":
		fallthrough
	case "MIN":
		fallthrough
	case "MED":
		fallthrough
	case "Q1":
		fallthrough
	case "Q3":
		fallthrough
	case "SUM":
		*e = AlgorithmNameResamplingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlgorithmNameResamplingEnum: %v", v)
	}
}
