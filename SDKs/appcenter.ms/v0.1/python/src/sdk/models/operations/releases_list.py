"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class ReleasesListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    published_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'published_only', 'style': 'form', 'explode': True }})
    r"""When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out."""  
    release_id: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'releaseId', 'style': 'form', 'explode': True }})
    r"""The id of a release"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to."""  
    top: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'top', 'style': 'form', 'explode': True }})
    r"""The number of releases to return"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesList200ApplicationJSONBuild:
    r"""Build information for the release"""
    
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_name'), 'exclude': lambda f: f is None }})
    r"""The branch name of the build producing the release"""  
    commit_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_hash'), 'exclude': lambda f: f is None }})
    r"""The commit hash of the build producing the release"""  
    commit_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_message'), 'exclude': lambda f: f is None }})
    r"""The commit message of the build producing the release"""  
    
class ReleasesList200ApplicationJSONDestinationTypeEnum(str, Enum):
    r"""OBSOLETE. Will be removed in next version. The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
    """
    GROUP = 'group'
    STORE = 'store'
    TESTER = 'tester'

class ReleasesList200ApplicationJSONDestinationsDestinationTypeEnum(str, Enum):
    r"""Destination can be either store or group."""
    GROUP = 'group'
    STORE = 'store'
    TESTER = 'tester'

class ReleasesList200ApplicationJSONDestinationsTypeEnum(str, Enum):
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""
    INTUNE = 'intune'
    GOOGLEPLAY = 'googleplay'
    APPLE = 'apple'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesList200ApplicationJSONDestinations:
    r"""A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution store."""  
    destination_type: Optional[ReleasesList200ApplicationJSONDestinationsDestinationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_type'), 'exclude': lambda f: f is None }})
    r"""Destination can be either store or group."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name for the group or tester"""  
    is_latest: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_latest'), 'exclude': lambda f: f is None }})
    r"""Is the containing release the latest one in this distribution store."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution store."""  
    publishing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishing_status'), 'exclude': lambda f: f is None }})
    r"""publishing status of the release in the store."""  
    type: Optional[ReleasesList200ApplicationJSONDestinationsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesList200ApplicationJSONDistributionGroups:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution group."""  
    is_latest: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_latest'), 'exclude': lambda f: f is None }})
    r"""Is the containing release the latest one in this distribution group."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution group."""  
    
class ReleasesList200ApplicationJSONDistributionStoresTypeEnum(str, Enum):
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""
    INTUNE = 'intune'
    GOOGLEPLAY = 'googleplay'
    APPLE = 'apple'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesList200ApplicationJSONDistributionStores:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution store."""  
    is_latest: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_latest'), 'exclude': lambda f: f is None }})
    r"""Is the containing release the latest one in this distribution store."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution store."""  
    publishing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishing_status'), 'exclude': lambda f: f is None }})
    r"""publishing status of the release in the store."""  
    type: Optional[ReleasesList200ApplicationJSONDistributionStoresTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""  
    
class ReleasesList200ApplicationJSONOriginEnum(str, Enum):
    r"""The release's origin"""
    HOCKEYAPP = 'hockeyapp'
    APPCENTER = 'appcenter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesList200ApplicationJSON:
    r"""Basic information on a release"""
    
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""This value determines the whether a release currently is enabled or disabled."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying this unique release."""  
    short_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_version') }})
    r"""The release's short version.<br>
    For iOS: CFBundleShortVersionString from info.plist.<br>
    For Android: android:versionName from AppManifest.xml.
    """  
    uploaded_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_at') }})
    r"""UTC time in ISO 8601 format of the uploaded time."""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""The release's version.<br>
    For iOS: CFBundleVersion from info.plist.<br>
    For Android: android:versionCode from AppManifest.xml.
    """  
    build: Optional[ReleasesList200ApplicationJSONBuild] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Build information for the release"""  
    destination_type: Optional[ReleasesList200ApplicationJSONDestinationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_type'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
    """  
    destinations: Optional[list[ReleasesList200ApplicationJSONDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""A list of distribution groups or stores."""  
    distribution_groups: Optional[list[ReleasesList200ApplicationJSONDistributionGroups]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_groups'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release."""  
    distribution_stores: Optional[list[ReleasesList200ApplicationJSONDistributionStores]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_stores'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release."""  
    file_extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_extension'), 'exclude': lambda f: f is None }})
    r"""The file extension of the main (user-uploaded) package file."""  
    is_external_build: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_external_build'), 'exclude': lambda f: f is None }})
    r"""This value determines if a release is external or not."""  
    origin: Optional[ReleasesList200ApplicationJSONOriginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The release's origin"""  
    

@dataclasses.dataclass
class ReleasesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_list_200_application_json_objects: Optional[list[ReleasesList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    