"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Players:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def games_players_get(self, request: operations.GamesPlayersGetRequest, security: operations.GamesPlayersGetSecurity) -> operations.GamesPlayersGetResponse:
        r"""Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesPlayersGetRequest, base_url, '/games/v1/players/{playerId}', request)
        
        query_params = utils.get_query_params(operations.GamesPlayersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesPlayersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Player])
                res.player = out

        return res

    def games_players_get_multiple_application_player_ids(self, request: operations.GamesPlayersGetMultipleApplicationPlayerIdsRequest, security: operations.GamesPlayersGetMultipleApplicationPlayerIdsSecurity) -> operations.GamesPlayersGetMultipleApplicationPlayerIdsResponse:
        r"""Get the application player ids for the currently authenticated player across all requested games by the same developer as the calling application. This will only return ids for players that actually have an id (scoped or otherwise) with that game."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1/players/me/multipleApplicationPlayerIds'
        
        query_params = utils.get_query_params(operations.GamesPlayersGetMultipleApplicationPlayerIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesPlayersGetMultipleApplicationPlayerIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetMultipleApplicationPlayerIdsResponse])
                res.get_multiple_application_player_ids_response = out

        return res

    def games_players_get_scoped_player_ids(self, request: operations.GamesPlayersGetScopedPlayerIdsRequest, security: operations.GamesPlayersGetScopedPlayerIdsSecurity) -> operations.GamesPlayersGetScopedPlayerIdsResponse:
        r"""Retrieves scoped player identifiers for currently authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1/players/me/scopedIds'
        
        query_params = utils.get_query_params(operations.GamesPlayersGetScopedPlayerIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesPlayersGetScopedPlayerIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScopedPlayerIds])
                res.scoped_player_ids = out

        return res

    def games_players_list(self, request: operations.GamesPlayersListRequest, security: operations.GamesPlayersListSecurity) -> operations.GamesPlayersListResponse:
        r"""Get the collection of players for the currently authenticated user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesPlayersListRequest, base_url, '/games/v1/players/me/players/{collection}', request)
        
        query_params = utils.get_query_params(operations.GamesPlayersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesPlayersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlayerListResponse])
                res.player_list_response = out

        return res

    