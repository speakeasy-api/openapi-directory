"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import extensionconfig as shared_extensionconfig
from ..shared import managedconfigurationtemplate as shared_managedconfigurationtemplate
from ..shared import permissiongrant as shared_permissiongrant
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum(str, Enum):
    r"""Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy."""
    ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED = 'ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED'
    VPN_LOCKDOWN_ENFORCED = 'VPN_LOCKDOWN_ENFORCED'
    VPN_LOCKDOWN_EXEMPTION = 'VPN_LOCKDOWN_EXEMPTION'

class ApplicationPolicyAutoUpdateModeEnum(str, Enum):
    r"""Controls the auto-update mode for the app."""
    AUTO_UPDATE_MODE_UNSPECIFIED = 'AUTO_UPDATE_MODE_UNSPECIFIED'
    AUTO_UPDATE_DEFAULT = 'AUTO_UPDATE_DEFAULT'
    AUTO_UPDATE_POSTPONED = 'AUTO_UPDATE_POSTPONED'
    AUTO_UPDATE_HIGH_PRIORITY = 'AUTO_UPDATE_HIGH_PRIORITY'

class ApplicationPolicyConnectedWorkAndPersonalAppEnum(str, Enum):
    r"""Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent."""
    CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED = 'CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED'
    CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED = 'CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED'
    CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED = 'CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED'

class ApplicationPolicyDefaultPermissionPolicyEnum(str, Enum):
    r"""The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps."""
    PERMISSION_POLICY_UNSPECIFIED = 'PERMISSION_POLICY_UNSPECIFIED'
    PROMPT = 'PROMPT'
    GRANT = 'GRANT'
    DENY = 'DENY'

class ApplicationPolicyDelegatedScopesEnum(str, Enum):
    DELEGATED_SCOPE_UNSPECIFIED = 'DELEGATED_SCOPE_UNSPECIFIED'
    CERT_INSTALL = 'CERT_INSTALL'
    MANAGED_CONFIGURATIONS = 'MANAGED_CONFIGURATIONS'
    BLOCK_UNINSTALL = 'BLOCK_UNINSTALL'
    PERMISSION_GRANT = 'PERMISSION_GRANT'
    PACKAGE_ACCESS = 'PACKAGE_ACCESS'
    ENABLE_SYSTEM_APP = 'ENABLE_SYSTEM_APP'
    NETWORK_ACTIVITY_LOGS = 'NETWORK_ACTIVITY_LOGS'
    SECURITY_LOGS = 'SECURITY_LOGS'

class ApplicationPolicyInstallTypeEnum(str, Enum):
    r"""The type of installation to perform."""
    INSTALL_TYPE_UNSPECIFIED = 'INSTALL_TYPE_UNSPECIFIED'
    PREINSTALLED = 'PREINSTALLED'
    FORCE_INSTALLED = 'FORCE_INSTALLED'
    BLOCKED = 'BLOCKED'
    AVAILABLE = 'AVAILABLE'
    REQUIRED_FOR_SETUP = 'REQUIRED_FOR_SETUP'
    KIOSK = 'KIOSK'

class ApplicationPolicyWorkProfileWidgetsEnum(str, Enum):
    r"""Specifies whether the app installed in the work profile is allowed to add widgets to the home screen."""
    WORK_PROFILE_WIDGETS_UNSPECIFIED = 'WORK_PROFILE_WIDGETS_UNSPECIFIED'
    WORK_PROFILE_WIDGETS_ALLOWED = 'WORK_PROFILE_WIDGETS_ALLOWED'
    WORK_PROFILE_WIDGETS_DISALLOWED = 'WORK_PROFILE_WIDGETS_DISALLOWED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationPolicy:
    r"""Policy for an individual app."""
    
    accessible_track_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessibleTrackIds'), 'exclude': lambda f: f is None }})
    r"""List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo."""  
    always_on_vpn_lockdown_exemption: Optional[ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alwaysOnVpnLockdownExemption'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy."""  
    auto_update_mode: Optional[ApplicationPolicyAutoUpdateModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoUpdateMode'), 'exclude': lambda f: f is None }})
    r"""Controls the auto-update mode for the app."""  
    connected_work_and_personal_app: Optional[ApplicationPolicyConnectedWorkAndPersonalAppEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectedWorkAndPersonalApp'), 'exclude': lambda f: f is None }})
    r"""Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent."""  
    default_permission_policy: Optional[ApplicationPolicyDefaultPermissionPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPermissionPolicy'), 'exclude': lambda f: f is None }})
    r"""The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps."""  
    delegated_scopes: Optional[list[ApplicationPolicyDelegatedScopesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delegatedScopes'), 'exclude': lambda f: f is None }})
    r"""The scopes delegated to the app from Android Device Policy."""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Whether the app is disabled. When disabled, the app data is still preserved."""  
    extension_config: Optional[shared_extensionconfig.ExtensionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extensionConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration to enable an app as an extension app, with the capability of interacting with Android Device Policy offline. For Android versions 13 and above, extension apps are exempt from battery restrictions so will not be placed into the restricted App Standby Bucket (https://developer.android.com/topic/performance/appstandby#restricted-bucket). Extensions apps are also protected against users clearing their data or force-closing the application, although admins can continue to use the clear app data command (https://developer.android.com/management/reference/rest/v1/enterprises.devices/issueCommand#CommandType) on extension apps if needed for Android 13 and above."""  
    install_type: Optional[ApplicationPolicyInstallTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installType'), 'exclude': lambda f: f is None }})
    r"""The type of installation to perform."""  
    lock_task_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockTaskAllowed'), 'exclude': lambda f: f is None }})
    r"""Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device."""  
    managed_configuration: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedConfiguration'), 'exclude': lambda f: f is None }})
    r"""Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects"""  
    managed_configuration_template: Optional[shared_managedconfigurationtemplate.ManagedConfigurationTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedConfigurationTemplate'), 'exclude': lambda f: f is None }})
    r"""The managed configurations template for the app, saved from the managed configurations iframe."""  
    minimum_version_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumVersionCode'), 'exclude': lambda f: f is None }})
    r"""The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy."""  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})
    r"""The package name of the app. For example, com.google.android.youtube for the YouTube app."""  
    permission_grants: Optional[list[shared_permissiongrant.PermissionGrant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionGrants'), 'exclude': lambda f: f is None }})
    r"""Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps."""  
    work_profile_widgets: Optional[ApplicationPolicyWorkProfileWidgetsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workProfileWidgets'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the app installed in the work profile is allowed to add widgets to the home screen."""  
    