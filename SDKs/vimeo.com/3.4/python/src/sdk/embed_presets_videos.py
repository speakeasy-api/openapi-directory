"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EmbedPresetsVideos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_embed_preset(self, request: operations.AddVideoEmbedPresetRequest, security: operations.AddVideoEmbedPresetSecurity) -> operations.AddVideoEmbedPresetResponse:
        r"""Add an embed preset to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoEmbedPresetRequest, base_url, '/videos/{video_id}/presets/{preset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoEmbedPresetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_video_custom_logo(self, request: operations.CreateVideoCustomLogoRequest, security: operations.CreateVideoCustomLogoSecurity) -> operations.CreateVideoCustomLogoResponse:
        r"""Add a new custom logo to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateVideoCustomLogoRequest, base_url, '/videos/{video_id}/timelinethumbnails', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVideoCustomLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_embed_preset(self, request: operations.DeleteVideoEmbedPresetRequest, security: operations.DeleteVideoEmbedPresetSecurity) -> operations.DeleteVideoEmbedPresetResponse:
        r"""Remove an embed preset from a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoEmbedPresetRequest, base_url, '/videos/{video_id}/presets/{preset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoEmbedPresetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_embed_preset_videos(self, request: operations.GetEmbedPresetVideosRequest) -> operations.GetEmbedPresetVideosResponse:
        r"""Get all the videos that have been added to an embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmbedPresetVideosRequest, base_url, '/users/{user_id}/presets/{preset_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetEmbedPresetVideosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    def get_embed_preset_videos_alt1(self, request: operations.GetEmbedPresetVideosAlt1Request) -> operations.GetEmbedPresetVideosAlt1Response:
        r"""Get all the videos that have been added to an embed preset"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmbedPresetVideosAlt1Request, base_url, '/me/presets/{preset_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetEmbedPresetVideosAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmbedPresetVideosAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    def get_video_custom_logo(self, request: operations.GetVideoCustomLogoRequest) -> operations.GetVideoCustomLogoResponse:
        r"""Get a custom video logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoCustomLogoRequest, base_url, '/videos/{video_id}/timelinethumbnails/{thumbnail_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoCustomLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_video_embed_preset(self, request: operations.GetVideoEmbedPresetRequest) -> operations.GetVideoEmbedPresetResponse:
        r"""Check if an embed preset has been added to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoEmbedPresetRequest, base_url, '/videos/{video_id}/presets/{preset_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoEmbedPresetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    