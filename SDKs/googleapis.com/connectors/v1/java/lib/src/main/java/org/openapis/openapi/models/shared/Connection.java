/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Connection - Connection represents an instance of connector.
 */
public class Connection {
    /**
     * AuthConfig defines details of a authentication type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authConfig")
    public AuthConfig authConfig;
    public Connection withAuthConfig(AuthConfig authConfig) {
        this.authConfig = authConfig;
        return this;
    }
    
    /**
     * Optional. Configuration for configuring the connection with an external system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configVariables")
    public ConfigVariable[] configVariables;
    public Connection withConfigVariables(ConfigVariable[] configVariables) {
        this.configVariables = configVariables;
        return this;
    }
    
    /**
     * Required. Connector version on which the connection is created. The format is: projects/* /locations/* /providers/* /connectors/* /versions/* Only global location is supported for ConnectorVersion resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorVersion")
    public String connectorVersion;
    public Connection withConnectorVersion(String connectorVersion) {
        this.connectorVersion = connectorVersion;
        return this;
    }
    
    /**
     * Output only. Created time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Connection withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Optional. Description of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Connection withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationConfigs")
    public DestinationConfig[] destinationConfigs;
    public Connection withDestinationConfigs(DestinationConfig[] destinationConfigs) {
        this.destinationConfigs = destinationConfigs;
        return this;
    }
    
    /**
     * Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envoyImageLocation")
    public String envoyImageLocation;
    public Connection withEnvoyImageLocation(String envoyImageLocation) {
        this.envoyImageLocation = envoyImageLocation;
        return this;
    }
    
    /**
     * Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageLocation")
    public String imageLocation;
    public Connection withImageLocation(String imageLocation) {
        this.imageLocation = imageLocation;
        return this;
    }
    
    /**
     * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Connection withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockConfig")
    public LockConfig lockConfig;
    public Connection withLockConfig(LockConfig lockConfig) {
        this.lockConfig = lockConfig;
        return this;
    }
    
    /**
     * Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Connection withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Node configuration for the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeConfig")
    public NodeConfig nodeConfig;
    public Connection withNodeConfig(NodeConfig nodeConfig) {
        this.nodeConfig = nodeConfig;
        return this;
    }
    
    /**
     * Optional. Service account needed for runtime plane to access GCP resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;
    public Connection withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceDirectory")
    public String serviceDirectory;
    public Connection withServiceDirectory(String serviceDirectory) {
        this.serviceDirectory = serviceDirectory;
        return this;
    }
    
    /**
     * SSL Configuration of a connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslConfig")
    public SslConfig sslConfig;
    public Connection withSslConfig(SslConfig sslConfig) {
        this.sslConfig = sslConfig;
        return this;
    }
    
    /**
     * ConnectionStatus indicates the state of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectionStatus status;
    public Connection withStatus(ConnectionStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Optional. Suspended indicates if a user has suspended a connection or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspended")
    public Boolean suspended;
    public Connection withSuspended(Boolean suspended) {
        this.suspended = suspended;
        return this;
    }
    
    /**
     * Output only. Updated time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Connection withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
