// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateParameterPathParams struct {
	// Id of the parameter to manage
	ParameterID string `pathParam:"style=simple,explode=false,name=parameterId"`
}

type UpdateParameterRequest struct {
	PathParams UpdateParameterPathParams
}

// UpdateParameter200ApplicationJSONActionEnum - The id of the action
type UpdateParameter200ApplicationJSONActionEnum string

const (
	UpdateParameter200ApplicationJSONActionEnumUpdateParameter UpdateParameter200ApplicationJSONActionEnum = "updateParameter"
)

func (e *UpdateParameter200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateParameter":
		*e = UpdateParameter200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParameter200ApplicationJSONActionEnum: %s", s)
	}
}

// UpdateParameter200ApplicationJSONData - Parameters
type UpdateParameter200ApplicationJSONData struct {
	Parameters []shared.Parameter `json:"parameters"`
}

// UpdateParameter200ApplicationJSONResultEnum - Result of the request
type UpdateParameter200ApplicationJSONResultEnum string

const (
	UpdateParameter200ApplicationJSONResultEnumSuccess UpdateParameter200ApplicationJSONResultEnum = "success"
	UpdateParameter200ApplicationJSONResultEnumError   UpdateParameter200ApplicationJSONResultEnum = "error"
)

func (e *UpdateParameter200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateParameter200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParameter200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateParameter200ApplicationJSON - Settings
type UpdateParameter200ApplicationJSON struct {
	// The id of the action
	Action UpdateParameter200ApplicationJSONActionEnum `json:"action"`
	// Parameters
	Data UpdateParameter200ApplicationJSONData `json:"data"`
	// Id of the parameter
	ID string `json:"id"`
	// Result of the request
	Result UpdateParameter200ApplicationJSONResultEnum `json:"result"`
}

type UpdateParameterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	UpdateParameter200ApplicationJSONObject *UpdateParameter200ApplicationJSON
}
