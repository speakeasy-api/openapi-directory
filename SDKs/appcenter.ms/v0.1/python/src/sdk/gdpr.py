"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Gdpr:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def data_subject_right_cancel_delete_request(self, request: operations.DataSubjectRightCancelDeleteRequestRequest, security: operations.DataSubjectRightCancelDeleteRequestSecurity) -> operations.DataSubjectRightCancelDeleteRequestResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataSubjectRightCancelDeleteRequestRequest, base_url, '/v0.1/user/dsr/delete/{token}/cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightCancelDeleteRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelDeleteRequest202ApplicationJSON])
                res.data_subject_right_cancel_delete_request_202_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelDeleteRequest503ApplicationJSON])
                res.data_subject_right_cancel_delete_request_503_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelDeleteRequestDefaultApplicationJSON])
                res.data_subject_right_cancel_delete_request_default_application_json_object = out

        return res

    def data_subject_right_cancel_export_request(self, request: operations.DataSubjectRightCancelExportRequestRequest, security: operations.DataSubjectRightCancelExportRequestSecurity) -> operations.DataSubjectRightCancelExportRequestResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataSubjectRightCancelExportRequestRequest, base_url, '/v0.1/user/dsr/export/{token}/cancel', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightCancelExportRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelExportRequest202ApplicationJSON])
                res.data_subject_right_cancel_export_request_202_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelExportRequest503ApplicationJSON])
                res.data_subject_right_cancel_export_request_503_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightCancelExportRequestDefaultApplicationJSON])
                res.data_subject_right_cancel_export_request_default_application_json_object = out

        return res

    def data_subject_right_delete_request(self) -> operations.DataSubjectRightDeleteRequestResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/user/dsr/delete'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightDeleteRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightDeleteRequest202ApplicationJSON])
                res.data_subject_right_delete_request_202_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightDeleteRequestDefaultApplicationJSON])
                res.data_subject_right_delete_request_default_application_json_object = out

        return res

    def data_subject_right_delete_status_request(self, request: operations.DataSubjectRightDeleteStatusRequestRequest, security: operations.DataSubjectRightDeleteStatusRequestSecurity) -> operations.DataSubjectRightDeleteStatusRequestResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataSubjectRightDeleteStatusRequestRequest, base_url, '/v0.1/user/dsr/delete/{token}', request)
        
        query_params = utils.get_query_params(operations.DataSubjectRightDeleteStatusRequestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightDeleteStatusRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightDeleteStatusRequest200ApplicationJSON])
                res.data_subject_right_delete_status_request_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightDeleteStatusRequestDefaultApplicationJSON])
                res.data_subject_right_delete_status_request_default_application_json_object = out

        return res

    def data_subject_right_export_request(self) -> operations.DataSubjectRightExportRequestResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/user/dsr/export'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightExportRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightExportRequest202ApplicationJSON])
                res.data_subject_right_export_request_202_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightExportRequestDefaultApplicationJSON])
                res.data_subject_right_export_request_default_application_json_object = out

        return res

    def data_subject_right_export_status_request(self, request: operations.DataSubjectRightExportStatusRequestRequest, security: operations.DataSubjectRightExportStatusRequestSecurity) -> operations.DataSubjectRightExportStatusRequestResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataSubjectRightExportStatusRequestRequest, base_url, '/v0.1/user/dsr/export/{token}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataSubjectRightExportStatusRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightExportStatusRequest200ApplicationJSON])
                res.data_subject_right_export_status_request_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DataSubjectRightExportStatusRequestDefaultApplicationJSON])
                res.data_subject_right_export_status_request_default_application_json_object = out

        return res

    