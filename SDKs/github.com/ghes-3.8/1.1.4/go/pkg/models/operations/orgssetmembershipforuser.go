// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// OrgsSetMembershipForUserRequestBodyRoleEnum - The role to give the user in the organization. Can be one of:
//   - `admin` - The user will become an owner of the organization.
//   - `member` - The user will become a non-owner member of the organization.
type OrgsSetMembershipForUserRequestBodyRoleEnum string

const (
	OrgsSetMembershipForUserRequestBodyRoleEnumAdmin  OrgsSetMembershipForUserRequestBodyRoleEnum = "admin"
	OrgsSetMembershipForUserRequestBodyRoleEnumMember OrgsSetMembershipForUserRequestBodyRoleEnum = "member"
)

func (e OrgsSetMembershipForUserRequestBodyRoleEnum) ToPointer() *OrgsSetMembershipForUserRequestBodyRoleEnum {
	return &e
}

func (e *OrgsSetMembershipForUserRequestBodyRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "member":
		*e = OrgsSetMembershipForUserRequestBodyRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsSetMembershipForUserRequestBodyRoleEnum: %v", v)
	}
}

type OrgsSetMembershipForUserRequestBody struct {
	// The role to give the user in the organization. Can be one of:
	//  * `admin` - The user will become an owner of the organization.
	//  * `member` - The user will become a non-owner member of the organization.
	Role *OrgsSetMembershipForUserRequestBodyRoleEnum `json:"role,omitempty"`
}

type OrgsSetMembershipForUserRequest struct {
	RequestBody *OrgsSetMembershipForUserRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The handle for the GitHub user account.
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type OrgsSetMembershipForUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	OrgMembership *shared.OrgMembership
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
