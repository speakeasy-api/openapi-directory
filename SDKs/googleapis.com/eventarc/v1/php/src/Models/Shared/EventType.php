<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * EventType - A representation of the event type resource.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class EventType
{
    /**
     * Output only. Human friendly description of what the event type is about. For example "Bucket created in Cloud Storage".
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Output only. URI for the event schema. For example "https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto"
     * 
     * @var ?string $eventSchemaUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventSchemaUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventSchemaUri = null;
    
    /**
     * Output only. Filtering attributes for the event type.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\FilteringAttribute> $filteringAttributes
     */
	#[\JMS\Serializer\Annotation\SerializedName('filteringAttributes')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\FilteringAttribute>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filteringAttributes = null;
    
    /**
     * Output only. The full name of the event type (for example, "google.cloud.storage.object.v1.finalized"). In the form of {provider-specific-prefix}.{resource}.{version}.{verb}. Types MUST be versioned and event schemas are guaranteed to remain backward compatible within one version. Note that event type versions and API versions do not need to match.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->description = null;
		$this->eventSchemaUri = null;
		$this->filteringAttributes = null;
		$this->type = null;
	}
}
