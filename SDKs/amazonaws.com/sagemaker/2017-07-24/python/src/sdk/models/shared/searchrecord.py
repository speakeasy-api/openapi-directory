"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import endpoint as shared_endpoint
from ..shared import experiment as shared_experiment
from ..shared import featuregroup as shared_featuregroup
from ..shared import featuremetadata as shared_featuremetadata
from ..shared import hyperparametertuningjobsearchentity as shared_hyperparametertuningjobsearchentity
from ..shared import modelcard as shared_modelcard
from ..shared import modeldashboardmodel as shared_modeldashboardmodel
from ..shared import modelpackage as shared_modelpackage
from ..shared import modelpackagegroup as shared_modelpackagegroup
from ..shared import pipeline as shared_pipeline
from ..shared import pipelineexecution as shared_pipelineexecution
from ..shared import project as shared_project
from ..shared import trainingjob as shared_trainingjob
from ..shared import trial as shared_trial
from ..shared import trialcomponent as shared_trialcomponent
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchRecord:
    r"""A single resource returned as part of the <a>Search</a> API response."""
    
    endpoint: Optional[shared_endpoint.Endpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})
    r"""A hosted endpoint for real-time inference."""  
    experiment: Optional[shared_experiment.Experiment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Experiment'), 'exclude': lambda f: f is None }})  
    feature_group: Optional[shared_featuregroup.FeatureGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureGroup'), 'exclude': lambda f: f is None }})
    r"""Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features."""  
    feature_metadata: Optional[shared_featuremetadata.FeatureMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureMetadata'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_job: Optional[shared_hyperparametertuningjobsearchentity.HyperParameterTuningJobSearchEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJob'), 'exclude': lambda f: f is None }})  
    model: Optional[shared_modeldashboardmodel.ModelDashboardModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Model'), 'exclude': lambda f: f is None }})
    r"""A model displayed in the Amazon SageMaker Model Dashboard."""  
    model_card: Optional[shared_modelcard.ModelCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelCard'), 'exclude': lambda f: f is None }})  
    model_package: Optional[shared_modelpackage.ModelPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackage'), 'exclude': lambda f: f is None }})
    r"""A versioned model that can be deployed for SageMaker inference."""  
    model_package_group: Optional[shared_modelpackagegroup.ModelPackageGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageGroup'), 'exclude': lambda f: f is None }})
    r"""A group of versioned models in the model registry."""  
    pipeline: Optional[shared_pipeline.Pipeline] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pipeline'), 'exclude': lambda f: f is None }})
    r"""A SageMaker Model Building Pipeline instance."""  
    pipeline_execution: Optional[shared_pipelineexecution.PipelineExecution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PipelineExecution'), 'exclude': lambda f: f is None }})
    r"""An execution of a pipeline."""  
    project: Optional[shared_project.Project] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Project'), 'exclude': lambda f: f is None }})  
    training_job: Optional[shared_trainingjob.TrainingJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJob'), 'exclude': lambda f: f is None }})  
    trial: Optional[shared_trial.Trial] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Trial'), 'exclude': lambda f: f is None }})  
    trial_component: Optional[shared_trialcomponent.TrialComponent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrialComponent'), 'exclude': lambda f: f is None }})  
    