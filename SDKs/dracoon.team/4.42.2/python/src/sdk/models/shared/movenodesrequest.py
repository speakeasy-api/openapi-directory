"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import movenode as shared_movenode
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MoveNodesRequestResolutionStrategyEnum(str, Enum):
    r"""Node conflict resolution strategy:
    
    * `autorename`
    
    * `overwrite`
    
    * `fail`
    """
    AUTORENAME = 'autorename'
    OVERWRITE = 'overwrite'
    FAIL = 'fail'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveNodesRequest:
    r"""Request model for moving nodes"""
    
    items: Optional[list[shared_movenode.MoveNode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""List of nodes to be moved"""  
    keep_share_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepShareLinks'), 'exclude': lambda f: f is None }})
    r"""Preserve Download Share Links and point them to the new node."""  
    node_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeIds'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.5.0
    
    Node IDs
    
    Please use `items` instead.
    """  
    resolution_strategy: Optional[MoveNodesRequestResolutionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolutionStrategy'), 'exclude': lambda f: f is None }})
    r"""Node conflict resolution strategy:
    
    * `autorename`
    
    * `overwrite`
    
    * `fail`
    """  
    