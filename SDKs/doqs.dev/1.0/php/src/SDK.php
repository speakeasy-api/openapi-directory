<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'https://api.doqs.dev/v1',
	];
  	
	public Templates $templates;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->templates = new Templates(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * Create Template
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTemplateDesignerTemplatesPostResponse
     */
	public function createTemplateDesignerTemplatesPost(
        \OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTemplateDesignerTemplatesPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTemplateDesignerTemplatesPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkDesignerTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkDesignerTemplate', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteResponse
     */
	public function deleteDesignerTemplatesIdDelete(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDesignerTemplatesIdDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkNoneType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkNoneType', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate Pdf
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostResponse
     */
	public function generatePdfDesignerTemplatesIdGeneratePost(
        \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/{id}/generate', \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generatePDFPayload", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GeneratePdfDesignerTemplatesIdGeneratePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generatePdfDesignerTemplatesIdGeneratePost200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Templates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetResponse
     */
	public function listTemplatesDesignerTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkListFillrEntitiesDesignerTemplateDesignerTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Templates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetResponse
     */
	public function listTemplatesDesignerTemplatesIdGet(
        \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/{id}', \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTemplatesDesignerTemplatesIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkDesignerTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkDesignerTemplate', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Preview
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PreviewModel $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PreviewDesignerTemplatesPreviewPostResponse
     */
	public function previewDesignerTemplatesPreviewPost(
        \OpenAPI\OpenAPI\Models\Shared\PreviewModel $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PreviewDesignerTemplatesPreviewPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/preview');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreviewDesignerTemplatesPreviewPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkPreviewResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkPreviewResponse', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutResponse
     */
	public function updateTemplateDesignerTemplatesIdPut(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/designer/templates/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createOrUpdateTemplateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTemplateDesignerTemplatesIdPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseOkDesignerTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseOkDesignerTemplate', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseError', 'json');
            }
        }

        return $response;
    }
}