// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReleasesUpdateDetailsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ReleasesUpdateDetailsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

// ReleasesUpdateDetailsRequestBodyBuild - Contains metadata about the build that produced the release being uploaded
type ReleasesUpdateDetailsRequestBodyBuild struct {
	// The branch name of the build producing the release
	BranchName *string `json:"branch_name,omitempty"`
	// The commit hash of the build producing the release
	CommitHash *string `json:"commit_hash,omitempty"`
	// The commit message of the build producing the release
	CommitMessage *string `json:"commit_message,omitempty"`
}

// ReleasesUpdateDetailsRequestBody - A request containing information for updating details of a release
type ReleasesUpdateDetailsRequestBody struct {
	// Contains metadata about the build that produced the release being uploaded
	Build *ReleasesUpdateDetailsRequestBodyBuild `json:"build,omitempty"`
	// Toggle this release to be enable distribute/download or not.
	Enabled *bool `json:"enabled,omitempty"`
	// Release notes for this release.
	ReleaseNotes *string `json:"release_notes,omitempty"`
}

type ReleasesUpdateDetailsRequest struct {
	PathParams ReleasesUpdateDetailsPathParams
	// The release information.
	Request  ReleasesUpdateDetailsRequestBody `request:"mediaType=application/json"`
	Security ReleasesUpdateDetailsSecurity
}

type ReleasesUpdateDetails404ApplicationJSONCodeEnum string

const (
	ReleasesUpdateDetails404ApplicationJSONCodeEnumBadRequest          ReleasesUpdateDetails404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumConflict            ReleasesUpdateDetails404ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdateDetails404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumNotFound            ReleasesUpdateDetails404ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumInternalServerError ReleasesUpdateDetails404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumUnauthorized        ReleasesUpdateDetails404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdateDetails404ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdateDetails404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesUpdateDetails404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdateDetails404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateDetails404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesUpdateDetails404ApplicationJSON - Release not found
type ReleasesUpdateDetails404ApplicationJSON struct {
	Code    ReleasesUpdateDetails404ApplicationJSONCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

type ReleasesUpdateDetails400ApplicationJSONCodeEnum string

const (
	ReleasesUpdateDetails400ApplicationJSONCodeEnumBadRequest          ReleasesUpdateDetails400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumConflict            ReleasesUpdateDetails400ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdateDetails400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumNotFound            ReleasesUpdateDetails400ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumInternalServerError ReleasesUpdateDetails400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumUnauthorized        ReleasesUpdateDetails400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdateDetails400ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdateDetails400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesUpdateDetails400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdateDetails400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateDetails400ApplicationJSONCodeEnum: %s", s)
	}
}

type ReleasesUpdateDetails400ApplicationJSONDestinations struct {
	// Error Codes:<br>
	// <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
	// <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
	// <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
	// <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
	// <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
	// <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
	// <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
	// <b>store_release_not_available</b>: The release is not available.<br>
	// <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
	//
	Code    *string `json:"code,omitempty"`
	ID      *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// ReleasesUpdateDetails400ApplicationJSON - Failure
type ReleasesUpdateDetails400ApplicationJSON struct {
	Code            ReleasesUpdateDetails400ApplicationJSONCodeEnum       `json:"code"`
	Destinations    []ReleasesUpdateDetails400ApplicationJSONDestinations `json:"destinations,omitempty"`
	MandatoryUpdate *bool                                                 `json:"mandatory_update,omitempty"`
	Message         string                                                `json:"message"`
	ReleaseNotes    *string                                               `json:"release_notes,omitempty"`
}

type ReleasesUpdateDetails200ApplicationJSONDestinations struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ReleasesUpdateDetails200ApplicationJSON - Response for updating a release
type ReleasesUpdateDetails200ApplicationJSON struct {
	Destinations          []ReleasesUpdateDetails200ApplicationJSONDestinations `json:"destinations,omitempty"`
	Enabled               *bool                                                 `json:"enabled,omitempty"`
	MandatoryUpdate       *bool                                                 `json:"mandatory_update,omitempty"`
	ProvisioningStatusURL *string                                               `json:"provisioning_status_url,omitempty"`
	ReleaseNotes          *string                                               `json:"release_notes,omitempty"`
}

type ReleasesUpdateDetailsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesUpdateDetails200ApplicationJSONObject *ReleasesUpdateDetails200ApplicationJSON
	// Failure
	ReleasesUpdateDetails400ApplicationJSONObject *ReleasesUpdateDetails400ApplicationJSON
	// Release not found
	ReleasesUpdateDetails404ApplicationJSONObject *ReleasesUpdateDetails404ApplicationJSON
}
