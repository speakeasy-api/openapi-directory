"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tag:
    r"""Create and list tags and tag sets"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_tags(self, request: operations.GetTagsRequest) -> operations.GetTagsResponse:
        r"""List tags
        Retrieve tags.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tags'
        
        query_params = utils.get_query_params(operations.GetTagsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Tag]])
                res.tags = out

        return res

    def get_tags_id_(self, request: operations.GetTagsIDRequest) -> operations.GetTagsIDResponse:
        r"""Retrieve a single tag by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsIDRequest, base_url, '/tags/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_tagsets(self, request: operations.GetTagsetsRequest) -> operations.GetTagsetsResponse:
        r"""List tag sets
        Retrieve tag sets.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tagsets'
        
        query_params = utils.get_query_params(operations.GetTagsetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagSet]])
                res.tag_sets = out

        return res

    def get_tagsets_id_(self, request: operations.GetTagsetsIDRequest) -> operations.GetTagsetsIDResponse:
        r"""Retrieve a single tag set by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsetsIDRequest, base_url, '/tagsets/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsetsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagSet])
                res.tag_set = out
        elif http_res.status_code == 404:
            pass

        return res

    def post_tags(self, request: shared.TagSubmission) -> operations.PostTagsResponse:
        r"""Create a new tag"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tags'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def post_tagsets(self, request: shared.TagSetSubmission) -> operations.PostTagsetsResponse:
        r"""Create a new tag set"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tagsets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTagsetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagSet])
                res.tag_set = out

        return res

    