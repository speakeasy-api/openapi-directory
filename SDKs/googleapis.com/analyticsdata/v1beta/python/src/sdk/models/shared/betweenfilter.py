"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import numericvalue as shared_numericvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BetweenFilter:
    r"""To express that the result needs to be between two numbers (inclusive)."""
    
    from_value: Optional[shared_numericvalue.NumericValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromValue'), 'exclude': lambda f: f is None }})
    r"""To represent a number."""  
    to_value: Optional[shared_numericvalue.NumericValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toValue'), 'exclude': lambda f: f is None }})
    r"""To represent a number."""  
    