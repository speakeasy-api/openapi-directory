<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CreateBroker creates a Broker.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateResponse
     */
	public function servicebrokerProjectsBrokersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/brokers', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudServicebrokerV1beta1Broker", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists all the bindings in the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListResponse
     */
	public function servicebrokerProjectsBrokersInstancesBindingsList(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/bindings', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesBindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists all the instances in the brokers
     * This API is an extension and not part of the OSB spec.
     * Hence the path is a standard Google API URL.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListResponse
     */
	public function servicebrokerProjectsBrokersInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * ListBrokers lists brokers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListResponse
     */
	public function servicebrokerProjectsBrokersList(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/brokers', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists all the Services registered with this broker for consumption for
     * given service registry broker, which contains an set of services.
     * Note, that Service producer API is separate from Broker API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListResponse
     */
	public function servicebrokerProjectsBrokersV2CatalogList(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/v2/catalog', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2CatalogListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Provisions a service instance.
     * If `request.accepts_incomplete` is false and Broker cannot execute request
     * synchronously HTTP 422 error will be returned along with
     * FAILED_PRECONDITION status.
     * If `request.accepts_incomplete` is true and the Broker decides to execute
     * resource asynchronously then HTTP 202 response code will be returned and a
     * valid polling operation in the response will be included.
     * If Broker executes the request synchronously and it succeeds HTTP 201
     * response will be furnished.
     * If identical instance exists, then HTTP 200 response will be returned.
     * If an instance with identical ID but mismatching parameters exists, then
     * HTTP 409 status code will be returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/v2/service_instances/{instance_id}', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudServicebrokerV1beta1ServiceInstance", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing service instance.
     * See CreateServiceInstance for possible response codes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudServicebrokerV1beta1ServiceInstance", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * CreateBinding generates a service binding to an existing service instance.
     * See ProviServiceInstance for async operation details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/service_bindings/{binding_id}', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudServicebrokerV1beta1Binding", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unbinds from a service instance.
     * For synchronous/asynchronous request details see CreateServiceInstance
     * method.
     * If binding does not exist HTTP 410 status will be returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * GetBinding returns the binding information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGet(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the state of the last operation for the binding.
     * Only last (or current) operation can be polled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationResponse
     */
	public function servicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperation(
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/last_operation', \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServicebrokerProjectsBrokersV2ServiceInstancesServiceBindingsGetLastOperationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}