"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bt:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def assign_token(self, request: operations.AssignTokenRequest, security: operations.AssignTokenSecurity) -> operations.AssignTokenResponse:
        r"""Assigns an UserToken to a profile on the ITV side. Currently throws an exception."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bt/token/assign'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_assign_bt_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.AssignTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 401]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def check_ee_bt_eligibility(self, request: operations.CheckEeBtEligibilityRequest, security: operations.CheckEeBtEligibilitySecurity) -> operations.CheckEeBtEligibilityResponse:
        r"""Check whether or not a user is eligible for switching to Bt or EE offers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ee-bt/eligibility'
        
        query_params = utils.get_query_params(operations.CheckEeBtEligibilityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckEeBtEligibilityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EeBtEligibility])
                res.ee_bt_eligibility = out
        elif http_res.status_code == 406:
            pass

        return res

    def check_user_token(self, request: operations.CheckUserTokenRequest) -> operations.CheckUserTokenResponse:
        r"""Checks a provided token for BT eligible user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bt/token/validate'
        
        query_params = utils.get_query_params(operations.CheckUserTokenRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckUserTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_plan_by_token(self, request: operations.GetPlanByTokenRequest) -> operations.GetPlanByTokenResponse:
        r"""Returns all the plans available for BT flow including additional description data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlanByTokenRequest, base_url, '/bt/plan/{token}', request)
        
        query_params = utils.get_query_params(operations.GetPlanByTokenRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlanByTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BtPlanListItem])
                res.bt_plan_list_item = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_plans(self, request: operations.GetPlansRequest) -> operations.GetPlansResponse:
        r"""Returns all the plans available for BT flow including additional description data."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bt/plans'
        
        query_params = utils.get_query_params(operations.GetPlansRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BtPlans])
                res.bt_plans = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    