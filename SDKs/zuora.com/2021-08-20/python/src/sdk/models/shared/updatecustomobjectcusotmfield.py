"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customobjectcustomfielddefinitionupdate as shared_customobjectcustomfielddefinitionupdate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateCustomObjectCusotmField:
    r"""A reference to a field."""
    
    definition: Optional[shared_customobjectcustomfielddefinitionupdate.CustomObjectCustomFieldDefinitionUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""The custom field definition in the custom object"""  
    filterable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the field is filterable or not. Applicable to `addField` and `updateField` actions.
    
    You can change a filterable field to non-filterable and vice versa. You can also add a filterable field. One custom object can have a maximum of 10 filterable fields.
    
    Note that changing filterable fields triggers reindexing. It will take 12-24 hours before all your data are reindexed and available to query.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the custom field to be updated"""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the field is required or optional.
    
    You can update a required field to optional. On the other hand, you can only update an optional field to required on the custom object with no records.
    
    You can only add a required field to the custom object with no records.
    """  
    target_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetName'), 'exclude': lambda f: f is None }})
    r"""Required if the `type` of the action is `renameField`"""  
    