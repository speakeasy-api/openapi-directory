"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KKid = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * KKid API Functions
 *
 * @see {@link https://github.com/kumpeapps/kkid}
 */
var KKid = /** @class */ (function () {
    function KKid(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * returns allowance balance and allowance transactions
     *
     * @remarks
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user.
     *
     */
    KKid.prototype.kkidAllowanceGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidAllowanceGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/allowance";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidAllowanceGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidAllowanceGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.allowance = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Allowance);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * adds new allowance transaction to kidUserID
     *
     * @remarks
     * By passing in the appropriate options, you can add an allowance transaction to a given user.
     *
     */
    KKid.prototype.kkidAllowancePost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidAllowancePostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/allowance";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidAllowancePostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidAllowancePostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * subscribes/unsubscribes/registers for apns push notifications
     */
    KKid.prototype.kkidApnsPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidApnsPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/apns";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidApnsPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidApnsPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * deletes chore for given chore id
     *
     * @remarks
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user's master account
     *
     */
    KKid.prototype.kkidChorelistDelete = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidChorelistDeleteRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidChorelistDeleteSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidChorelistDeleteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
                case [202, 400, 401, 403, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * returns list of chores for given user
     *
     * @remarks
     * By passing in the appropriate options, you can search for
     * chores assigned to a given user within the authenticated user's master account
     *
     */
    KKid.prototype.kkidChorelistGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidChorelistGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidChorelistGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidChorelistGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.chorelist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Chorelist);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * adds chore for given user
     *
     * @remarks
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user's master account
     *
     */
    KKid.prototype.kkidChorelistPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidChorelistPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidChorelistPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidChorelistPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
                case [202, 400, 401, 403, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * updates chore for given chore id
     *
     * @remarks
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user's master account
     *
     */
    KKid.prototype.kkidChorelistPut = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidChorelistPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidChorelistPutSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidChorelistPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 206:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * adds new master user account
     *
     * @remarks
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY)
     *
     */
    KKid.prototype.kkidMasteruserPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidMasteruserPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/masteruser";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidMasteruserPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidMasteruserPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.addUserResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AddUserResponse);
                    }
                    break;
                case [202, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create Share Link
     *
     * @remarks
     * Create share link
     */
    KKid.prototype.kkidShareGet = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidShareGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/share";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidShareGetSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidShareGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.twoHundredAndOneShare = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TwoHundredAndOneShare);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets user info
     *
     * @remarks
     * Gets user info for authenticated user
     */
    KKid.prototype.kkidUserGet = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidUserGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/user";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidUserGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userlist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Userlist);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * deletes user
     *
     * @remarks
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY)
     *
     */
    KKid.prototype.kkidUserlistDelete = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidUserlistDeleteRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/userlist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidUserlistDeleteSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidUserlistDeleteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [200, 202, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * returns list of users
     *
     * @remarks
     * By passing in the appropriate options, you can search for
     * users within the authenticated user's master account
     *
     */
    KKid.prototype.kkidUserlistGet = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidUserlistGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/userlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidUserlistGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userlist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Userlist);
                    }
                    break;
                case [202, 400, 401, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nodata = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Nodata);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * adds new child user
     *
     * @remarks
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access.
     *
     */
    KKid.prototype.kkidUserlistPost = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidUserlistPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/userlist";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.KkidUserlistPostSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidUserlistPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.addUserResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AddUserResponse);
                    }
                    break;
                case [202, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * updates user
     *
     * @remarks
     * By passing in the appropriate variables this method updates the user's profile
     *
     */
    KKid.prototype.kkidUserlistPut = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidUserlistPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/userlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidUserlistPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.addUserResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AddUserResponse);
                    }
                    break;
                case [202, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndFive = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndFive);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 412:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.fourHundredAndTwelve = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FourHundredAndTwelve);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete item from wishlist
     */
    KKid.prototype.kkidWishlistDelete = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidWishlistDeleteRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/wishlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidWishlistDeleteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get list of wishlist items
     */
    KKid.prototype.kkidWishlistGet = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidWishlistGetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/wishlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidWishlistGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.wishlist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Wishlist);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Add item to kid's wishlist
     */
    KKid.prototype.kkidWishlistPost = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidWishlistPostRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/wishlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidWishlistPostResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update item on kid's wishlist
     */
    KKid.prototype.kkidWishlistPut = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.KkidWishlistPutRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/kkid/wishlist";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.KkidWishlistPutResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.success = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Success);
                    }
                    break;
            }
            return res;
        });
    };
    return KKid;
}());
exports.KKid = KKid;
