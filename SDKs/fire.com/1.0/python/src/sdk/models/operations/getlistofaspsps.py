"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetListOfAspspsRequest:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'currency', 'style': 'form', 'explode': True }})
    r"""The three letter code for the currency - either `EUR` or `GBP`. Use this to filter the list for banks that can be used to pay in a certain currency."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfAspspsAspspsAspspCountry:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The 2-letter code for the country - e.g. `IE`, `GP`..."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the country"""  
    
class GetListOfAspspsAspspsAspspCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfAspspsAspspsAspspCurrency:
    r"""The currency."""
    
    code: Optional[GetListOfAspspsAspspsAspspCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfAspspsAspspsAspsp:
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""The name of the ASPSP / bank."""  
    aspsp_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspspUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID associated with the ASPSP / bank."""  
    country: Optional[GetListOfAspspsAspspsAspspCountry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})  
    currency: Optional[GetListOfAspspsAspspsAspspCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the ASPSP / bank was created."""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the ASPSP / bank was last updated."""  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoUrl'), 'exclude': lambda f: f is None }})
    r"""A link to the ASPSP / bank's logo in SVG format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetListOfAspspsAspsps:
    r"""A list of ASPSPs the customers can use to pay a payment."""
    
    aspsps: Optional[list[GetListOfAspspsAspspsAspsp]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspsps'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of ASPSPs in the list."""  
    

@dataclasses.dataclass
class GetListOfAspspsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    aspsps: Optional[GetListOfAspspsAspsps] = dataclasses.field(default=None)
    r"""A list of ASPSPs the customers can use to pay a payment."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    