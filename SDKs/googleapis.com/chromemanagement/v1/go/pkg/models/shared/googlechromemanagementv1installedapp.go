// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleChromeManagementV1InstalledAppAppInstallTypeEnum - Output only. How the app was installed.
type GoogleChromeManagementV1InstalledAppAppInstallTypeEnum string

const (
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumAppInstallTypeUnspecified GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "APP_INSTALL_TYPE_UNSPECIFIED"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumMultiple                  GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "MULTIPLE"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumNormal                    GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "NORMAL"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumAdmin                     GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "ADMIN"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumDevelopment               GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "DEVELOPMENT"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumSideload                  GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "SIDELOAD"
	GoogleChromeManagementV1InstalledAppAppInstallTypeEnumOther                     GoogleChromeManagementV1InstalledAppAppInstallTypeEnum = "OTHER"
)

func (e GoogleChromeManagementV1InstalledAppAppInstallTypeEnum) ToPointer() *GoogleChromeManagementV1InstalledAppAppInstallTypeEnum {
	return &e
}

func (e *GoogleChromeManagementV1InstalledAppAppInstallTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_INSTALL_TYPE_UNSPECIFIED":
		fallthrough
	case "MULTIPLE":
		fallthrough
	case "NORMAL":
		fallthrough
	case "ADMIN":
		fallthrough
	case "DEVELOPMENT":
		fallthrough
	case "SIDELOAD":
		fallthrough
	case "OTHER":
		*e = GoogleChromeManagementV1InstalledAppAppInstallTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1InstalledAppAppInstallTypeEnum: %v", v)
	}
}

// GoogleChromeManagementV1InstalledAppAppSourceEnum - Output only. Source of the installed app.
type GoogleChromeManagementV1InstalledAppAppSourceEnum string

const (
	GoogleChromeManagementV1InstalledAppAppSourceEnumAppSourceUnspecified GoogleChromeManagementV1InstalledAppAppSourceEnum = "APP_SOURCE_UNSPECIFIED"
	GoogleChromeManagementV1InstalledAppAppSourceEnumChromeWebstore       GoogleChromeManagementV1InstalledAppAppSourceEnum = "CHROME_WEBSTORE"
	GoogleChromeManagementV1InstalledAppAppSourceEnumPlayStore            GoogleChromeManagementV1InstalledAppAppSourceEnum = "PLAY_STORE"
)

func (e GoogleChromeManagementV1InstalledAppAppSourceEnum) ToPointer() *GoogleChromeManagementV1InstalledAppAppSourceEnum {
	return &e
}

func (e *GoogleChromeManagementV1InstalledAppAppSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_SOURCE_UNSPECIFIED":
		fallthrough
	case "CHROME_WEBSTORE":
		fallthrough
	case "PLAY_STORE":
		*e = GoogleChromeManagementV1InstalledAppAppSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1InstalledAppAppSourceEnum: %v", v)
	}
}

// GoogleChromeManagementV1InstalledAppAppTypeEnum - Output only. Type of the app.
type GoogleChromeManagementV1InstalledAppAppTypeEnum string

const (
	GoogleChromeManagementV1InstalledAppAppTypeEnumAppTypeUnspecified GoogleChromeManagementV1InstalledAppAppTypeEnum = "APP_TYPE_UNSPECIFIED"
	GoogleChromeManagementV1InstalledAppAppTypeEnumExtension          GoogleChromeManagementV1InstalledAppAppTypeEnum = "EXTENSION"
	GoogleChromeManagementV1InstalledAppAppTypeEnumApp                GoogleChromeManagementV1InstalledAppAppTypeEnum = "APP"
	GoogleChromeManagementV1InstalledAppAppTypeEnumTheme              GoogleChromeManagementV1InstalledAppAppTypeEnum = "THEME"
	GoogleChromeManagementV1InstalledAppAppTypeEnumHostedApp          GoogleChromeManagementV1InstalledAppAppTypeEnum = "HOSTED_APP"
	GoogleChromeManagementV1InstalledAppAppTypeEnumAndroidApp         GoogleChromeManagementV1InstalledAppAppTypeEnum = "ANDROID_APP"
)

func (e GoogleChromeManagementV1InstalledAppAppTypeEnum) ToPointer() *GoogleChromeManagementV1InstalledAppAppTypeEnum {
	return &e
}

func (e *GoogleChromeManagementV1InstalledAppAppTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_TYPE_UNSPECIFIED":
		fallthrough
	case "EXTENSION":
		fallthrough
	case "APP":
		fallthrough
	case "THEME":
		fallthrough
	case "HOSTED_APP":
		fallthrough
	case "ANDROID_APP":
		*e = GoogleChromeManagementV1InstalledAppAppTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1InstalledAppAppTypeEnum: %v", v)
	}
}

// GoogleChromeManagementV1InstalledApp - Describes an installed app.
type GoogleChromeManagementV1InstalledApp struct {
	// Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).
	AppID *string `json:"appId,omitempty"`
	// Output only. How the app was installed.
	AppInstallType *GoogleChromeManagementV1InstalledAppAppInstallTypeEnum `json:"appInstallType,omitempty"`
	// Output only. Source of the installed app.
	AppSource *GoogleChromeManagementV1InstalledAppAppSourceEnum `json:"appSource,omitempty"`
	// Output only. Type of the app.
	AppType *GoogleChromeManagementV1InstalledAppAppTypeEnum `json:"appType,omitempty"`
	// Output only. Count of browser devices with this app installed.
	BrowserDeviceCount *string `json:"browserDeviceCount,omitempty"`
	// Output only. Description of the installed app.
	Description *string `json:"description,omitempty"`
	// Output only. Whether the app is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Output only. Name of the installed app.
	DisplayName *string `json:"displayName,omitempty"`
	// Output only. Homepage uri of the installed app.
	HomepageURI *string `json:"homepageUri,omitempty"`
	// Output only. Count of ChromeOS users with this app installed.
	OsUserCount *string `json:"osUserCount,omitempty"`
	// Output only. Permissions of the installed app.
	Permissions []string `json:"permissions,omitempty"`
}
