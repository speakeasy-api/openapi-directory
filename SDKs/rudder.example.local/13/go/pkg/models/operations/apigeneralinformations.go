// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// APIGeneralInformations200ApplicationJSONActionEnum - The id of the action
type APIGeneralInformations200ApplicationJSONActionEnum string

const (
	APIGeneralInformations200ApplicationJSONActionEnumAPIGeneralInformations APIGeneralInformations200ApplicationJSONActionEnum = "apiGeneralInformations"
)

func (e *APIGeneralInformations200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "apiGeneralInformations":
		*e = APIGeneralInformations200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIGeneralInformations200ApplicationJSONActionEnum: %s", s)
	}
}

type APIGeneralInformations200ApplicationJSONData struct {
	AvailableVersions []shared.APIVersions `json:"availableVersions"`
	// Link to Rudder API description
	Documentation string                  `json:"documentation"`
	Endpoints     [][]shared.APIEndpoints `json:"endpoints"`
}

// APIGeneralInformations200ApplicationJSONResultEnum - Result of the request
type APIGeneralInformations200ApplicationJSONResultEnum string

const (
	APIGeneralInformations200ApplicationJSONResultEnumSuccess APIGeneralInformations200ApplicationJSONResultEnum = "success"
	APIGeneralInformations200ApplicationJSONResultEnumError   APIGeneralInformations200ApplicationJSONResultEnum = "error"
)

func (e *APIGeneralInformations200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = APIGeneralInformations200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIGeneralInformations200ApplicationJSONResultEnum: %s", s)
	}
}

// APIGeneralInformations200ApplicationJSON - API endpoints
type APIGeneralInformations200ApplicationJSON struct {
	// The id of the action
	Action APIGeneralInformations200ApplicationJSONActionEnum `json:"action"`
	Data   APIGeneralInformations200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result APIGeneralInformations200ApplicationJSONResultEnum `json:"result"`
}

type APIGeneralInformationsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// API endpoints
	APIGeneralInformations200ApplicationJSONObject *APIGeneralInformations200ApplicationJSON
}
