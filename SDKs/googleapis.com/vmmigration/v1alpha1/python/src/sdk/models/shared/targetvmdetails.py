"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appliedlicense as shared_appliedlicense
from ..shared import computescheduling as shared_computescheduling
from ..shared import networkinterface as shared_networkinterface
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TargetVMDetailsBootOptionEnum(str, Enum):
    r"""Output only. The VM Boot Option, as set in the source vm."""
    BOOT_OPTION_UNSPECIFIED = 'BOOT_OPTION_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'

class TargetVMDetailsDiskTypeEnum(str, Enum):
    r"""The disk type to use in the VM."""
    DISK_TYPE_UNSPECIFIED = 'DISK_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    BALANCED = 'BALANCED'
    SSD = 'SSD'

class TargetVMDetailsLicenseTypeEnum(str, Enum):
    r"""The license type to use in OS adaptation."""
    DEFAULT = 'DEFAULT'
    PAYG = 'PAYG'
    BYOL = 'BYOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetVMDetails:
    r"""TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project."""
    
    applied_license: Optional[shared_appliedlicense.AppliedLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedLicense'), 'exclude': lambda f: f is None }})
    r"""AppliedLicense holds the license data returned by adaptation module report."""  
    boot_option: Optional[TargetVMDetailsBootOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootOption'), 'exclude': lambda f: f is None }})
    r"""Output only. The VM Boot Option, as set in the source vm."""  
    compute_scheduling: Optional[shared_computescheduling.ComputeScheduling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeScheduling'), 'exclude': lambda f: f is None }})
    r"""Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes."""  
    disk_type: Optional[TargetVMDetailsDiskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskType'), 'exclude': lambda f: f is None }})
    r"""The disk type to use in the VM."""  
    external_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalIp'), 'exclude': lambda f: f is None }})
    r"""The external IP to define in the VM."""  
    internal_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalIp'), 'exclude': lambda f: f is None }})
    r"""The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A map of labels to associate with the VM."""  
    license_type: Optional[TargetVMDetailsLicenseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})
    r"""The license type to use in OS adaptation."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""The machine type to create the VM with."""  
    machine_type_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineTypeSeries'), 'exclude': lambda f: f is None }})
    r"""The machine type series to create the VM with."""  
    metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata key/value pairs to assign to the VM."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the VM to create."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""The network to connect the VM to."""  
    network_interfaces: Optional[list[shared_networkinterface.NetworkInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaces'), 'exclude': lambda f: f is None }})
    r"""List of NICs connected to this VM."""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""A map of network tags to associate with the VM."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""Output only. The project in which to create the VM."""  
    secure_boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureBoot'), 'exclude': lambda f: f is None }})
    r"""Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""The service account to associate the VM with."""  
    subnetwork: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetwork'), 'exclude': lambda f: f is None }})
    r"""The subnetwork to connect the VM to."""  
    target_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetProject'), 'exclude': lambda f: f is None }})
    r"""The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM."""  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone'), 'exclude': lambda f: f is None }})
    r"""The zone in which to create the VM."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetVMDetailsInput:
    r"""TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project."""
    
    applied_license: Optional[shared_appliedlicense.AppliedLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedLicense'), 'exclude': lambda f: f is None }})
    r"""AppliedLicense holds the license data returned by adaptation module report."""  
    compute_scheduling: Optional[shared_computescheduling.ComputeScheduling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeScheduling'), 'exclude': lambda f: f is None }})
    r"""Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes."""  
    disk_type: Optional[TargetVMDetailsDiskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskType'), 'exclude': lambda f: f is None }})
    r"""The disk type to use in the VM."""  
    external_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalIp'), 'exclude': lambda f: f is None }})
    r"""The external IP to define in the VM."""  
    internal_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalIp'), 'exclude': lambda f: f is None }})
    r"""The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A map of labels to associate with the VM."""  
    license_type: Optional[TargetVMDetailsLicenseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})
    r"""The license type to use in OS adaptation."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""The machine type to create the VM with."""  
    machine_type_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineTypeSeries'), 'exclude': lambda f: f is None }})
    r"""The machine type series to create the VM with."""  
    metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata key/value pairs to assign to the VM."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the VM to create."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""The network to connect the VM to."""  
    network_interfaces: Optional[list[shared_networkinterface.NetworkInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaces'), 'exclude': lambda f: f is None }})
    r"""List of NICs connected to this VM."""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""A map of network tags to associate with the VM."""  
    secure_boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureBoot'), 'exclude': lambda f: f is None }})
    r"""Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""The service account to associate the VM with."""  
    subnetwork: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetwork'), 'exclude': lambda f: f is None }})
    r"""The subnetwork to connect the VM to."""  
    target_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetProject'), 'exclude': lambda f: f is None }})
    r"""The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM."""  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone'), 'exclude': lambda f: f is None }})
    r"""The zone in which to create the VM."""  
    