// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutcomeSummaryEnum - The simplest way to interpret a result. Required
type OutcomeSummaryEnum string

const (
	OutcomeSummaryEnumUnset        OutcomeSummaryEnum = "unset"
	OutcomeSummaryEnumSuccess      OutcomeSummaryEnum = "success"
	OutcomeSummaryEnumFailure      OutcomeSummaryEnum = "failure"
	OutcomeSummaryEnumInconclusive OutcomeSummaryEnum = "inconclusive"
	OutcomeSummaryEnumSkipped      OutcomeSummaryEnum = "skipped"
	OutcomeSummaryEnumFlaky        OutcomeSummaryEnum = "flaky"
)

func (e OutcomeSummaryEnum) ToPointer() *OutcomeSummaryEnum {
	return &e
}

func (e *OutcomeSummaryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unset":
		fallthrough
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "inconclusive":
		fallthrough
	case "skipped":
		fallthrough
	case "flaky":
		*e = OutcomeSummaryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutcomeSummaryEnum: %v", v)
	}
}

// Outcome - Interprets a result so that humans and machines can act on it.
type Outcome struct {
	// Details for an outcome with a FAILURE outcome summary.
	FailureDetail *FailureDetail `json:"failureDetail,omitempty"`
	// Details for an outcome with an INCONCLUSIVE outcome summary.
	InconclusiveDetail *InconclusiveDetail `json:"inconclusiveDetail,omitempty"`
	// Details for an outcome with a SKIPPED outcome summary.
	SkippedDetail *SkippedDetail `json:"skippedDetail,omitempty"`
	// Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
	SuccessDetail *SuccessDetail `json:"successDetail,omitempty"`
	// The simplest way to interpret a result. Required
	Summary *OutcomeSummaryEnum `json:"summary,omitempty"`
}
