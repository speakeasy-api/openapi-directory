"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import offeringuserresponse as shared_offeringuserresponse
from enum import Enum
from typing import Optional

class GetOfferingsOfferingIDUsersFacilitatorsEnum(str, Enum):
    r"""If true, facilitators are included in the results."""
    TRUE = 'true'
    FALSE = 'false'

class GetOfferingsOfferingIDUsersLearnersEnum(str, Enum):
    r"""If true, learners are included in the results."""
    TRUE = 'true'
    FALSE = 'false'

class GetOfferingsOfferingIDUsersMarkersEnum(str, Enum):
    r"""If true, markers are included in the results."""
    TRUE = 'true'
    FALSE = 'false'


@dataclasses.dataclass
class GetOfferingsOfferingIDUsersRequest:
    
    offering_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'offeringId', 'style': 'simple', 'explode': False }})
    r"""offering's id"""  
    facilitators: Optional[GetOfferingsOfferingIDUsersFacilitatorsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facilitators', 'style': 'form', 'explode': True }})
    r"""If true, facilitators are included in the results."""  
    learners: Optional[GetOfferingsOfferingIDUsersLearnersEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'learners', 'style': 'form', 'explode': True }})
    r"""If true, learners are included in the results."""  
    markers: Optional[GetOfferingsOfferingIDUsersMarkersEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'markers', 'style': 'form', 'explode': True }})
    r"""If true, markers are included in the results."""  
    

@dataclasses.dataclass
class GetOfferingsOfferingIDUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Bad Request"""  
    offering_user_responses: Optional[list[shared_offeringuserresponse.OfferingUserResponse]] = dataclasses.field(default=None)
    r"""offering's users"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    