/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetTableObjectsRequestBody {
    /**
     * The catalog containing the governed table. Defaults to the caller\u2019s account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogId")
    public String catalogId;

    public GetTableObjectsRequestBody withCatalogId(String catalogId) {
        this.catalogId = catalogId;
        return this;
    }
    
    /**
     * The database containing the governed table.
     */
    @JsonProperty("DatabaseName")
    public String databaseName;

    public GetTableObjectsRequestBody withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }
    
    /**
     * Specifies how many values to return in a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxResults")
    public Long maxResults;

    public GetTableObjectsRequestBody withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * A continuation token if this is not the first call to retrieve these objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NextToken")
    public String nextToken;

    public GetTableObjectsRequestBody withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * &lt;p&gt;A predicate to filter the objects returned based on the partition keys defined in the governed table.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The comparison operators supported are: =, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The logical operators supported are: AND&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PartitionPredicate")
    public String partitionPredicate;

    public GetTableObjectsRequestBody withPartitionPredicate(String partitionPredicate) {
        this.partitionPredicate = partitionPredicate;
        return this;
    }
    
    /**
     * The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with &lt;code&gt;TransactionId&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("QueryAsOfTime")
    public OffsetDateTime queryAsOfTime;

    public GetTableObjectsRequestBody withQueryAsOfTime(OffsetDateTime queryAsOfTime) {
        this.queryAsOfTime = queryAsOfTime;
        return this;
    }
    
    /**
     * The governed table for which to retrieve objects.
     */
    @JsonProperty("TableName")
    public String tableName;

    public GetTableObjectsRequestBody withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }
    
    /**
     * The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with &lt;code&gt;QueryAsOfTime&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransactionId")
    public String transactionId;

    public GetTableObjectsRequestBody withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    public GetTableObjectsRequestBody(@JsonProperty("DatabaseName") String databaseName, @JsonProperty("TableName") String tableName) {
        this.databaseName = databaseName;
        this.tableName = tableName;
  }
}
