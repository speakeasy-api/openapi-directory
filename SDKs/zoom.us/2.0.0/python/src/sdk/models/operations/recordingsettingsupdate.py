"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class RecordingSettingsUpdateSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class RecordingSettingsUpdateRecordingSettingsApprovalTypeEnum(str, Enum):
    r"""Approval type for the registration.<br>
    `0`- Automatically approve the registration when a user registers.<br>
    `1` - Manually approve or deny the registration of a user.<br>
    `2` - No registration required to view the recording.
    """
    ZERO = '0'
    ONE = '1'
    TWO = '2'

class RecordingSettingsUpdateRecordingSettingsShareRecordingEnum(str, Enum):
    r"""Determine how the meeting recording is shared."""
    PUBLICLY = 'publicly'
    INTERNALLY = 'internally'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecordingSettingsUpdateRecordingSettings:
    r"""Meeting recording Settings"""
    
    approval_type: Optional[RecordingSettingsUpdateRecordingSettingsApprovalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval_type'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'approval_type' }})
    r"""Approval type for the registration.<br>
    `0`- Automatically approve the registration when a user registers.<br>
    `1` - Manually approve or deny the registration of a user.<br>
    `2` - No registration required to view the recording.
    """  
    authentication_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_domains'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'authentication_domains' }})
    r"""Authentication domains."""  
    authentication_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_option'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'authentication_option' }})
    r"""Authentication Options."""  
    on_demand: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_demand'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'on_demand' }})
    r"""Determine whether registration  isrequired to view the recording."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'password' }})
    r"""Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.<br><br>
    **Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
    """  
    recording_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_authentication'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'recording_authentication' }})
    r"""Only authenticated users can view."""  
    send_email_to_host: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('send_email_to_host'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'send_email_to_host' }})
    r"""Send an email to host when someone registers to view the recording. This applies for On-demand recordings only."""  
    share_recording: Optional[RecordingSettingsUpdateRecordingSettingsShareRecordingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_recording'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'share_recording' }})
    r"""Determine how the meeting recording is shared."""  
    show_social_share_buttons: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_social_share_buttons'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'show_social_share_buttons' }})
    r"""Show social share buttons on registration page. This applies for On-demand recordings only."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'topic' }})
    r"""Name of the recording."""  
    viewer_download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewer_download'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'viewer_download' }})
    r"""Determine whether a viewer can download the recording file or not."""  
    

@dataclasses.dataclass
class RecordingSettingsUpdateRequest:
    
    meeting_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
    
    To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. 
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
    """  
    request_body: RecordingSettingsUpdateRecordingSettings = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Meeting recording Settings"""  
    

@dataclasses.dataclass
class RecordingSettingsUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    