// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchGroupsSecurity struct {
	APIKey         *shared.SchemeAPIKey         `security:"scheme,type=apiKey,subtype=query"`
	Oauth2Code     *shared.SchemeOauth2Code     `security:"scheme,type=oauth2"`
	Oauth2Implicit *shared.SchemeOauth2Implicit `security:"scheme,type=oauth2"`
}

type SearchGroupsQueryParams struct {
	// Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
	//
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100.
	//
	Distance *float64 `queryParam:"style=form,explode=true,name=distance"`
	// Find groups near the given latitude and longitude.
	Latitude *float64 `queryParam:"style=form,explode=true,name=latitude"`
	// Find groups near the given latitude and longitude.
	Longitude *float64 `queryParam:"style=form,explode=true,name=longitude"`
	// Find groups that have the given text somewhere in their name (case insensitive).
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The page of groups to return.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of groups to return per page (must be >= 1 and <= 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority.
	//
	PostalCode *string `queryParam:"style=form,explode=true,name=postal_code"`
	// For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv
	//
	Region *string `queryParam:"style=form,explode=true,name=region"`
}

type SearchGroupsRequest struct {
	QueryParams SearchGroupsQueryParams
	Security    SearchGroupsSecurity
}

// SearchGroups200ApplicationJSON - The groups and paging data.
type SearchGroups200ApplicationJSON struct {
	// The index of the last group being returned (an integer between start_index and num_groups).
	EndIndex *int64         `json:"end_index,omitempty"`
	Groups   []shared.Group `json:"groups,omitempty"`
	// The total number of groups available.
	NumGroups *int64 `json:"num_groups,omitempty"`
	// The total number of pages available.
	NumPages *int64 `json:"num_pages,omitempty"`
	// The page number of the groups being returned.
	Page *int64 `json:"page,omitempty"`
	// The number of groups being returned per page.
	PerPage *int64 `json:"per_page,omitempty"`
	// The index of the first group being returned (an integer between 1 and num_groups).
	StartIndex *int64 `json:"start_index,omitempty"`
}

type SearchGroupsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The groups and paging data.
	SearchGroups200ApplicationJSONObject *SearchGroups200ApplicationJSON
}
