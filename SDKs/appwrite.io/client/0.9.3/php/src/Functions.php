<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Functions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Execution
     * 
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionResponse
     */
	public function functionsCreateExecution(
        \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/functions/{functionId}/executions', \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FunctionsCreateExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->execution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Execution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Execution
     * 
     * Get a function execution log by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionResponse
     */
	public function functionsGetExecution(
        \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/functions/{functionId}/executions/{executionId}', \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FunctionsGetExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->execution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Execution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Executions
     * 
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsResponse
     */
	public function functionsListExecutions(
        \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/functions/{functionId}/executions', \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FunctionsListExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->executionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExecutionList', 'json');
            }
        }

        return $response;
    }
}