"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import expressiontype_enum as shared_expressiontype_enum
from ..shared import inputserialization as shared_inputserialization
from ..shared import outputserialization as shared_outputserialization
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SelectParameters:
    r"""Contains information about the parameters used for a select."""
    
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Expression'), 'exclude': lambda f: f is None }})  
    expression_type: Optional[shared_expressiontype_enum.ExpressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpressionType'), 'exclude': lambda f: f is None }})  
    input_serialization: Optional[shared_inputserialization.InputSerialization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputSerialization'), 'exclude': lambda f: f is None }})  
    output_serialization: Optional[shared_outputserialization.OutputSerialization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputSerialization'), 'exclude': lambda f: f is None }})  
    