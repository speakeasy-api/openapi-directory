// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetJobXAmzTargetEnum
type GetJobXAmzTargetEnum string

const (
	GetJobXAmzTargetEnumDeviceFarm20150623GetJob GetJobXAmzTargetEnum = "DeviceFarm_20150623.GetJob"
)

func (e GetJobXAmzTargetEnum) ToPointer() *GetJobXAmzTargetEnum {
	return &e
}

func (e *GetJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.GetJob":
		*e = GetJobXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetJobXAmzTargetEnum: %v", v)
	}
}

type GetJobRequest struct {
	GetJobRequest     shared.GetJobRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetJobResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// Success
	GetJobResult *shared.GetJobResult
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
