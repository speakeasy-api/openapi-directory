// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// LocationRuleUpdateConditions - Scope of this rule, e.g. moves at or away from a specific location or towards a specific location. The `from_location` is mandatory. The `to_location` is either mandatory, optional or not allowed depending on rule type.
type LocationRuleUpdateConditions struct {
	// Unique identifier for resource.
	FromLocation *string `json:"from_location,omitempty"`
	// Unique identifier for resource.
	ToLocation *string `json:"to_location,omitempty"`
}

// LocationRuleUpdate - A JSON object containing the location rule
type LocationRuleUpdate struct {
	// Scope of this rule, e.g. moves at or away from a specific location or towards a specific location. The `from_location` is mandatory. The `to_location` is either mandatory, optional or not allowed depending on rule type.
	Conditions *LocationRuleUpdateConditions `json:"conditions,omitempty"`
	// Whether this rule should be in effect (`true`) or on hold (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	// A name or a label for this resource. This is used in the user interface, may be empty.
	Label *string `json:"label,omitempty"`
	// Parameters for this rule; depends on the rule type. Refer to the rule type specification for details.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// The type of location rule to be applied.
	// Allow: items at `conditions.from_location` can only move to `conditions.to_location` and locations allowed in other `allow` rules (destination whitelist).
	// Disallow: items at `conditions.from_location` cannot be moved to `conditions.to_location` and locations disallowed in other `disallow` rules (destination blacklist).
	// Disappeared: items disappearing at `conditions.from_location` will be moved to `parameters.location` after `parameters.time_s` seconds.
	// Debounce: items moves from `conditions.from_location` (and optionally to `conditions.to_location`) will be debounced with a period of `parameters.time_s` seconds, for a maximum of `parameters.max_periods` periods.
	//
	Type *LocationRuleTypeEnum `json:"type,omitempty"`
}
