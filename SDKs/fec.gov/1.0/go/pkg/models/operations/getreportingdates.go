// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetReportingDatesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxCreateDate *types.Date `queryParam:"style=form,explode=true,name=max_create_date"`
	// The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxDueDate *types.Date `queryParam:"style=form,explode=true,name=max_due_date"`
	// The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxUpdateDate *types.Date `queryParam:"style=form,explode=true,name=max_update_date"`
	// The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinCreateDate *types.Date `queryParam:"style=form,explode=true,name=min_create_date"`
	// The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinDueDate *types.Date `queryParam:"style=form,explode=true,name=min_due_date"`
	// The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinUpdateDate *types.Date `queryParam:"style=form,explode=true,name=min_update_date"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType []string `queryParam:"style=form,explode=true,name=report_type"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear []int `queryParam:"style=form,explode=true,name=report_year"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
}

type GetReportingDatesDefaultApplicationJSON struct {
	Pagination *shared.OffsetInfo  `json:"pagination,omitempty"`
	Results    []shared.ReportDate `json:"results,omitempty"`
}

type GetReportingDatesResponse struct {
	ContentType                                   string
	StatusCode                                    int
	RawResponse                                   *http.Response
	GetReportingDatesDefaultApplicationJSONObject *GetReportingDatesDefaultApplicationJSON
}
