// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostServersIDActionsCreateImagePathParams struct {
	// ID of the Server
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostServersIDActionsCreateImageCreateImageRequestLabels - User-defined labels (key-value pairs)
type PostServersIDActionsCreateImageCreateImageRequestLabels struct {
	// New label
	Labelkey *string `json:"labelkey,omitempty"`
}

// PostServersIDActionsCreateImageCreateImageRequestTypeEnum - Type of Image to create (default: `snapshot`)
type PostServersIDActionsCreateImageCreateImageRequestTypeEnum string

const (
	PostServersIDActionsCreateImageCreateImageRequestTypeEnumSnapshot PostServersIDActionsCreateImageCreateImageRequestTypeEnum = "snapshot"
	PostServersIDActionsCreateImageCreateImageRequestTypeEnumBackup   PostServersIDActionsCreateImageCreateImageRequestTypeEnum = "backup"
)

func (e *PostServersIDActionsCreateImageCreateImageRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "snapshot":
		fallthrough
	case "backup":
		*e = PostServersIDActionsCreateImageCreateImageRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsCreateImageCreateImageRequestTypeEnum: %s", s)
	}
}

type PostServersIDActionsCreateImageCreateImageRequest struct {
	// Description of the Image, will be auto-generated if not set
	Description *string `json:"description,omitempty"`
	// User-defined labels (key-value pairs)
	Labels *PostServersIDActionsCreateImageCreateImageRequestLabels `json:"labels,omitempty"`
	// Type of Image to create (default: `snapshot`)
	Type *PostServersIDActionsCreateImageCreateImageRequestTypeEnum `json:"type,omitempty"`
}

type PostServersIDActionsCreateImageRequest struct {
	PathParams PostServersIDActionsCreateImagePathParams
	Request    *PostServersIDActionsCreateImageCreateImageRequest `request:"mediaType=application/json"`
}

// PostServersIDActionsCreateImage201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostServersIDActionsCreateImage201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostServersIDActionsCreateImage201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum - Status of the Action
type PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum string

const (
	PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnumSuccess PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum = "success"
	PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnumRunning PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum = "running"
	PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnumError   PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum = "error"
)

func (e *PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum: %s", s)
	}
}

type PostServersIDActionsCreateImage201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostServersIDActionsCreateImage201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostServersIDActionsCreateImage201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostServersIDActionsCreateImage201ApplicationJSONActionStatusEnum `json:"status"`
}

// PostServersIDActionsCreateImage201ApplicationJSONImageCreatedFrom - Information about the Server the Image was created from
type PostServersIDActionsCreateImage201ApplicationJSONImageCreatedFrom struct {
	// ID of the Server the Image was created from
	ID int64 `json:"id"`
	// Server name at the time the Image was created
	Name string `json:"name"`
}

// PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum - Flavor of operating system contained in the Image
type PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum string

const (
	PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnumUbuntu  PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = "ubuntu"
	PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnumCentos  PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = "centos"
	PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnumDebian  PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = "debian"
	PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnumFedora  PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = "fedora"
	PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnumUnknown PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum = "unknown"
)

func (e *PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ubuntu":
		fallthrough
	case "centos":
		fallthrough
	case "debian":
		fallthrough
	case "fedora":
		fallthrough
	case "unknown":
		*e = PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum: %s", s)
	}
}

// PostServersIDActionsCreateImage201ApplicationJSONImageProtection - Protection configuration for the Resource
type PostServersIDActionsCreateImage201ApplicationJSONImageProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum - Whether the Image can be used or if it's still being created or unavailable
type PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum string

const (
	PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnumAvailable   PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum = "available"
	PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnumCreating    PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum = "creating"
	PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnumUnavailable PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum = "unavailable"
)

func (e *PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "creating":
		fallthrough
	case "unavailable":
		*e = PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum: %s", s)
	}
}

// PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum - Type of the Image
type PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum string

const (
	PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnumSystem    PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = "system"
	PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnumApp       PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = "app"
	PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnumSnapshot  PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = "snapshot"
	PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnumBackup    PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = "backup"
	PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnumTemporary PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum = "temporary"
)

func (e *PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "system":
		fallthrough
	case "app":
		fallthrough
	case "snapshot":
		fallthrough
	case "backup":
		fallthrough
	case "temporary":
		*e = PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum: %s", s)
	}
}

type PostServersIDActionsCreateImage201ApplicationJSONImage struct {
	// ID of Server the Image is bound to. Only set for Images of type `backup`.
	BoundTo int64 `json:"bound_to"`
	// Build ID of the Image
	BuildID *string `json:"build_id,omitempty"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Information about the Server the Image was created from
	CreatedFrom PostServersIDActionsCreateImage201ApplicationJSONImageCreatedFrom `json:"created_from"`
	// Point in time where the Image was deleted (in ISO-8601 format)
	Deleted string `json:"deleted"`
	// Point in time when the Image is considered to be deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Image
	Description string `json:"description"`
	// Size of the disk contained in the Image in GB
	DiskSize float64 `json:"disk_size"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
	ImageSize float64 `json:"image_size"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Unique identifier of the Image. This value is only set for system Images.
	Name string `json:"name"`
	// Flavor of operating system contained in the Image
	OsFlavor PostServersIDActionsCreateImage201ApplicationJSONImageOsFlavorEnum `json:"os_flavor"`
	// Operating system version
	OsVersion string `json:"os_version"`
	// Protection configuration for the Resource
	Protection PostServersIDActionsCreateImage201ApplicationJSONImageProtection `json:"protection"`
	// Indicates that rapid deploy of the Image is available
	RapidDeploy *bool `json:"rapid_deploy,omitempty"`
	// Whether the Image can be used or if it's still being created or unavailable
	Status PostServersIDActionsCreateImage201ApplicationJSONImageStatusEnum `json:"status"`
	// Type of the Image
	Type PostServersIDActionsCreateImage201ApplicationJSONImageTypeEnum `json:"type"`
}

// PostServersIDActionsCreateImage201ApplicationJSON - The `image` key in the reply contains an the created Image, which is an object with this structure
//
// The `action` key in the reply contains an Action object with this structure
type PostServersIDActionsCreateImage201ApplicationJSON struct {
	Action *PostServersIDActionsCreateImage201ApplicationJSONAction `json:"action,omitempty"`
	Image  *PostServersIDActionsCreateImage201ApplicationJSONImage  `json:"image,omitempty"`
}

type PostServersIDActionsCreateImageResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `image` key in the reply contains an the created Image, which is an object with this structure
	//
	// The `action` key in the reply contains an Action object with this structure
	//
	PostServersIDActionsCreateImage201ApplicationJSONObject *PostServersIDActionsCreateImage201ApplicationJSON
}
