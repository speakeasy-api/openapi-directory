"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import status_enum as shared_status_enum
from ..shared import unifiedapiid_enum as shared_unifiedapiid_enum
from ..shared import webhookeventtype_enum as shared_webhookeventtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class WebhookDisabledReasonEnum(str, Enum):
    r"""Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan."""
    NONE = 'none'
    RETRY_LIMIT = 'retry_limit'
    USAGE_LIMIT = 'usage_limit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Webhook:
    
    delivery_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_url') }})
    r"""The delivery url of the webhook endpoint."""  
    events: list[shared_webhookeventtype_enum.WebhookEventTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events') }})
    r"""The list of subscribed events for this webhook. [`*`] indicates that all events are enabled."""  
    execute_base_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execute_base_url') }})
    r"""The Unify Base URL events from connectors will be sent to after service id is appended."""  
    status: shared_status_enum.StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the webhook."""  
    unified_api: shared_unifiedapiid_enum.UnifiedAPIIDEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unified_api') }})
    r"""Name of Apideck Unified API"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the object."""  
    disabled_reason: Optional[WebhookDisabledReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled_reason'), 'exclude': lambda f: f is None }})
    r"""Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was last updated."""  
    