/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Identity-Aware Proxy
 */
export class IdentityAwareProxy extends SpeakeasyBase {
  /**
   * Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * OAuth2 client ID to use for the authentication flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2ClientId" })
  oauth2ClientId?: string;

  /**
   * OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2ClientSecret" })
  oauth2ClientSecret?: string;

  /**
   * Output only. Hex-encoded SHA-256 hash of the client secret.@OutputOnly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2ClientSecretSha256" })
  oauth2ClientSecretSha256?: string;
}

/**
 * Identity-Aware Proxy
 */
export class IdentityAwareProxyInput extends SpeakeasyBase {
  /**
   * Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * OAuth2 client ID to use for the authentication flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2ClientId" })
  oauth2ClientId?: string;

  /**
   * OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2ClientSecret" })
  oauth2ClientSecret?: string;
}
