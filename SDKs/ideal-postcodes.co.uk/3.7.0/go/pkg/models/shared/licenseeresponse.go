// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicenseeResponseCodeEnum string

const (
	LicenseeResponseCodeEnumTwoThousand LicenseeResponseCodeEnum = "2000"
)

func (e *LicenseeResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = LicenseeResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseeResponseCodeEnum: %s", s)
	}
}

type LicenseeResponseMessageEnum string

const (
	LicenseeResponseMessageEnumSuccess LicenseeResponseMessageEnum = "Success"
)

func (e *LicenseeResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = LicenseeResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseeResponseMessageEnum: %s", s)
	}
}

// LicenseeResponse - Success
type LicenseeResponse struct {
	Code    LicenseeResponseCodeEnum    `json:"code"`
	Message LicenseeResponseMessageEnum `json:"message"`
	Result  Licensee                    `json:"result"`
}
