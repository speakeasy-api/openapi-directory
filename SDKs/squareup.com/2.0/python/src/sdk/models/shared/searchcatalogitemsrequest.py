"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customattributefilter as shared_customattributefilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchCatalogItemsRequest:
    r"""Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint."""
    
    category_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_ids'), 'exclude': lambda f: f is None }})
    r"""The category id query expression to return items containing the specified category IDs."""  
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor'), 'exclude': lambda f: f is None }})
    r"""The pagination token, returned in the previous response, used to fetch the next batch of pending results."""  
    custom_attribute_filters: Optional[list[shared_customattributefilter.CustomAttributeFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_filters'), 'exclude': lambda f: f is None }})
    r"""The customer-attribute filter to return items or item variations matching the specified
    custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
    a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
    """  
    enabled_location_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled_location_ids'), 'exclude': lambda f: f is None }})
    r"""The enabled-location query expression to return items and item variations having specified enabled locations."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return per page. The default value is 100."""  
    product_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_types'), 'exclude': lambda f: f is None }})
    r"""The product types query expression to return items or item variations having the specified product types."""  
    sort_order: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order'), 'exclude': lambda f: f is None }})
    r"""The order to sort the results by item names. The default sort order is ascending (`ASC`)."""  
    stock_levels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stock_levels'), 'exclude': lambda f: f is None }})
    r"""The stock-level query expression to return item variations with the specified stock levels."""  
    text_filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_filter'), 'exclude': lambda f: f is None }})
    r"""The text filter expression to return items or item variations containing specified text in
    the `name`, `description`, or `abbreviation` attribute value of an item, or in
    the `name`, `sku`, or `upc` attribute value of an item variation.
    """  
    