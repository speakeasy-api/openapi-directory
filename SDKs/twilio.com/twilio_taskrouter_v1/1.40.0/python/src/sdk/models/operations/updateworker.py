"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace_worker as shared_taskrouter_v1_workspace_worker
from typing import Optional

UPDATE_WORKER_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class UpdateWorkerSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateWorkerUpdateWorkerRequest:
    
    activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ActivitySid' }})
    r"""The SID of a valid Activity that will describe the Worker's initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information."""  
    attributes: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Attributes' }})
    r"""The JSON string that describes the Worker. For example: `{ \\"email\\": \\"Bob@example.com\\", \\"phone\\": \\"+5095551234\\" }`. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker. Defaults to {}."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the Worker. It can be up to 64 characters long."""  
    reject_pending_reservations: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RejectPendingReservations' }})
    r"""Whether to reject the Worker's pending reservations. This option is only valid if the Worker's new [Activity](https://www.twilio.com/docs/taskrouter/api/activity) resource has its `availability` property set to `False`."""  
    

@dataclasses.dataclass
class UpdateWorkerRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Worker resource to update."""  
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the Worker to update."""  
    if_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""The If-Match HTTP request header"""  
    request_body: Optional[UpdateWorkerUpdateWorkerRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateWorkerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace_worker: Optional[shared_taskrouter_v1_workspace_worker.TaskrouterV1WorkspaceWorker] = dataclasses.field(default=None)
    r"""OK"""  
    