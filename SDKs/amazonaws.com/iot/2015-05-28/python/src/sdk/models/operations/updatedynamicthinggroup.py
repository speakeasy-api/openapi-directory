"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import attributepayload as shared_attributepayload
from ..shared import updatedynamicthinggroupresponse as shared_updatedynamicthinggroupresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDynamicThingGroupRequestBodyThingGroupProperties:
    r"""Thing group properties."""
    
    attribute_payload: Optional[shared_attributepayload.AttributePayload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributePayload'), 'exclude': lambda f: f is None }})  
    thing_group_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingGroupDescription'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDynamicThingGroupRequestBody:
    
    thing_group_properties: UpdateDynamicThingGroupRequestBodyThingGroupProperties = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingGroupProperties') }})
    r"""Thing group properties."""  
    expected_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedVersion'), 'exclude': lambda f: f is None }})
    r"""The expected version of the dynamic thing group to update."""  
    index_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexName'), 'exclude': lambda f: f is None }})
    r"""<p>The dynamic thing group index to update.</p> <note> <p>Currently one index is supported: <code>AWS_Things</code>.</p> </note>"""  
    query_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryString'), 'exclude': lambda f: f is None }})
    r"""The dynamic thing group search query string to update."""  
    query_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryVersion'), 'exclude': lambda f: f is None }})
    r"""<p>The dynamic thing group query version to update.</p> <note> <p>Currently one query version is supported: \\"2017-09-30\\". If not specified, the query version defaults to this value.</p> </note>"""  
    

@dataclasses.dataclass
class UpdateDynamicThingGroupRequest:
    
    request_body: UpdateDynamicThingGroupRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    thing_group_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'thingGroupName', 'style': 'simple', 'explode': False }})
    r"""The name of the dynamic thing group to update."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDynamicThingGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_query_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidQueryException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_dynamic_thing_group_response: Optional[shared_updatedynamicthinggroupresponse.UpdateDynamicThingGroupResponse] = dataclasses.field(default=None)
    r"""Success"""  
    version_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""VersionConflictException"""  
    