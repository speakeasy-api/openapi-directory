"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import post as shared_post
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPostsByIdsSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api_key' }})  
    oauth2_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_implicit: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetPostsByIdsRequest:
    
    post_ids: str = dataclasses.field(metadata={'query_param': { 'field_name': 'post_ids', 'style': 'form', 'explode': True }})
    r"""A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPostsByIds200ApplicationJSON:
    r"""The posts."""
    
    forbidden: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forbidden'), 'exclude': lambda f: f is None }})
    r"""The IDs of posts that are forbidden for the current user."""  
    not_found: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_found'), 'exclude': lambda f: f is None }})
    r"""The IDs of posts that weren't found (may have been deleted or never existed)."""  
    posts: Optional[list[shared_post.Post]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetPostsByIdsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_posts_by_ids_200_application_json_object: Optional[GetPostsByIds200ApplicationJSON] = dataclasses.field(default=None)
    r"""The posts."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    