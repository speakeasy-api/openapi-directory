/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryChannelsRequest - Query Channels Request
 */
public class QueryChannelsRequest {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public QueryChannelsRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    public String connectionId;
    public QueryChannelsRequest withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter_conditions")
    public java.util.Map<String, Object> filterConditions;
    public QueryChannelsRequest withFilterConditions(java.util.Map<String, Object> filterConditions) {
        this.filterConditions = filterConditions;
        return this;
    }
    
    /**
     * Number of channels to limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Double limit;
    public QueryChannelsRequest withLimit(Double limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Number of members to limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("member_limit")
    public Double memberLimit;
    public QueryChannelsRequest withMemberLimit(Double memberLimit) {
        this.memberLimit = memberLimit;
        return this;
    }
    
    /**
     * Number of messages to limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_limit")
    public Double messageLimit;
    public QueryChannelsRequest withMessageLimit(Double messageLimit) {
        this.messageLimit = messageLimit;
        return this;
    }
    
    /**
     * Channel pagination offset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Double offset;
    public QueryChannelsRequest withOffset(Double offset) {
        this.offset = offset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("presence")
    public Boolean presence;
    public QueryChannelsRequest withPresence(Boolean presence) {
        this.presence = presence;
        return this;
    }
    
    /**
     * List of sort parameters
     */
    @JsonProperty("sort")
    public SortParamRequest[] sort;
    public QueryChannelsRequest withSort(SortParamRequest[] sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Whether to update channel state or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public Boolean state;
    public QueryChannelsRequest withState(Boolean state) {
        this.state = state;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public QueryChannelsRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public QueryChannelsRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Whether to start watching found channels or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watch")
    public Boolean watch;
    public QueryChannelsRequest withWatch(Boolean watch) {
        this.watch = watch;
        return this;
    }
    
}
