// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WatchErrorTypeEnum - Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.
type WatchErrorTypeEnum string

const (
	WatchErrorTypeEnumErrorTypeUnspecified WatchErrorTypeEnum = "ERROR_TYPE_UNSPECIFIED"
	WatchErrorTypeEnumProjectNotAuthorized WatchErrorTypeEnum = "PROJECT_NOT_AUTHORIZED"
	WatchErrorTypeEnumNoUserAccess         WatchErrorTypeEnum = "NO_USER_ACCESS"
	WatchErrorTypeEnumOtherErrors          WatchErrorTypeEnum = "OTHER_ERRORS"
)

func (e *WatchErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ERROR_TYPE_UNSPECIFIED":
		fallthrough
	case "PROJECT_NOT_AUTHORIZED":
		fallthrough
	case "NO_USER_ACCESS":
		fallthrough
	case "OTHER_ERRORS":
		*e = WatchErrorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WatchErrorTypeEnum: %s", s)
	}
}

// WatchEventTypeEnum - Required. Which event type to watch for.
type WatchEventTypeEnum string

const (
	WatchEventTypeEnumEventTypeUnspecified WatchEventTypeEnum = "EVENT_TYPE_UNSPECIFIED"
	WatchEventTypeEnumSchema               WatchEventTypeEnum = "SCHEMA"
	WatchEventTypeEnumResponses            WatchEventTypeEnum = "RESPONSES"
)

func (e *WatchEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "SCHEMA":
		fallthrough
	case "RESPONSES":
		*e = WatchEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WatchEventTypeEnum: %s", s)
	}
}

// WatchStateEnum - Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.
type WatchStateEnum string

const (
	WatchStateEnumStateUnspecified WatchStateEnum = "STATE_UNSPECIFIED"
	WatchStateEnumActive           WatchStateEnum = "ACTIVE"
	WatchStateEnumSuspended        WatchStateEnum = "SUSPENDED"
)

func (e *WatchStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "SUSPENDED":
		*e = WatchStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WatchStateEnum: %s", s)
	}
}

// Watch - A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
type Watch struct {
	// Output only. Timestamp of when this was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.
	ErrorType *WatchErrorTypeEnum `json:"errorType,omitempty"`
	// Required. Which event type to watch for.
	EventType *WatchEventTypeEnum `json:"eventType,omitempty"`
	// Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.
	ExpireTime *string `json:"expireTime,omitempty"`
	// Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.
	ID *string `json:"id,omitempty"`
	// Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.
	State *WatchStateEnum `json:"state,omitempty"`
	// The target for notification delivery.
	Target *WatchTarget `json:"target,omitempty"`
}

// WatchInput - A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
type WatchInput struct {
	// Required. Which event type to watch for.
	EventType *WatchEventTypeEnum `json:"eventType,omitempty"`
	// The target for notification delivery.
	Target *WatchTarget `json:"target,omitempty"`
}
