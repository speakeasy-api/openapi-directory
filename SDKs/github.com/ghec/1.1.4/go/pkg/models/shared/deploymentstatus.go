// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DeploymentStatusStateEnum - The state of the status.
type DeploymentStatusStateEnum string

const (
	DeploymentStatusStateEnumError      DeploymentStatusStateEnum = "error"
	DeploymentStatusStateEnumFailure    DeploymentStatusStateEnum = "failure"
	DeploymentStatusStateEnumInactive   DeploymentStatusStateEnum = "inactive"
	DeploymentStatusStateEnumPending    DeploymentStatusStateEnum = "pending"
	DeploymentStatusStateEnumSuccess    DeploymentStatusStateEnum = "success"
	DeploymentStatusStateEnumQueued     DeploymentStatusStateEnum = "queued"
	DeploymentStatusStateEnumInProgress DeploymentStatusStateEnum = "in_progress"
)

func (e *DeploymentStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "error":
		fallthrough
	case "failure":
		fallthrough
	case "inactive":
		fallthrough
	case "pending":
		fallthrough
	case "success":
		fallthrough
	case "queued":
		fallthrough
	case "in_progress":
		*e = DeploymentStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentStatusStateEnum: %s", s)
	}
}

// DeploymentStatus - The status of a deployment.
type DeploymentStatus struct {
	CreatedAt time.Time `json:"created_at"`
	// A GitHub user.
	Creator       NullableSimpleUser `json:"creator"`
	DeploymentURL string             `json:"deployment_url"`
	// A short description of the status.
	Description string `json:"description"`
	// The environment of the deployment that the status is for.
	Environment *string `json:"environment,omitempty"`
	// The URL for accessing your environment.
	EnvironmentURL *string `json:"environment_url,omitempty"`
	ID             int64   `json:"id"`
	// The URL to associate with this status.
	LogURL *string `json:"log_url,omitempty"`
	NodeID string  `json:"node_id"`
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	RepositoryURL         string               `json:"repository_url"`
	// The state of the status.
	State DeploymentStatusStateEnum `json:"state"`
	// Deprecated: the URL to associate with this status.
	TargetURL string    `json:"target_url"`
	UpdatedAt time.Time `json:"updated_at"`
	URL       string    `json:"url"`
}
