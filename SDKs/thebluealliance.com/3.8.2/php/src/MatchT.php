<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MatchT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
     * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
     * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse
     */
	public function getEventMatchTimeseries(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/timeseries', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchTimeseriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventMatchTimeseries200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse
     */
	public function getEventMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse
     */
	public function getEventMatchesKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventMatchesKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse
     */
	public function getEventMatchesSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/matches/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventMatchesSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matchSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a `Match` object for the given match key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatchResponse
     */
	public function getMatch(
        \OpenAPI\OpenAPI\Models\Operations\GetMatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/match/{match_key}', \OpenAPI\OpenAPI\Models\Operations\GetMatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->match = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatchT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form `Match` object for the given match key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleResponse
     */
	public function getMatchSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/match/{match_key}/simple', \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatchSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matchSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatchSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
     * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
     * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesResponse
     */
	public function getMatchTimeseries(
        \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/match/{match_key}/timeseries', \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatchTimeseriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMatchTimeseries200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets Zebra MotionWorks data for a Match for the given match key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraResponse
     */
	public function getMatchZebra(
        \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/match/{match_key}/zebra_motionworks', \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatchZebraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zebra = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Zebra', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
     */
	public function getTeamEventMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
     */
	public function getTeamEventMatchesKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventMatchesKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
     */
	public function getTeamEventMatchesSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse
     */
	public function getTeamMatchesByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse
     */
	public function getTeamMatchesByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamMatchesByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse
     */
	public function getTeamMatchesByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matchSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}