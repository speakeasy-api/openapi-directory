/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OrFiltersForSegment } from "./orfiltersforsegment";
import { Expose, Type } from "class-transformer";

/**
 * Specifies if the step immediately precedes or can be any time before the next step.
 */
export enum SegmentSequenceStepMatchTypeEnum {
  UnspecifiedMatchType = "UNSPECIFIED_MATCH_TYPE",
  Precedes = "PRECEDES",
  ImmediatelyPrecedes = "IMMEDIATELY_PRECEDES",
}

/**
 * A segment sequence definition.
 */
export class SegmentSequenceStep extends SpeakeasyBase {
  /**
   * Specifies if the step immediately precedes or can be any time before the next step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matchType" })
  matchType?: SegmentSequenceStepMatchTypeEnum;

  /**
   * A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.
   */
  @SpeakeasyMetadata({ elemType: OrFiltersForSegment })
  @Expose({ name: "orFiltersForSegment" })
  @Type(() => OrFiltersForSegment)
  orFiltersForSegment?: OrFiltersForSegment[];
}
