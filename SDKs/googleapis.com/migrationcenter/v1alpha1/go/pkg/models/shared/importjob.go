// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImportJobStateEnum - Output only. The state of the import job.
type ImportJobStateEnum string

const (
	ImportJobStateEnumImportJobStateUnspecified      ImportJobStateEnum = "IMPORT_JOB_STATE_UNSPECIFIED"
	ImportJobStateEnumImportJobStatePending          ImportJobStateEnum = "IMPORT_JOB_STATE_PENDING"
	ImportJobStateEnumImportJobStateRunning          ImportJobStateEnum = "IMPORT_JOB_STATE_RUNNING"
	ImportJobStateEnumImportJobStateCompleted        ImportJobStateEnum = "IMPORT_JOB_STATE_COMPLETED"
	ImportJobStateEnumImportJobStateFailed           ImportJobStateEnum = "IMPORT_JOB_STATE_FAILED"
	ImportJobStateEnumImportJobStateValidating       ImportJobStateEnum = "IMPORT_JOB_STATE_VALIDATING"
	ImportJobStateEnumImportJobStateFailedValidation ImportJobStateEnum = "IMPORT_JOB_STATE_FAILED_VALIDATION"
	ImportJobStateEnumImportJobStateReady            ImportJobStateEnum = "IMPORT_JOB_STATE_READY"
)

func (e ImportJobStateEnum) ToPointer() *ImportJobStateEnum {
	return &e
}

func (e *ImportJobStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPORT_JOB_STATE_UNSPECIFIED":
		fallthrough
	case "IMPORT_JOB_STATE_PENDING":
		fallthrough
	case "IMPORT_JOB_STATE_RUNNING":
		fallthrough
	case "IMPORT_JOB_STATE_COMPLETED":
		fallthrough
	case "IMPORT_JOB_STATE_FAILED":
		fallthrough
	case "IMPORT_JOB_STATE_VALIDATING":
		fallthrough
	case "IMPORT_JOB_STATE_FAILED_VALIDATION":
		fallthrough
	case "IMPORT_JOB_STATE_READY":
		*e = ImportJobStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportJobStateEnum: %v", v)
	}
}

// ImportJob - A resource that represents the background job that imports asset frames.
type ImportJob struct {
	// Required. Reference to a source.
	AssetSource *string `json:"assetSource,omitempty"`
	// Output only. The timestamp when the import job was completed.
	CompleteTime *string `json:"completeTime,omitempty"`
	// Output only. The timestamp when the import job was created.
	CreateTime *string `json:"createTime,omitempty"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// A resource that reports result of the import job execution.
	ExecutionReport *ExecutionReport `json:"executionReport,omitempty"`
	// A resource that represents a payload hosted on Google Cloud Storage.
	GcsPayload *GCSPayloadInfo `json:"gcsPayload,omitempty"`
	// A resource that represents the inline import job payload.
	InlinePayload *InlinePayloadInfo `json:"inlinePayload,omitempty"`
	// Labels as key value pairs.
	Labels map[string]string `json:"labels,omitempty"`
	// Output only. The full name of the import job.
	Name *string `json:"name,omitempty"`
	// Output only. The state of the import job.
	State *ImportJobStateEnum `json:"state,omitempty"`
	// Output only. The timestamp when the import job was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
	// A resource that aggregates errors across import job files.
	ValidationReport *ValidationReport `json:"validationReport,omitempty"`
}

// ImportJobInput - A resource that represents the background job that imports asset frames.
type ImportJobInput struct {
	// Required. Reference to a source.
	AssetSource *string `json:"assetSource,omitempty"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// A resource that reports result of the import job execution.
	ExecutionReport *ExecutionReport `json:"executionReport,omitempty"`
	// A resource that represents a payload hosted on Google Cloud Storage.
	GcsPayload *GCSPayloadInfo `json:"gcsPayload,omitempty"`
	// A resource that represents the inline import job payload.
	InlinePayload *InlinePayloadInfo `json:"inlinePayload,omitempty"`
	// Labels as key value pairs.
	Labels map[string]string `json:"labels,omitempty"`
	// A resource that aggregates errors across import job files.
	ValidationReport *ValidationReport `json:"validationReport,omitempty"`
}
