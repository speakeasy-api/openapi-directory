/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CadenceCounts } from "./cadencecounts";
import { EmbeddedResource } from "./embeddedresource";

/**
 * Success
 */
export class Cadence extends SpeakeasyBase {
  @SpeakeasyMetadata()
  addedStage?: EmbeddedResource;

  /**
   * Datetime of when the cadence was archived, if archived
   */
  @SpeakeasyMetadata()
  archivedAt?: Date;

  @SpeakeasyMetadata()
  bouncedStage?: EmbeddedResource;

  /**
   * ID of the cadence framework used to create steps for the cadence
   */
  @SpeakeasyMetadata()
  cadenceFrameworkId?: number;

  /**
   * The use case of the cadence. Possible values are:
   *
   * @remarks
   *
   * outbound: Denotes an outbound cadence, typically for sales purposes
   *
   * inbound: Denotes an inbound sales cadence
   *
   * event: Denotes a cadence used for an upcoming event
   *
   * other: Denotes a cadence outside of the standard process
   *
   */
  @SpeakeasyMetadata()
  cadenceFunction?: string;

  @SpeakeasyMetadata()
  cadencePriority?: EmbeddedResource;

  @SpeakeasyMetadata()
  counts?: CadenceCounts;

  /**
   * Datetime of when the cadence was created
   */
  @SpeakeasyMetadata()
  createdAt?: Date;

  @SpeakeasyMetadata()
  creator?: EmbeddedResource;

  /**
   * Whether this cadence is in draft mode
   */
  @SpeakeasyMetadata()
  draft?: boolean;

  /**
   * Cadence External ID
   */
  @SpeakeasyMetadata()
  externalIdentifier?: string;

  @SpeakeasyMetadata()
  finishedStage?: EmbeddedResource;

  /**
   * Groups to which this cadence is assigned, if any
   */
  @SpeakeasyMetadata({ elemType: EmbeddedResource })
  groups?: EmbeddedResource[];

  /**
   * ID of cadence
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Cadence name
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Whether this cadence is configured to include an opt-out link by default
   */
  @SpeakeasyMetadata()
  optOutLinkIncluded?: boolean;

  @SpeakeasyMetadata()
  owner?: EmbeddedResource;

  /**
   * Whether this cadence is configured to automatically remove people who have bounced
   */
  @SpeakeasyMetadata()
  removeBouncesEnabled?: boolean;

  /**
   * Whether this cadence is configured to automatically remove people who have replied
   */
  @SpeakeasyMetadata()
  removeRepliesEnabled?: boolean;

  @SpeakeasyMetadata()
  repliedStage?: EmbeddedResource;

  /**
   * Whether this cadence is visible to team members (shared)
   */
  @SpeakeasyMetadata()
  shared?: boolean;

  /**
   * All tags applied to this cadence
   */
  @SpeakeasyMetadata()
  tags?: string[];

  /**
   * Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users
   */
  @SpeakeasyMetadata()
  teamCadence?: boolean;

  /**
   * Datetime of when the cadence was last updated
   */
  @SpeakeasyMetadata()
  updatedAt?: Date;
}
