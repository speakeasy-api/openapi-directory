<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class AddEventSourceRequestBody
{
    /**
     * The largest number of records that AWS Lambda will give to your function in a single event. The default is 100 records.
     * 
     * @var ?int $batchSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('BatchSize')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $batchSize = null;
    
    /**
     * The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the event source. Any record added to this stream causes AWS Lambda to invoke your Lambda function. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON.
     * 
     * @var string $eventSource
     */
	#[\JMS\Serializer\Annotation\SerializedName('EventSource')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventSource;
    
    /**
     * The Lambda function to invoke when AWS Lambda detects an event on the stream.
     * 
     * @var string $functionName
     */
	#[\JMS\Serializer\Annotation\SerializedName('FunctionName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $functionName;
    
    /**
     * A map (key-value pairs) defining the configuration for AWS Lambda to use when reading the event source. Currently, AWS Lambda supports only the <code>InitialPositionInStream</code> key. The valid values are: "TRIM_HORIZON" and "LATEST". The default value is "TRIM_HORIZON". For more information, go to <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType">ShardIteratorType</a> in the Amazon Kinesis Service API Reference. 
     * 
     * @var ?array<string, string> $parameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('Parameters')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parameters = null;
    
    /**
     * The ARN of the IAM role (invocation role) that AWS Lambda can assume to read from the stream and invoke the function.
     * 
     * @var string $role
     */
	#[\JMS\Serializer\Annotation\SerializedName('Role')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $role;
    
	public function __construct()
	{
		$this->batchSize = null;
		$this->eventSource = "";
		$this->functionName = "";
		$this->parameters = null;
		$this->role = "";
	}
}
