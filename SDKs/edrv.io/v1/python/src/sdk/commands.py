"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Commands:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancelreservation(self, request: operations.CancelreservationRequestBody) -> operations.CancelreservationResponse:
        r"""Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/cancelreservation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelreservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Cancelreservation201ApplicationJSON])
                res.cancelreservation_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_commands(self, request: operations.GetCommandsRequest) -> operations.GetCommandsResponse:
        r"""Get Commands data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands'
        
        query_params = utils.get_query_params(operations.GetCommandsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommandsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_variables(self, request: operations.GetVariablesRequest) -> operations.GetVariablesResponse:
        r"""Get a charge station's config variables"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVariablesRequest, base_url, '/v1/commands/{id}/variables', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_charge_station_variable(self, request: operations.PatchChargeStationVariableRequest) -> operations.PatchChargeStationVariableResponse:
        r"""Update config variables for a chargestation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchChargeStationVariableRequest, base_url, '/v1/commands/{id}/variables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchChargeStationVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchChargeStationVariable201ApplicationJSON])
                res.patch_charge_station_variable_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def remotestart(self, request: operations.RemotestartRequestBody) -> operations.RemotestartResponse:
        r"""Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/remotestart'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemotestartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Remotestart201ApplicationJSON])
                res.remotestart_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def remotestop(self, request: operations.RemotestopRequestBody) -> operations.RemotestopResponse:
        r"""Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/remotestop'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemotestopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reserve(self, request: operations.ReserveRequestBody) -> operations.ReserveResponse:
        r"""Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/reserve'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReserveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Reserve201ApplicationJSON])
                res.reserve_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def reset(self, request: operations.ResetRequestBody) -> operations.ResetResponse:
        r"""Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/reset'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Reset201ApplicationJSON])
                res.reset_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def unlockconnector(self, request: operations.UnlockconnectorRequestBody) -> operations.UnlockconnectorResponse:
        r"""Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/commands/unlockconnector'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnlockconnectorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Unlockconnector201ApplicationJSON])
                res.unlockconnector_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    