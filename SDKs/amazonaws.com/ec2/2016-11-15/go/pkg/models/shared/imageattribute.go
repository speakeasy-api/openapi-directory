// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum - The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
type ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum string

const (
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumStandard ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "standard"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumIo1      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "io1"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumIo2      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "io2"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumGp2      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "gp2"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumSc1      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "sc1"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumSt1      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "st1"
	ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnumGp3      ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = "gp3"
)

func (e ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum) ToPointer() *ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum {
	return &e
}

func (e *ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum: %v", v)
	}
}

// ImageAttributeBlockDeviceMappingsEbs - Parameters used to automatically set up EBS volumes when the instance is launched.
type ImageAttributeBlockDeviceMappingsEbs struct {
	DeleteOnTermination *bool
	Encrypted           *bool
	Iops                *int64
	KmsKeyID            *string
	OutpostArn          *string
	SnapshotID          *string
	Throughput          *int64
	VolumeSize          *int64
	VolumeType          *ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum
}

// ImageAttributeBlockDeviceMappings - Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
type ImageAttributeBlockDeviceMappings struct {
	DeviceName  *string
	Ebs         *ImageAttributeBlockDeviceMappingsEbs
	NoDevice    *string
	VirtualName *string
}

// ImageAttributeBootMode - The boot mode.
type ImageAttributeBootMode struct {
	Value *string
}

// ImageAttributeDescription - A description for the AMI.
type ImageAttributeDescription struct {
	Value *string
}

// ImageAttributeImdsSupport - If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.
type ImageAttributeImdsSupport struct {
	Value *string
}

// ImageAttributeKernelID - The kernel ID.
type ImageAttributeKernelID struct {
	Value *string
}

// ImageAttributeLastLaunchedTime - <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note> <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p> </note>
type ImageAttributeLastLaunchedTime struct {
	Value *string
}

// ImageAttributeLaunchPermissionsGroupEnum - The name of the group.
type ImageAttributeLaunchPermissionsGroupEnum string

const (
	ImageAttributeLaunchPermissionsGroupEnumAll ImageAttributeLaunchPermissionsGroupEnum = "all"
)

func (e ImageAttributeLaunchPermissionsGroupEnum) ToPointer() *ImageAttributeLaunchPermissionsGroupEnum {
	return &e
}

func (e *ImageAttributeLaunchPermissionsGroupEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		*e = ImageAttributeLaunchPermissionsGroupEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageAttributeLaunchPermissionsGroupEnum: %v", v)
	}
}

// ImageAttributeLaunchPermissions - Describes a launch permission.
type ImageAttributeLaunchPermissions struct {
	Group                 *ImageAttributeLaunchPermissionsGroupEnum
	OrganizationArn       *string
	OrganizationalUnitArn *string
	UserID                *string
}

// ImageAttributeProductCodesProductCodeTypeEnum - The type of product code.
type ImageAttributeProductCodesProductCodeTypeEnum string

const (
	ImageAttributeProductCodesProductCodeTypeEnumDevpay      ImageAttributeProductCodesProductCodeTypeEnum = "devpay"
	ImageAttributeProductCodesProductCodeTypeEnumMarketplace ImageAttributeProductCodesProductCodeTypeEnum = "marketplace"
)

func (e ImageAttributeProductCodesProductCodeTypeEnum) ToPointer() *ImageAttributeProductCodesProductCodeTypeEnum {
	return &e
}

func (e *ImageAttributeProductCodesProductCodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "devpay":
		fallthrough
	case "marketplace":
		*e = ImageAttributeProductCodesProductCodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageAttributeProductCodesProductCodeTypeEnum: %v", v)
	}
}

// ImageAttributeProductCodes - Describes a product code.
type ImageAttributeProductCodes struct {
	ProductCodeID   *string
	ProductCodeType *ImageAttributeProductCodesProductCodeTypeEnum
}

// ImageAttributeRamdiskID - The RAM disk ID.
type ImageAttributeRamdiskID struct {
	Value *string
}

// ImageAttributeSriovNetSupport - Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
type ImageAttributeSriovNetSupport struct {
	Value *string
}

// ImageAttributeTpmSupport - If the image is configured for NitroTPM support, the value is <code>v2.0</code>.
type ImageAttributeTpmSupport struct {
	Value *string
}

// ImageAttributeUefiData - Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.
type ImageAttributeUefiData struct {
	Value *string
}

// ImageAttribute - Describes an image attribute.
type ImageAttribute struct {
	BlockDeviceMappings []ImageAttributeBlockDeviceMappings
	BootMode            *ImageAttributeBootMode
	Description         *ImageAttributeDescription
	ImageID             *string
	ImdsSupport         *ImageAttributeImdsSupport
	KernelID            *ImageAttributeKernelID
	LastLaunchedTime    *ImageAttributeLastLaunchedTime
	LaunchPermissions   []ImageAttributeLaunchPermissions
	ProductCodes        []ImageAttributeProductCodes
	RamdiskID           *ImageAttributeRamdiskID
	SriovNetSupport     *ImageAttributeSriovNetSupport
	TpmSupport          *ImageAttributeTpmSupport
	UefiData            *ImageAttributeUefiData
}
