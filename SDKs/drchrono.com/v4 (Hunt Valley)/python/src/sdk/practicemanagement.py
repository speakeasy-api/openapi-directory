"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PracticeManagement:
    r"""Create and manage practice management resources"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def inventory_categories_list(self, request: operations.InventoryCategoriesListRequest, security: operations.InventoryCategoriesListSecurity) -> operations.InventoryCategoriesListResponse:
        r"""Retrieve or search inventory categories"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/inventory_categories'
        
        query_params = utils.get_query_params(operations.InventoryCategoriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InventoryCategoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InventoryCategoriesList200ApplicationJSON])
                res.inventory_categories_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def inventory_categories_read(self, request: operations.InventoryCategoriesReadRequest, security: operations.InventoryCategoriesReadSecurity) -> operations.InventoryCategoriesReadResponse:
        r"""Retrieve an existing inventory category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.InventoryCategoriesReadRequest, base_url, '/api/inventory_categories/{id}', request)
        
        query_params = utils.get_query_params(operations.InventoryCategoriesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InventoryCategoriesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventoryCategory])
                res.inventory_category = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def inventory_vaccines_create(self, request: operations.InventoryVaccinesCreateRequest, security: operations.InventoryVaccinesCreateSecurity) -> operations.InventoryVaccinesCreateResponse:
        r"""Create vaccine inventory"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/inventory_vaccines'
        
        query_params = utils.get_query_params(operations.InventoryVaccinesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InventoryVaccinesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventoryVaccine])
                res.inventory_vaccine = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def inventory_vaccines_list(self, request: operations.InventoryVaccinesListRequest, security: operations.InventoryVaccinesListSecurity) -> operations.InventoryVaccinesListResponse:
        r"""Retrieve or search vaccine inventories"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/inventory_vaccines'
        
        query_params = utils.get_query_params(operations.InventoryVaccinesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InventoryVaccinesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InventoryVaccinesList200ApplicationJSON])
                res.inventory_vaccines_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def inventory_vaccines_read(self, request: operations.InventoryVaccinesReadRequest, security: operations.InventoryVaccinesReadSecurity) -> operations.InventoryVaccinesReadResponse:
        r"""Retrieve an existing vaccine inventory"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.InventoryVaccinesReadRequest, base_url, '/api/inventory_vaccines/{id}', request)
        
        query_params = utils.get_query_params(operations.InventoryVaccinesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InventoryVaccinesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventoryVaccine])
                res.inventory_vaccine = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def messages_create(self, request: operations.MessagesCreateRequest, security: operations.MessagesCreateSecurity) -> operations.MessagesCreateResponse:
        r"""Create messages in doctor's message center"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/messages'
        
        query_params = utils.get_query_params(operations.MessagesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DoctorMessage])
                res.doctor_message = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def messages_delete(self, request: operations.MessagesDeleteRequest, security: operations.MessagesDeleteSecurity) -> operations.MessagesDeleteResponse:
        r"""Delete an existing message in doctor's message center"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MessagesDeleteRequest, base_url, '/api/messages/{id}', request)
        
        query_params = utils.get_query_params(operations.MessagesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def messages_list(self, request: operations.MessagesListRequest, security: operations.MessagesListSecurity) -> operations.MessagesListResponse:
        r"""Retrieve or search messages in doctor's message center"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/messages'
        
        query_params = utils.get_query_params(operations.MessagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MessagesList200ApplicationJSON])
                res.messages_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def messages_partial_update(self, request: operations.MessagesPartialUpdateRequest, security: operations.MessagesPartialUpdateSecurity) -> operations.MessagesPartialUpdateResponse:
        r"""Update an existing message in doctor's message center"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MessagesPartialUpdateRequest, base_url, '/api/messages/{id}', request)
        
        query_params = utils.get_query_params(operations.MessagesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def messages_read(self, request: operations.MessagesReadRequest, security: operations.MessagesReadSecurity) -> operations.MessagesReadResponse:
        r"""Retrieve an existing message in doctor's message center"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MessagesReadRequest, base_url, '/api/messages/{id}', request)
        
        query_params = utils.get_query_params(operations.MessagesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DoctorMessage])
                res.doctor_message = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def messages_update(self, request: operations.MessagesUpdateRequest, security: operations.MessagesUpdateSecurity) -> operations.MessagesUpdateResponse:
        r"""Update an existing message in doctor's message center"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MessagesUpdateRequest, base_url, '/api/messages/{id}', request)
        
        query_params = utils.get_query_params(operations.MessagesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MessagesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def offices_add_exam_room(self, request: operations.OfficesAddExamRoomRequest, security: operations.OfficesAddExamRoomSecurity) -> operations.OfficesAddExamRoomResponse:
        r"""Add an exam room to the office"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OfficesAddExamRoomRequest, base_url, '/api/offices/{id}/add_exam_room', request)
        
        query_params = utils.get_query_params(operations.OfficesAddExamRoomRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OfficesAddExamRoomResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Office])
                res.office = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def offices_list(self, request: operations.OfficesListRequest, security: operations.OfficesListSecurity) -> operations.OfficesListResponse:
        r"""Retrieve or search offices"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/offices'
        
        query_params = utils.get_query_params(operations.OfficesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OfficesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.OfficesList200ApplicationJSON])
                res.offices_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def offices_partial_update(self, request: operations.OfficesPartialUpdateRequest, security: operations.OfficesPartialUpdateSecurity) -> operations.OfficesPartialUpdateResponse:
        r"""Update an existing office"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OfficesPartialUpdateRequest, base_url, '/api/offices/{id}', request)
        
        query_params = utils.get_query_params(operations.OfficesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OfficesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def offices_read(self, request: operations.OfficesReadRequest, security: operations.OfficesReadSecurity) -> operations.OfficesReadResponse:
        r"""Retrieve an existing office"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OfficesReadRequest, base_url, '/api/offices/{id}', request)
        
        query_params = utils.get_query_params(operations.OfficesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OfficesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Office])
                res.office = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def offices_update(self, request: operations.OfficesUpdateRequest, security: operations.OfficesUpdateSecurity) -> operations.OfficesUpdateResponse:
        r"""Update an existing office"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OfficesUpdateRequest, base_url, '/api/offices/{id}', request)
        
        query_params = utils.get_query_params(operations.OfficesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OfficesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_categories_create(self, request: operations.TaskCategoriesCreateRequest, security: operations.TaskCategoriesCreateSecurity) -> operations.TaskCategoriesCreateResponse:
        r"""Create a task category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_categories'
        
        query_params = utils.get_query_params(operations.TaskCategoriesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskCategoriesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCategory])
                res.task_category = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_categories_list(self, request: operations.TaskCategoriesListRequest, security: operations.TaskCategoriesListSecurity) -> operations.TaskCategoriesListResponse:
        r"""Retrieve or search task categories"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_categories'
        
        query_params = utils.get_query_params(operations.TaskCategoriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskCategoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaskCategoriesList200ApplicationJSON])
                res.task_categories_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_categories_partial_update(self, request: operations.TaskCategoriesPartialUpdateRequest, security: operations.TaskCategoriesPartialUpdateSecurity) -> operations.TaskCategoriesPartialUpdateResponse:
        r"""Update an existing task category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskCategoriesPartialUpdateRequest, base_url, '/api/task_categories/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskCategoriesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskCategoriesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_categories_read(self, request: operations.TaskCategoriesReadRequest, security: operations.TaskCategoriesReadSecurity) -> operations.TaskCategoriesReadResponse:
        r"""Retrieve an existing task category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskCategoriesReadRequest, base_url, '/api/task_categories/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskCategoriesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskCategoriesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCategory])
                res.task_category = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_categories_update(self, request: operations.TaskCategoriesUpdateRequest, security: operations.TaskCategoriesUpdateSecurity) -> operations.TaskCategoriesUpdateResponse:
        r"""Update an existing task category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskCategoriesUpdateRequest, base_url, '/api/task_categories/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskCategoriesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskCategoriesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_notes_create(self, request: operations.TaskNotesCreateRequest, security: operations.TaskNotesCreateSecurity) -> operations.TaskNotesCreateResponse:
        r"""Create a task note"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_notes'
        
        query_params = utils.get_query_params(operations.TaskNotesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskNotesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskNote])
                res.task_note = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_notes_list(self, request: operations.TaskNotesListRequest, security: operations.TaskNotesListSecurity) -> operations.TaskNotesListResponse:
        r"""Retrieve or search task notes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_notes'
        
        query_params = utils.get_query_params(operations.TaskNotesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskNotesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaskNotesList200ApplicationJSON])
                res.task_notes_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_notes_partial_update(self, request: operations.TaskNotesPartialUpdateRequest, security: operations.TaskNotesPartialUpdateSecurity) -> operations.TaskNotesPartialUpdateResponse:
        r"""Update an existing task note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskNotesPartialUpdateRequest, base_url, '/api/task_notes/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskNotesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskNotesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_notes_read(self, request: operations.TaskNotesReadRequest, security: operations.TaskNotesReadSecurity) -> operations.TaskNotesReadResponse:
        r"""Retrieve an existing task note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskNotesReadRequest, base_url, '/api/task_notes/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskNotesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskNotesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskNote])
                res.task_note = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_notes_update(self, request: operations.TaskNotesUpdateRequest, security: operations.TaskNotesUpdateSecurity) -> operations.TaskNotesUpdateResponse:
        r"""Update an existing task note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskNotesUpdateRequest, base_url, '/api/task_notes/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskNotesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskNotesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_statuses_create(self, request: operations.TaskStatusesCreateRequest, security: operations.TaskStatusesCreateSecurity) -> operations.TaskStatusesCreateResponse:
        r"""Create a task status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_statuses'
        
        query_params = utils.get_query_params(operations.TaskStatusesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskStatusesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskStatus])
                res.task_status = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_statuses_list(self, request: operations.TaskStatusesListRequest, security: operations.TaskStatusesListSecurity) -> operations.TaskStatusesListResponse:
        r"""Retrieve or search task statuses"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_statuses'
        
        query_params = utils.get_query_params(operations.TaskStatusesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskStatusesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaskStatusesList200ApplicationJSON])
                res.task_statuses_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_statuses_partial_update(self, request: operations.TaskStatusesPartialUpdateRequest, security: operations.TaskStatusesPartialUpdateSecurity) -> operations.TaskStatusesPartialUpdateResponse:
        r"""Update an existing task status"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskStatusesPartialUpdateRequest, base_url, '/api/task_statuses/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskStatusesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskStatusesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_statuses_read(self, request: operations.TaskStatusesReadRequest, security: operations.TaskStatusesReadSecurity) -> operations.TaskStatusesReadResponse:
        r"""Retrieve an existing task status"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskStatusesReadRequest, base_url, '/api/task_statuses/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskStatusesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskStatusesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskStatus])
                res.task_status = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_statuses_update(self, request: operations.TaskStatusesUpdateRequest, security: operations.TaskStatusesUpdateSecurity) -> operations.TaskStatusesUpdateResponse:
        r"""Update an existing task status"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskStatusesUpdateRequest, base_url, '/api/task_statuses/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskStatusesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskStatusesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_templates_create(self, request: operations.TaskTemplatesCreateRequest, security: operations.TaskTemplatesCreateSecurity) -> operations.TaskTemplatesCreateResponse:
        r"""Create a task template"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_templates'
        
        query_params = utils.get_query_params(operations.TaskTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTemplate])
                res.task_template = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_templates_list(self, request: operations.TaskTemplatesListRequest, security: operations.TaskTemplatesListSecurity) -> operations.TaskTemplatesListResponse:
        r"""Retrieve or search task templates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/task_templates'
        
        query_params = utils.get_query_params(operations.TaskTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaskTemplatesList200ApplicationJSON])
                res.task_templates_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_templates_partial_update(self, request: operations.TaskTemplatesPartialUpdateRequest, security: operations.TaskTemplatesPartialUpdateSecurity) -> operations.TaskTemplatesPartialUpdateResponse:
        r"""Update an existing task template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskTemplatesPartialUpdateRequest, base_url, '/api/task_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskTemplatesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTemplatesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def task_templates_read(self, request: operations.TaskTemplatesReadRequest, security: operations.TaskTemplatesReadSecurity) -> operations.TaskTemplatesReadResponse:
        r"""Retrieve an existing task template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskTemplatesReadRequest, base_url, '/api/task_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskTemplatesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTemplatesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTemplate])
                res.task_template = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def task_templates_update(self, request: operations.TaskTemplatesUpdateRequest, security: operations.TaskTemplatesUpdateSecurity) -> operations.TaskTemplatesUpdateResponse:
        r"""Update an existing task template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskTemplatesUpdateRequest, base_url, '/api/task_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.TaskTemplatesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTemplatesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tasks_create(self, request: operations.TasksCreateRequest, security: operations.TasksCreateSecurity) -> operations.TasksCreateResponse:
        r"""Create a task"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/tasks'
        
        query_params = utils.get_query_params(operations.TasksCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def tasks_list(self, request: operations.TasksListRequest, security: operations.TasksListSecurity) -> operations.TasksListResponse:
        r"""Retrieve or search tasks"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/tasks'
        
        query_params = utils.get_query_params(operations.TasksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TasksList200ApplicationJSON])
                res.tasks_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def tasks_partial_update(self, request: operations.TasksPartialUpdateRequest, security: operations.TasksPartialUpdateSecurity) -> operations.TasksPartialUpdateResponse:
        r"""Update an existing task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksPartialUpdateRequest, base_url, '/api/tasks/{id}', request)
        
        query_params = utils.get_query_params(operations.TasksPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tasks_read(self, request: operations.TasksReadRequest, security: operations.TasksReadSecurity) -> operations.TasksReadResponse:
        r"""Retrieve an existing task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksReadRequest, base_url, '/api/tasks/{id}', request)
        
        query_params = utils.get_query_params(operations.TasksReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def tasks_update(self, request: operations.TasksUpdateRequest, security: operations.TasksUpdateSecurity) -> operations.TasksUpdateResponse:
        r"""Update an existing task"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksUpdateRequest, base_url, '/api/tasks/{id}', request)
        
        query_params = utils.get_query_params(operations.TasksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    