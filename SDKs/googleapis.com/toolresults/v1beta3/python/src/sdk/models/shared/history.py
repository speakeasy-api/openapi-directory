"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class HistoryTestPlatformEnum(str, Enum):
    r"""The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown."""
    UNKNOWN_PLATFORM = 'unknownPlatform'
    ANDROID = 'android'
    IOS = 'ios'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class History:
    r"""A History represents a sorted list of Executions ordered by the start_timestamp_millis field (descending). It can be used to group all the Executions of a continuous build. Note that the ordering only operates on one-dimension. If a repository has multiple branches, it means that multiple histories will need to be used in order to order Executions per branch."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional"""  
    history_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('historyId'), 'exclude': lambda f: f is None }})
    r"""A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set"""  
    test_platform: Optional[HistoryTestPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testPlatform'), 'exclude': lambda f: f is None }})
    r"""The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown."""  
    