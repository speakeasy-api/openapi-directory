// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssociateRouteTableResultAssociationStateStateEnum - The state of the association.
type AssociateRouteTableResultAssociationStateStateEnum string

const (
	AssociateRouteTableResultAssociationStateStateEnumAssociating    AssociateRouteTableResultAssociationStateStateEnum = "associating"
	AssociateRouteTableResultAssociationStateStateEnumAssociated     AssociateRouteTableResultAssociationStateStateEnum = "associated"
	AssociateRouteTableResultAssociationStateStateEnumDisassociating AssociateRouteTableResultAssociationStateStateEnum = "disassociating"
	AssociateRouteTableResultAssociationStateStateEnumDisassociated  AssociateRouteTableResultAssociationStateStateEnum = "disassociated"
	AssociateRouteTableResultAssociationStateStateEnumFailed         AssociateRouteTableResultAssociationStateStateEnum = "failed"
)

func (e *AssociateRouteTableResultAssociationStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failed":
		*e = AssociateRouteTableResultAssociationStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateRouteTableResultAssociationStateStateEnum: %s", s)
	}
}

// AssociateRouteTableResultAssociationState - The state of the association.
type AssociateRouteTableResultAssociationState struct {
	State         *AssociateRouteTableResultAssociationStateStateEnum
	StatusMessage *string
}

// AssociateRouteTableResult - Success
type AssociateRouteTableResult struct {
	AssociationID    *string
	AssociationState *AssociateRouteTableResultAssociationState
}
