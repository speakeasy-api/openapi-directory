// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchProfileMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PatchProfileMultipartFormDataBirth struct {
	City    *string `json:"City,omitempty"`
	Country *string `json:"Country,omitempty"`
	Date    *string `json:"Date,omitempty"`
	ZipCode *string `json:"ZipCode,omitempty"`
}

type PatchProfileMultipartFormDataIDFile struct {
	IDFile  string `multipartForm:"name=IDFile"`
	Content []byte `multipartForm:"content"`
}

type PatchProfileMultipartFormDataSexEnum string

const (
	PatchProfileMultipartFormDataSexEnumMale   PatchProfileMultipartFormDataSexEnum = "male"
	PatchProfileMultipartFormDataSexEnumFemale PatchProfileMultipartFormDataSexEnum = "female"
)

func (e *PatchProfileMultipartFormDataSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = PatchProfileMultipartFormDataSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchProfileMultipartFormDataSexEnum: %s", s)
	}
}

// PatchProfileMultipartFormData1 - Profile to add
type PatchProfileMultipartFormData1 struct {
	Birth     *PatchProfileMultipartFormDataBirth   `multipartForm:"name=Birth,json"`
	BirthName *string                               `multipartForm:"name=BirthName"`
	Email     *string                               `multipartForm:"name=Email"`
	FirstName *string                               `multipartForm:"name=FirstName"`
	IDFile    *PatchProfileMultipartFormDataIDFile  `multipartForm:"file"`
	Name      *string                               `multipartForm:"name=Name"`
	Sex       *PatchProfileMultipartFormDataSexEnum `multipartForm:"name=Sex"`
}

type PatchProfileMultipartResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
