/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum HealthProfileResourceAttributesStatsCategoryEnum {
  LifestyleBehaviors = "lifestyle_behaviors",
  MentalWellbeing = "mental_wellbeing",
  PreventativeCare = "preventative_care",
  Overall = "overall",
}

/**
 * The category, answered and total counts for questions in the health profile
 */
export class HealthProfileResourceAttributesStats extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "answered" })
  answered?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: HealthProfileResourceAttributesStatsCategoryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;
}

export class HealthProfileResourceAttributes extends SpeakeasyBase {
  /**
   * List of category, answered and total counts for questions in the health profile
   */
  @SpeakeasyMetadata({ elemType: HealthProfileResourceAttributesStats })
  @Expose({ name: "stats" })
  @Type(() => HealthProfileResourceAttributesStats)
  stats?: HealthProfileResourceAttributesStats[];
}

export class HealthProfileResourceLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self: string;
}

export class HealthProfileResourceRelationshipsPatientData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class HealthProfileResourceRelationshipsPatientLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related?: string;
}

export class HealthProfileResourceRelationshipsPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => HealthProfileResourceRelationshipsPatientData)
  data?: HealthProfileResourceRelationshipsPatientData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthProfileResourceRelationshipsPatientLinks)
  links?: HealthProfileResourceRelationshipsPatientLinks;
}

export class HealthProfileResourceRelationshipsQuestionsData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class HealthProfileResourceRelationshipsQuestionsLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  related?: string;
}

export class HealthProfileResourceRelationshipsQuestions extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: HealthProfileResourceRelationshipsQuestionsData,
  })
  @Expose({ name: "data" })
  @Type(() => HealthProfileResourceRelationshipsQuestionsData)
  data?: HealthProfileResourceRelationshipsQuestionsData[];

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthProfileResourceRelationshipsQuestionsLinks)
  links?: HealthProfileResourceRelationshipsQuestionsLinks;
}

export class HealthProfileResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => HealthProfileResourceRelationshipsPatient)
  patient?: HealthProfileResourceRelationshipsPatient;

  @SpeakeasyMetadata()
  @Expose({ name: "questions" })
  @Type(() => HealthProfileResourceRelationshipsQuestions)
  questions?: HealthProfileResourceRelationshipsQuestions;
}

export class HealthProfileResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => HealthProfileResourceAttributes)
  attributes?: HealthProfileResourceAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => HealthProfileResourceLinks)
  links?: HealthProfileResourceLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => HealthProfileResourceRelationships)
  relationships?: HealthProfileResourceRelationships;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
