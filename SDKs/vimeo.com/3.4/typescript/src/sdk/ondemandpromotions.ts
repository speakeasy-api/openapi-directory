/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OnDemandPromotions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a promotion to an On Demand page
   */
  createVodPromotion(
    req: operations.CreateVodPromotionRequest,
    security: operations.CreateVodPromotionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateVodPromotionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateVodPromotionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/promotions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateVodPromotionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateVodPromotionResponse =
        new operations.CreateVodPromotionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.onDemandPromotion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPromotion
            );
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a promotion from an On Demand page
   */
  deleteVodPromotion(
    req: operations.DeleteVodPromotionRequest,
    security: operations.DeleteVodPromotionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVodPromotionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVodPromotionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVodPromotionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVodPromotionResponse =
        new operations.DeleteVodPromotionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific promotion on an On Demand page
   */
  getVodPromotion(
    req: operations.GetVodPromotionRequest,
    security: operations.GetVodPromotionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodPromotionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodPromotionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetVodPromotionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodPromotionResponse =
        new operations.GetVodPromotionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.onDemandPromotion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPromotion
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the codes of a promotion on an On Demand page
   */
  getVodPromotionCodes(
    req: operations.GetVodPromotionCodesRequest,
    security: operations.GetVodPromotionCodesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodPromotionCodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodPromotionCodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetVodPromotionCodesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodPromotionCodesResponse =
        new operations.GetVodPromotionCodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promocode+json`
            )
          ) {
            res.onDemandPromotionCode = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPromotionCode
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promocode+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the promotions on an On Demand page
   */
  getVodPromotions(
    req: operations.GetVodPromotionsRequest,
    security: operations.GetVodPromotionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodPromotionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodPromotionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/promotions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetVodPromotionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodPromotionsResponse =
        new operations.GetVodPromotionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.onDemandPromotion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPromotion
            );
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.promotion+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
