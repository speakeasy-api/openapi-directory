"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Annotation:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_annotation_count_by_acc_id_and_object_type_using_get(self, request: operations.GETAnnotationCountByAccIDAndObjectTypeUsingGETRequest) -> operations.GETAnnotationCountByAccIDAndObjectTypeUsingGETResponse:
        r"""Returns annotation count for ontology accession ID and object type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationCountByAccIDAndObjectTypeUsingGETRequest, base_url, '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationCountByAccIDAndObjectTypeUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotation_count_by_acc_id_and_species_using_get(self, request: operations.GETAnnotationCountByAccIDAndSpeciesUsingGETRequest) -> operations.GETAnnotationCountByAccIDAndSpeciesUsingGETResponse:
        r"""Returns annotation count for ontology accession ID and speicies"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationCountByAccIDAndSpeciesUsingGETRequest, base_url, '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationCountByAccIDAndSpeciesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotation_count_by_acc_id_using_get(self, request: operations.GETAnnotationCountByAccIDUsingGETRequest) -> operations.GETAnnotationCountByAccIDUsingGETResponse:
        r"""Returns annotation count for ontology accession ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationCountByAccIDUsingGETRequest, base_url, '/annotations/count/{accId}/{includeChildren}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationCountByAccIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotations_by_acc_id_and_rgd_id_using_get(self, request: operations.GETAnnotationsByAccIDAndRgdIDUsingGETRequest) -> operations.GETAnnotationsByAccIDAndRgdIDUsingGETResponse:
        r"""Returns a list of annotations by RGD ID and ontology term accession ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationsByAccIDAndRgdIDUsingGETRequest, base_url, '/annotations/{accId}/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationsByAccIDAndRgdIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotations_by_rgd_id_and_ontology_using_get(self, request: operations.GETAnnotationsByRgdIDAndOntologyUsingGETRequest) -> operations.GETAnnotationsByRgdIDAndOntologyUsingGETResponse:
        r"""Returns a list of annotations by RGD ID and ontology prefix"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationsByRgdIDAndOntologyUsingGETRequest, base_url, '/annotations/rgdId/{rgdId}/{ontologyPrefix}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationsByRgdIDAndOntologyUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotations_by_rgd_id_using_get(self, request: operations.GETAnnotationsByRgdIDUsingGETRequest) -> operations.GETAnnotationsByRgdIDUsingGETResponse:
        r"""Returns a list of annotations by RGD ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationsByRgdIDUsingGETRequest, base_url, '/annotations/rgdId/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationsByRgdIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotations_using_get(self, request: operations.GETAnnotationsUsingGETRequest) -> operations.GETAnnotationsUsingGETResponse:
        r"""Returns a list annotations for an ontology term or a term and it's children"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotationsUsingGETRequest, base_url, '/annotations/{accId}/{speciesTypeKey}/{includeChildren}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotationsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_annotations_using_post(self, request: shared.AnnotationRequest) -> operations.GetAnnotationsUsingPOSTResponse:
        r"""Return a list of genes annotated to an ontology term"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/annotations/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAnnotationsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_annots_by_refrerence_using_get(self, request: operations.GETAnnotsByRefrerenceUsingGETRequest) -> operations.GETAnnotsByRefrerenceUsingGETResponse:
        r"""Returns a list of annotations for a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnnotsByRefrerenceUsingGETRequest, base_url, '/annotations/reference/{refRgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnnotsByRefrerenceUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_term_acc_ids_using_get(self, request: operations.GETTermAccIdsUsingGETRequest) -> operations.GETTermAccIdsUsingGETResponse:
        r"""Returns a list ontology term accession IDs annotated to an rgd object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETTermAccIdsUsingGETRequest, base_url, '/annotations/accId/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETTermAccIdsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    