"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recommendationjobpayloadconfig as shared_recommendationjobpayloadconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecommendationJobContainerConfig:
    r"""Specifies mandatory fields for running an Inference Recommender job directly in the <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html\\">CreateInferenceRecommendationsJob</a> API. The fields specified in <code>ContainerConfig</code> override the corresponding fields in the model package. Use <code>ContainerConfig</code> if you want to specify these fields for the recommendation job but don't want to edit them in your model package."""
    
    data_input_config: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataInputConfig'), 'exclude': lambda f: f is None }})  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain'), 'exclude': lambda f: f is None }})  
    framework: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Framework'), 'exclude': lambda f: f is None }})  
    framework_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FrameworkVersion'), 'exclude': lambda f: f is None }})  
    nearest_model_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NearestModelName'), 'exclude': lambda f: f is None }})  
    payload_config: Optional[shared_recommendationjobpayloadconfig.RecommendationJobPayloadConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayloadConfig'), 'exclude': lambda f: f is None }})  
    supported_instance_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedInstanceTypes'), 'exclude': lambda f: f is None }})  
    task: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Task'), 'exclude': lambda f: f is None }})  
    