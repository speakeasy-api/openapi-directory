/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specifies property- and tag-based conditions that define filter criteria for including or excluding S3 buckets from the query results. Exclude conditions take precedence over include conditions.
 */
export class SearchResourcesRequestBodyBucketCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "excludes" })
  @Type(() => shared.SearchResourcesCriteriaBlock)
  excludes?: shared.SearchResourcesCriteriaBlock;

  @SpeakeasyMetadata()
  @Expose({ name: "includes" })
  @Type(() => shared.SearchResourcesCriteriaBlock)
  includes?: shared.SearchResourcesCriteriaBlock;
}

/**
 * Specifies criteria for sorting the results of a query for information about Amazon Web Services resources that Amazon Macie monitors and analyzes.
 */
export class SearchResourcesRequestBodySortCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributeName" })
  attributeName?: shared.SearchResourcesSortAttributeNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "orderBy" })
  orderBy?: shared.OrderByEnum;
}

export class SearchResourcesRequestBody extends SpeakeasyBase {
  /**
   * Specifies property- and tag-based conditions that define filter criteria for including or excluding S3 buckets from the query results. Exclude conditions take precedence over include conditions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bucketCriteria" })
  @Type(() => SearchResourcesRequestBodyBucketCriteria)
  bucketCriteria?: SearchResourcesRequestBodyBucketCriteria;

  /**
   * The maximum number of items to include in each page of the response. The default value is 50.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The nextToken string that specifies which page of results to return in a paginated response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * Specifies criteria for sorting the results of a query for information about Amazon Web Services resources that Amazon Macie monitors and analyzes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortCriteria" })
  @Type(() => SearchResourcesRequestBodySortCriteria)
  sortCriteria?: SearchResourcesRequestBodySortCriteria;
}

export class SearchResourcesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SearchResourcesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class SearchResourcesResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  searchResourcesResponse?: shared.SearchResourcesResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
