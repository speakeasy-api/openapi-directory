/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Handshake - &lt;p&gt;Contains information that must be exchanged to securely establish a relationship between two accounts (an &lt;i&gt;originator&lt;/i&gt; and a &lt;i&gt;recipient&lt;/i&gt;). For example, when a management account (the originator) invites another account (the recipient) to join its organization, the two accounts exchange information as a series of handshake requests and responses.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; Handshakes that are &lt;code&gt;CANCELED&lt;/code&gt;, &lt;code&gt;ACCEPTED&lt;/code&gt;, &lt;code&gt;DECLINED&lt;/code&gt;, or &lt;code&gt;EXPIRED&lt;/code&gt; show up in lists for only 30 days after entering that state After that they are deleted.&lt;/p&gt;
 */
public class Handshake {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Action")
    public ActionTypeEnum action;
    public Handshake withAction(ActionTypeEnum action) {
        this.action = action;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Arn")
    public String arn;
    public Handshake withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ExpirationTimestamp")
    public OffsetDateTime expirationTimestamp;
    public Handshake withExpirationTimestamp(OffsetDateTime expirationTimestamp) {
        this.expirationTimestamp = expirationTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public Handshake withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Parties")
    public HandshakeParty[] parties;
    public Handshake withParties(HandshakeParty[] parties) {
        this.parties = parties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RequestedTimestamp")
    public OffsetDateTime requestedTimestamp;
    public Handshake withRequestedTimestamp(OffsetDateTime requestedTimestamp) {
        this.requestedTimestamp = requestedTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Resources")
    public HandshakeResource[] resources;
    public Handshake withResources(HandshakeResource[] resources) {
        this.resources = resources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public HandshakeStateEnum state;
    public Handshake withState(HandshakeStateEnum state) {
        this.state = state;
        return this;
    }
    
}
