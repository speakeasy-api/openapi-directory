<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderReturnTax - Represents a tax being returned that applies to one or more return line items in an order.
 * 
 * 
 * Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
 * The amount distributed to each return line item is relative to that itemâ€™s contribution to the
 * order subtotal.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderReturnTax
{
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $appliedMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('applied_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $appliedMoney = null;
    
    /**
     * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
     * 
     * @var ?string $catalogObjectId
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_object_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $catalogObjectId = null;
    
    /**
     * The version of the catalog object that this tax references.
     * 
     * @var ?int $catalogVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $catalogVersion = null;
    
    /**
     * The tax's name.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The percentage of the tax, as a string representation of a decimal number.
     * 
     * For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
     * 
     * @var ?string $percentage
     */
	#[\JMS\Serializer\Annotation\SerializedName('percentage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $percentage = null;
    
    /**
     * Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
     * 
     * taxes, Square generates references in `applied_taxes` on all
     * `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to
     * `OrderReturnLineItem`s with references in their `applied_discounts` field.
     * 
     * @var ?string $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $scope = null;
    
    /**
     * The tax `uid` from the order that contains the original tax charge.
     * 
     * @var ?string $sourceTaxUid
     */
	#[\JMS\Serializer\Annotation\SerializedName('source_tax_uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceTaxUid = null;
    
    /**
     * Indicates the calculation method used to apply the tax.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * A unique ID that identifies the returned tax only within this order.
     * 
     * @var ?string $uid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uid = null;
    
	public function __construct()
	{
		$this->appliedMoney = null;
		$this->catalogObjectId = null;
		$this->catalogVersion = null;
		$this->name = null;
		$this->percentage = null;
		$this->scope = null;
		$this->sourceTaxUid = null;
		$this->type = null;
		$this->uid = null;
	}
}
