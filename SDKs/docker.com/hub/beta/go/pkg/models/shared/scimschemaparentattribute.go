// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScimSchemaParentAttributeTypeEnum string

const (
	ScimSchemaParentAttributeTypeEnumString  ScimSchemaParentAttributeTypeEnum = "string"
	ScimSchemaParentAttributeTypeEnumBoolean ScimSchemaParentAttributeTypeEnum = "boolean"
	ScimSchemaParentAttributeTypeEnumComplex ScimSchemaParentAttributeTypeEnum = "complex"
)

func (e *ScimSchemaParentAttributeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "string":
		fallthrough
	case "boolean":
		fallthrough
	case "complex":
		*e = ScimSchemaParentAttributeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimSchemaParentAttributeTypeEnum: %s", s)
	}
}

type ScimSchemaParentAttribute struct {
	CaseExact     *bool                              `json:"caseExact,omitempty"`
	Description   *string                            `json:"description,omitempty"`
	MultiValued   *bool                              `json:"multiValued,omitempty"`
	Mutability    *string                            `json:"mutability,omitempty"`
	Name          *string                            `json:"name,omitempty"`
	Required      *bool                              `json:"required,omitempty"`
	Returned      *string                            `json:"returned,omitempty"`
	SubAttributes []ScimSchemaAttribute              `json:"subAttributes,omitempty"`
	Type          *ScimSchemaParentAttributeTypeEnum `json:"type,omitempty"`
	Uniqueness    *string                            `json:"uniqueness,omitempty"`
}
