"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Test:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def test_archive_test_run(self, request: operations.TestArchiveTestRunRequest, security: operations.TestArchiveTestRunSecurity) -> operations.TestArchiveTestRunResponse:
        r"""Logically deletes a test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestArchiveTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestArchiveTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestArchiveTestRunTestRun])
                res.test_run = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_create_device_selection(self, request: operations.TestCreateDeviceSelectionRequest, security: operations.TestCreateDeviceSelectionSecurity) -> operations.TestCreateDeviceSelectionResponse:
        r"""Creates a short ID for a list of devices"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateDeviceSelectionRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/device_selection', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateDeviceSelectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSelectionDeviceSelection])
                res.device_selection = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSelectionTestCloudErrorDetails])
                res.test_cloud_error_details = out

        return res

    def test_create_device_set_of_owner(self, request: operations.TestCreateDeviceSetOfOwnerRequest, security: operations.TestCreateDeviceSetOfOwnerSecurity) -> operations.TestCreateDeviceSetOfOwnerResponse:
        r"""Creates a device set belonging to the owner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateDeviceSetOfOwnerRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateDeviceSetOfOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSetOfOwnerDeviceSet])
                res.device_set = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSetOfOwnerTestCloudErrorDetails])
                res.test_cloud_error_details = out

        return res

    def test_create_device_set_of_user(self, request: operations.TestCreateDeviceSetOfUserRequest, security: operations.TestCreateDeviceSetOfUserSecurity) -> operations.TestCreateDeviceSetOfUserResponse:
        r"""Creates a device set belonging to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateDeviceSetOfUserRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateDeviceSetOfUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSetOfUserDeviceSet])
                res.device_set = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateDeviceSetOfUserTestCloudErrorDetails])
                res.test_cloud_error_details = out

        return res

    def test_create_subscription(self, request: operations.TestCreateSubscriptionRequest, security: operations.TestCreateSubscriptionSecurity) -> operations.TestCreateSubscriptionResponse:
        r"""Accept a free trial subscription"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateSubscriptionRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/subscriptions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateSubscriptionSubscription])
                res.subscription = out

        return res

    def test_create_test_run(self, request: operations.TestCreateTestRunRequest, security: operations.TestCreateTestRunSecurity) -> operations.TestCreateTestRunResponse:
        r"""Creates a new test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def test_create_test_series(self, request: operations.TestCreateTestSeriesRequest, security: operations.TestCreateTestSeriesSecurity) -> operations.TestCreateTestSeriesResponse:
        r"""Creates new test series for an application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestCreateTestSeriesRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_series', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestCreateTestSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateTestSeriesTestSeries])
                res.test_series = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestCreateTestSeriesTestCloudErrorDetails])
                res.test_cloud_error_details = out

        return res

    def test_delete_device_set_of_owner(self, request: operations.TestDeleteDeviceSetOfOwnerRequest, security: operations.TestDeleteDeviceSetOfOwnerSecurity) -> operations.TestDeleteDeviceSetOfOwnerResponse:
        r"""Deletes a device set belonging to the owner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestDeleteDeviceSetOfOwnerRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestDeleteDeviceSetOfOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def test_delete_device_set_of_user(self, request: operations.TestDeleteDeviceSetOfUserRequest, security: operations.TestDeleteDeviceSetOfUserSecurity) -> operations.TestDeleteDeviceSetOfUserResponse:
        r"""Deletes a device set belonging to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestDeleteDeviceSetOfUserRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestDeleteDeviceSetOfUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def test_delete_test_series(self, request: operations.TestDeleteTestSeriesRequest, security: operations.TestDeleteTestSeriesSecurity) -> operations.TestDeleteTestSeriesResponse:
        r"""Deletes a single test series"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestDeleteTestSeriesRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestDeleteTestSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def test_gdpr_export_account(self) -> operations.TestGdprExportAccountResponse:
        r"""Lists account data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/account/test/export/accounts'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportAccount200ApplicationJSON])
                res.test_gdpr_export_account_200_application_json_object = out

        return res

    def test_gdpr_export_accounts(self) -> operations.TestGdprExportAccountsResponse:
        r"""Lists all the endpoints available for Test accounts data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/account/test/export'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportAccounts200ApplicationJSON])
                res.test_gdpr_export_accounts_200_application_json_object = out

        return res

    def test_gdpr_export_app(self, request: operations.TestGdprExportAppRequest, security: operations.TestGdprExportAppSecurity) -> operations.TestGdprExportAppResponse:
        r"""Lists app data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportAppRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export/apps', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportAppResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportApp200ApplicationJSON])
                res.test_gdpr_export_app_200_application_json_object = out

        return res

    def test_gdpr_export_apps(self, request: operations.TestGdprExportAppsRequest, security: operations.TestGdprExportAppsSecurity) -> operations.TestGdprExportAppsResponse:
        r"""Lists all the endpoints available for Test apps data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportAppsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportApps200ApplicationJSON])
                res.test_gdpr_export_apps_200_application_json_object = out

        return res

    def test_gdpr_export_feature_flag(self) -> operations.TestGdprExportFeatureFlagResponse:
        r"""Lists feature flag data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/account/test/export/featureFlags'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportFeatureFlagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportFeatureFlag200ApplicationJSON])
                res.test_gdpr_export_feature_flag_200_application_json_object = out

        return res

    def test_gdpr_export_file_set_file(self, request: operations.TestGdprExportFileSetFileRequest, security: operations.TestGdprExportFileSetFileSecurity) -> operations.TestGdprExportFileSetFileResponse:
        r"""Lists file set file data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportFileSetFileRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportFileSetFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportFileSetFile200ApplicationJSON])
                res.test_gdpr_export_file_set_file_200_application_json_object = out

        return res

    def test_gdpr_export_hash_file(self, request: operations.TestGdprExportHashFileRequest, security: operations.TestGdprExportHashFileSecurity) -> operations.TestGdprExportHashFileResponse:
        r"""Lists hash file data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportHashFileRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportHashFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportHashFile200ApplicationJSON])
                res.test_gdpr_export_hash_file_200_application_json_object = out

        return res

    def test_gdpr_export_pipeline_test(self, request: operations.TestGdprExportPipelineTestRequest, security: operations.TestGdprExportPipelineTestSecurity) -> operations.TestGdprExportPipelineTestResponse:
        r"""Lists pipeline test data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportPipelineTestRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportPipelineTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportPipelineTest200ApplicationJSON])
                res.test_gdpr_export_pipeline_test_200_application_json_object = out

        return res

    def test_gdpr_export_test_run(self, request: operations.TestGdprExportTestRunRequest, security: operations.TestGdprExportTestRunSecurity) -> operations.TestGdprExportTestRunResponse:
        r"""Lists test run data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGdprExportTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGdprExportTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGdprExportTestRun200ApplicationJSON])
                res.test_gdpr_export_test_run_200_application_json_object = out

        return res

    def test_get_all_test_runs_for_series(self, request: operations.TestGetAllTestRunsForSeriesRequest, security: operations.TestGetAllTestRunsForSeriesSecurity) -> operations.TestGetAllTestRunsForSeriesResponse:
        r"""Returns list of all test runs for a given test series"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetAllTestRunsForSeriesRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetAllTestRunsForSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestGetAllTestRunsForSeriesTestRun]])
                res.test_runs = out

        return res

    def test_get_all_test_series(self, request: operations.TestGetAllTestSeriesRequest, security: operations.TestGetAllTestSeriesSecurity) -> operations.TestGetAllTestSeriesResponse:
        r"""Returns list of all test series for an application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetAllTestSeriesRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_series', request)
        
        query_params = utils.get_query_params(operations.TestGetAllTestSeriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetAllTestSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestGetAllTestSeriesTestSeries]])
                res.test_series = out

        return res

    def test_get_device_configurations(self, request: operations.TestGetDeviceConfigurationsRequest, security: operations.TestGetDeviceConfigurationsSecurity) -> operations.TestGetDeviceConfigurationsResponse:
        r"""Returns a list of available devices"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetDeviceConfigurationsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/device_configurations', request)
        
        query_params = utils.get_query_params(operations.TestGetDeviceConfigurationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetDeviceConfigurationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestGetDeviceConfigurations200ApplicationJSON]])
                res.test_get_device_configurations_200_application_json_objects = out

        return res

    def test_get_device_set_of_owner(self, request: operations.TestGetDeviceSetOfOwnerRequest, security: operations.TestGetDeviceSetOfOwnerSecurity) -> operations.TestGetDeviceSetOfOwnerResponse:
        r"""Gets a device set belonging to the owner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetDeviceSetOfOwnerRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetDeviceSetOfOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetDeviceSetOfOwnerDeviceSet])
                res.device_set = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_get_device_set_of_user(self, request: operations.TestGetDeviceSetOfUserRequest, security: operations.TestGetDeviceSetOfUserSecurity) -> operations.TestGetDeviceSetOfUserResponse:
        r"""Gets a device set belonging to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetDeviceSetOfUserRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetDeviceSetOfUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetDeviceSetOfUserDeviceSet])
                res.device_set = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_get_subscriptions(self, request: operations.TestGetSubscriptionsRequest, security: operations.TestGetSubscriptionsSecurity) -> operations.TestGetSubscriptionsResponse:
        r"""Get information about the currently active subscriptions, if any"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetSubscriptionsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/subscriptions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetSubscriptionsSubscription])
                res.subscription = out

        return res

    def test_get_test_report(self, request: operations.TestGetTestReportRequest, security: operations.TestGetTestReportSecurity) -> operations.TestGetTestReportResponse:
        r"""Returns a single test report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetTestReportRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetTestReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetTestReport200ApplicationJSON])
                res.test_get_test_report_200_application_json_object = out

        return res

    def test_get_test_run(self, request: operations.TestGetTestRunRequest, security: operations.TestGetTestRunSecurity) -> operations.TestGetTestRunResponse:
        r"""Returns a single test runs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetTestRunTestRun])
                res.test_run = out

        return res

    def test_get_test_run_state(self, request: operations.TestGetTestRunStateRequest, security: operations.TestGetTestRunStateSecurity) -> operations.TestGetTestRunStateResponse:
        r"""Gets state of the test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetTestRunStateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetTestRunStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestGetTestRunStateTestRunState])
                res.test_run_state = out

        return res

    def test_get_test_runs(self, request: operations.TestGetTestRunsRequest, security: operations.TestGetTestRunsSecurity) -> operations.TestGetTestRunsResponse:
        r"""Returns a list of test runs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestGetTestRunsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestGetTestRunsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestGetTestRunsTestRun]])
                res.test_runs = out

        return res

    def test_list_device_sets_of_owner(self, request: operations.TestListDeviceSetsOfOwnerRequest, security: operations.TestListDeviceSetsOfOwnerSecurity) -> operations.TestListDeviceSetsOfOwnerResponse:
        r"""Lists device sets belonging to the owner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestListDeviceSetsOfOwnerRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestListDeviceSetsOfOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestListDeviceSetsOfOwnerDeviceSet]])
                res.device_sets = out

        return res

    def test_list_device_sets_of_user(self, request: operations.TestListDeviceSetsOfUserRequest, security: operations.TestListDeviceSetsOfUserSecurity) -> operations.TestListDeviceSetsOfUserResponse:
        r"""Lists device sets belonging to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestListDeviceSetsOfUserRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestListDeviceSetsOfUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestListDeviceSetsOfUserDeviceSet]])
                res.device_sets = out

        return res

    def test_patch_test_series(self, request: operations.TestPatchTestSeriesRequest, security: operations.TestPatchTestSeriesSecurity) -> operations.TestPatchTestSeriesResponse:
        r"""Updates name and slug of a test series"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestPatchTestSeriesRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestPatchTestSeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestPatchTestSeriesTestSeries])
                res.test_series = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def test_start_test_run(self, request: operations.TestStartTestRunRequest, security: operations.TestStartTestRunSecurity) -> operations.TestStartTestRunResponse:
        r"""Starts test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestStartTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestStartTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestStartTestRunTestCloudTestRunStartResult])
                res.test_cloud_test_run_start_result = out

        return res

    def test_start_uploading_file(self, request: operations.TestStartUploadingFileRequest, security: operations.TestStartUploadingFileSecurity) -> operations.TestStartUploadingFileResponse:
        r"""Uploads file for a test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestStartUploadingFileRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestStartUploadingFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            pass

        return res

    def test_stop_test_run(self, request: operations.TestStopTestRunRequest, security: operations.TestStopTestRunSecurity) -> operations.TestStopTestRunResponse:
        r"""Stop a test run execution"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestStopTestRunRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestStopTestRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestStopTestRunTestRun])
                res.test_run = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_update_device_set_of_owner(self, request: operations.TestUpdateDeviceSetOfOwnerRequest, security: operations.TestUpdateDeviceSetOfOwnerSecurity) -> operations.TestUpdateDeviceSetOfOwnerResponse:
        r"""Updates a device set belonging to the owner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestUpdateDeviceSetOfOwnerRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestUpdateDeviceSetOfOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestUpdateDeviceSetOfOwnerDeviceSet])
                res.device_set = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestUpdateDeviceSetOfOwnerTestCloudErrorDetails])
                res.test_cloud_error_details = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_update_device_set_of_user(self, request: operations.TestUpdateDeviceSetOfUserRequest, security: operations.TestUpdateDeviceSetOfUserSecurity) -> operations.TestUpdateDeviceSetOfUserResponse:
        r"""Updates a device set belonging to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestUpdateDeviceSetOfUserRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestUpdateDeviceSetOfUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestUpdateDeviceSetOfUserDeviceSet])
                res.device_set = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TestUpdateDeviceSetOfUserTestCloudErrorDetails])
                res.test_cloud_error_details = out
        elif http_res.status_code == 404:
            pass

        return res

    def test_upload_hash(self, request: operations.TestUploadHashRequest, security: operations.TestUploadHashSecurity) -> operations.TestUploadHashResponse:
        r"""Adds file with the given hash to a test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestUploadHashRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestUploadHashResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 412]:
            pass
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            

        return res

    def test_upload_hashes_batch(self, request: operations.TestUploadHashesBatchRequest, security: operations.TestUploadHashesBatchSecurity) -> operations.TestUploadHashesBatchResponse:
        r"""Adds file with the given hash to a test run"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TestUploadHashesBatchRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestUploadHashesBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.TestUploadHashesBatchTestCloudFileHashResponse]])
                res.test_cloud_file_hash_responses = out

        return res

    