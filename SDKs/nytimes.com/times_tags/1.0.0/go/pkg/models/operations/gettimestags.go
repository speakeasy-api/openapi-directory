// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetTimestagsFilterEnum - If you do not specify a value for filter (see the Optional Parameters), your query will be matched to tags in all four Times dictionaries: subject, geographic location, organization and person. To use more than one, separate with commas.
type GetTimestagsFilterEnum string

const (
	GetTimestagsFilterEnumDes GetTimestagsFilterEnum = "Des"
	GetTimestagsFilterEnumGeo GetTimestagsFilterEnum = "Geo"
	GetTimestagsFilterEnumOrg GetTimestagsFilterEnum = "Org"
	GetTimestagsFilterEnumPer GetTimestagsFilterEnum = "Per"
)

func (e *GetTimestagsFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Des":
		fallthrough
	case "Geo":
		fallthrough
	case "Org":
		fallthrough
	case "Per":
		*e = GetTimestagsFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTimestagsFilterEnum: %s", s)
	}
}

type GetTimestagsRequest struct {
	// If you do not specify a value for filter (see the Optional Parameters), your query will be matched to tags in all four Times dictionaries: subject, geographic location, organization and person. To use more than one, separate with commas.
	//
	Filter *GetTimestagsFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// Sets the maximum number of results
	Max *int64 `queryParam:"style=form,explode=true,name=max"`
	// Your search query
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type GetTimestagsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of tags
	GetTimestags200ApplicationJSONArrays [][]string
}
