// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListNotificationsActionEnum - The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**
//
// **Note** The **all** action matches notifications set to "all", not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action=all
type ListNotificationsActionEnum string

const (
	ListNotificationsActionEnumConnect  ListNotificationsActionEnum = "connect"
	ListNotificationsActionEnumDownload ListNotificationsActionEnum = "download"
	ListNotificationsActionEnumUpload   ListNotificationsActionEnum = "upload"
	ListNotificationsActionEnumDelete   ListNotificationsActionEnum = "delete"
	ListNotificationsActionEnumAll      ListNotificationsActionEnum = "all"
)

func (e *ListNotificationsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "connect":
		fallthrough
	case "download":
		fallthrough
	case "upload":
		fallthrough
	case "delete":
		fallthrough
	case "all":
		*e = ListNotificationsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListNotificationsActionEnum: %s", s)
	}
}

// ListNotificationsIncludeEnum - Related records to include in the response. Valid options are **ownerUser**, **resource**, **share**
type ListNotificationsIncludeEnum string

const (
	ListNotificationsIncludeEnumResource ListNotificationsIncludeEnum = "resource"
	ListNotificationsIncludeEnumShare    ListNotificationsIncludeEnum = "share"
	ListNotificationsIncludeEnumUser     ListNotificationsIncludeEnum = "user"
)

func (e *ListNotificationsIncludeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resource":
		fallthrough
	case "share":
		fallthrough
	case "user":
		*e = ListNotificationsIncludeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListNotificationsIncludeEnum: %s", s)
	}
}

// ListNotificationsTypeEnum - Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**
//
// If this parameter is not used, only **file** and **folder** type notifications are included in the list.
type ListNotificationsTypeEnum string

const (
	ListNotificationsTypeEnumFile         ListNotificationsTypeEnum = "file"
	ListNotificationsTypeEnumFolder       ListNotificationsTypeEnum = "folder"
	ListNotificationsTypeEnumSharedFolder ListNotificationsTypeEnum = "shared_folder"
	ListNotificationsTypeEnumSendReceipt  ListNotificationsTypeEnum = "send_receipt"
	ListNotificationsTypeEnumShareReceipt ListNotificationsTypeEnum = "share_receipt"
	ListNotificationsTypeEnumFileDrop     ListNotificationsTypeEnum = "file_drop"
)

func (e *ListNotificationsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "file":
		fallthrough
	case "folder":
		fallthrough
	case "shared_folder":
		fallthrough
	case "send_receipt":
		fallthrough
	case "share_receipt":
		fallthrough
	case "file_drop":
		*e = ListNotificationsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListNotificationsTypeEnum: %s", s)
	}
}

type ListNotificationsRequest struct {
	// The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**
	//
	// **Note** The **all** action matches notifications set to "all", not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action=all
	Action *ListNotificationsActionEnum `queryParam:"style=form,explode=true,name=action"`
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API Key required to make the API call.
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
	// Related records to include in the response. Valid options are **ownerUser**, **resource**, **share**
	Include *ListNotificationsIncludeEnum `queryParam:"style=form,explode=true,name=include"`
	// Number of notification records to return. Can be used for pagination.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Starting notification record in the result set. Can be used for pagination.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
	//
	// You can chose multiple options for the sort by separating them with commmas, such as "type,-date" to sort by type, then most recent.
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**
	//
	// If this parameter is not used, only **file** and **folder** type notifications are included in the list.
	Type *ListNotificationsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ListNotificationsResponse struct {
	ContentType string
	// Successful Operation
	NotificationCollectionResponse *shared.NotificationCollectionResponse
	StatusCode                     int
	RawResponse                    *http.Response
}
