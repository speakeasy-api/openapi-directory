"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class FindIncludeLicensedContentEnum(str, Enum):
    r"""Yes if you want to display licensed content"""
    YES = 'yes'
    NO = ' no'

class FindIncludeSpellcheckEnum(str, Enum):
    r"""yes, to include spell check suggestions in the response."""
    YES = 'yes'
    NO = ' no'

class FindIncludeTestEnum(str, Enum):
    r"""True if you want to have entities flag as test in the response. Only, if you only wanted test entities"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class FindSourceEnum(str, Enum):
    r"""Filter entities by its source name"""
    TICKETMASTER = 'ticketmaster'
    UNIVERSE = ' universe'
    FRONTGATE = ' frontgate'
    TMR = ' tmr'


@dataclasses.dataclass
class FindRequest:
    
    classification_id: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'classificationId', 'style': 'form', 'explode': True }})
    r"""Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type"""  
    classification_name: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'classificationName', 'style': 'form', 'explode': True }})
    r"""Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""Filter entities by its id"""  
    include_licensed_content: Optional[FindIncludeLicensedContentEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeLicensedContent', 'style': 'form', 'explode': True }})
    r"""Yes if you want to display licensed content"""  
    include_spellcheck: Optional[FindIncludeSpellcheckEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeSpellcheck', 'style': 'form', 'explode': True }})
    r"""yes, to include spell check suggestions in the response."""  
    include_test: Optional[FindIncludeTestEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTest', 'style': 'form', 'explode': True }})
    r"""True if you want to have entities flag as test in the response. Only, if you only wanted test entities"""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keyword', 'style': 'form', 'explode': True }})
    r"""Keyword to search on"""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')"""  
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Page size of the response"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'"""  
    source: Optional[FindSourceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""Filter entities by its source name"""  
    

@dataclasses.dataclass
class FindResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    