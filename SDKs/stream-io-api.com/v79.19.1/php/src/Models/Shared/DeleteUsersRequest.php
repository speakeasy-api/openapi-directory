<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class DeleteUsersRequest
{
    /**
     * Conversation channels delete mode.
     * 
     * Conversation channel is any channel which only has two members one of which is the user being deleted.
     * 
     * * null or empty string - doesn't delete any conversation channels
     * * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)
     * * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteConversationsEnum $conversations
     */
	#[\JMS\Serializer\Annotation\SerializedName('conversations')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteConversationsEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeleteUsersRequestDeleteConversationsEnum $conversations = null;
    
    /**
     * Message delete mode.
     * 
     * 
     * * null or empty string - doesn't delete user messages
     * * soft - marks all user messages as deleted without removing any related message data
     * * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags
     * * hard - deletes messages completely with all related information
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteMessagesEnum $messages
     */
	#[\JMS\Serializer\Annotation\SerializedName('messages')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteMessagesEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeleteUsersRequestDeleteMessagesEnum $messages = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('new_channel_owner_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $newChannelOwnerId = null;
    
    /**
     * User delete mode.
     * 
     * 
     * * soft - marks user as deleted and retains all user data
     * * pruning - marks user as deleted and nullifies user information
     * * hard - deletes user completely. Requires 'hard' option for messages and conversations as well
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteUserEnum $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeleteUsersRequestDeleteUserEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeleteUsersRequestDeleteUserEnum $user = null;
    
    /**
     * IDs of users to delete
     * 
     * @var array<string> $userIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('user_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $userIds;
    
	public function __construct()
	{
		$this->conversations = null;
		$this->messages = null;
		$this->newChannelOwnerId = null;
		$this->user = null;
		$this->userIds = [];
	}
}
