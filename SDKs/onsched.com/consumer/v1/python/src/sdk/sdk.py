"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .appointments import Appointments
from .availability import Availability
from .customers import Customers
from .locations import Locations
from .resourcegroups import ResourceGroups
from .resources import Resources
from .servicegroups import ServiceGroups
from .services import Services
from sdk.models import shared

SERVERS = [
    "https://sandbox-api.onsched.com/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.
    <br><br>
    Take the API for a test drive. Just click on the Authorize button below and authenticate. 
    You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.
    <br><br>
    The API has two interfaces, consumer and setup. 
    <ul>
    <li>
    The consumer interface provides all the endpoints required for implementing consumer booking flows.
    </li>
    <li>
    The setup interface provides endpoints for profile configuration and setup.
    </li>
    </ul>
    Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.
    """
    appointments: Appointments
    availability: Availability
    customers: Customers
    locations: Locations
    resource_groups: ResourceGroups
    resources: Resources
    service_groups: ServiceGroups
    services: Services

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.appointments = Appointments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.availability = Availability(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customers = Customers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.locations = Locations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.resource_groups = ResourceGroups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.resources = Resources(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.service_groups = ServiceGroups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.services = Services(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    