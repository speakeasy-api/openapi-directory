// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConferenceEnumTagEnum string

const (
	ConferenceEnumTagEnumInvalidRequestedRegion    ConferenceEnumTagEnum = "invalid_requested_region"
	ConferenceEnumTagEnumDuplicateIdentity         ConferenceEnumTagEnum = "duplicate_identity"
	ConferenceEnumTagEnumStartFailure              ConferenceEnumTagEnum = "start_failure"
	ConferenceEnumTagEnumRegionConfigurationIssues ConferenceEnumTagEnum = "region_configuration_issues"
	ConferenceEnumTagEnumQualityWarnings           ConferenceEnumTagEnum = "quality_warnings"
	ConferenceEnumTagEnumParticipantBehaviorIssues ConferenceEnumTagEnum = "participant_behavior_issues"
	ConferenceEnumTagEnumHighPacketLoss            ConferenceEnumTagEnum = "high_packet_loss"
	ConferenceEnumTagEnumHighJitter                ConferenceEnumTagEnum = "high_jitter"
	ConferenceEnumTagEnumHighLatency               ConferenceEnumTagEnum = "high_latency"
	ConferenceEnumTagEnumLowMos                    ConferenceEnumTagEnum = "low_mos"
	ConferenceEnumTagEnumDetectedSilence           ConferenceEnumTagEnum = "detected_silence"
)

func (e *ConferenceEnumTagEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_requested_region":
		fallthrough
	case "duplicate_identity":
		fallthrough
	case "start_failure":
		fallthrough
	case "region_configuration_issues":
		fallthrough
	case "quality_warnings":
		fallthrough
	case "participant_behavior_issues":
		fallthrough
	case "high_packet_loss":
		fallthrough
	case "high_jitter":
		fallthrough
	case "high_latency":
		fallthrough
	case "low_mos":
		fallthrough
	case "detected_silence":
		*e = ConferenceEnumTagEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceEnumTagEnum: %s", s)
	}
}
