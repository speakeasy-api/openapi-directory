/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PackageData {
    /**
     * The architecture of the package.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("architecture")
    public String architecture;
    public PackageData withArchitecture(String architecture) {
        this.architecture = architecture;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("binary")
    public Binary binary;
    public PackageData withBinary(Binary binary) {
        this.binary = binary;
        return this;
    }
    
    /**
     * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpeUri")
    public String cpeUri;
    public PackageData withCpeUri(String cpeUri) {
        this.cpeUri = cpeUri;
        return this;
    }
    
    /**
     * The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependencyChain")
    public LanguagePackageDependency[] dependencyChain;
    public PackageData withDependencyChain(LanguagePackageDependency[] dependencyChain) {
        this.dependencyChain = dependencyChain;
        return this;
    }
    
    /**
     * The path to the jar file / go binary file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileLocation")
    public FileLocation[] fileLocation;
    public PackageData withFileLocation(FileLocation[] fileLocation) {
        this.fileLocation = fileLocation;
        return this;
    }
    
    /**
     * HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hashDigest")
    public String hashDigest;
    public PackageData withHashDigest(String hashDigest) {
        this.hashDigest = hashDigest;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintainer")
    public Maintainer maintainer;
    public PackageData withMaintainer(Maintainer maintainer) {
        this.maintainer = maintainer;
        return this;
    }
    
    /**
     * The OS affected by a vulnerability Used to generate the cpe_uri for OS packages
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os")
    public String os;
    public PackageData withOs(String os) {
        this.os = os;
        return this;
    }
    
    /**
     * The version of the OS Used to generate the cpe_uri for OS packages
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osVersion")
    public String osVersion;
    public PackageData withOsVersion(String osVersion) {
        this.osVersion = osVersion;
        return this;
    }
    
    /**
     * The package being analysed for vulnerabilities
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package")
    public String package_;
    public PackageData withPackage(String package_) {
        this.package_ = package_;
        return this;
    }
    
    /**
     * The type of package: os, maven, go, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageType")
    public PackageDataPackageTypeEnum packageType;
    public PackageData withPackageType(PackageDataPackageTypeEnum packageType) {
        this.packageType = packageType;
        return this;
    }
    
    /**
     * CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patchedCve")
    public String[] patchedCve;
    public PackageData withPatchedCve(String[] patchedCve) {
        this.patchedCve = patchedCve;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unused")
    public String unused;
    public PackageData withUnused(String unused) {
        this.unused = unused;
        return this;
    }
    
    /**
     * The version of the package being analysed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public PackageData withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
