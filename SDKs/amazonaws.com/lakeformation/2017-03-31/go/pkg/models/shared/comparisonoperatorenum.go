// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ComparisonOperatorEnum string

const (
	ComparisonOperatorEnumEq          ComparisonOperatorEnum = "EQ"
	ComparisonOperatorEnumNe          ComparisonOperatorEnum = "NE"
	ComparisonOperatorEnumLe          ComparisonOperatorEnum = "LE"
	ComparisonOperatorEnumLt          ComparisonOperatorEnum = "LT"
	ComparisonOperatorEnumGe          ComparisonOperatorEnum = "GE"
	ComparisonOperatorEnumGt          ComparisonOperatorEnum = "GT"
	ComparisonOperatorEnumContains    ComparisonOperatorEnum = "CONTAINS"
	ComparisonOperatorEnumNotContains ComparisonOperatorEnum = "NOT_CONTAINS"
	ComparisonOperatorEnumBeginsWith  ComparisonOperatorEnum = "BEGINS_WITH"
	ComparisonOperatorEnumIn          ComparisonOperatorEnum = "IN"
	ComparisonOperatorEnumBetween     ComparisonOperatorEnum = "BETWEEN"
)

func (e ComparisonOperatorEnum) ToPointer() *ComparisonOperatorEnum {
	return &e
}

func (e *ComparisonOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EQ":
		fallthrough
	case "NE":
		fallthrough
	case "LE":
		fallthrough
	case "LT":
		fallthrough
	case "GE":
		fallthrough
	case "GT":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "NOT_CONTAINS":
		fallthrough
	case "BEGINS_WITH":
		fallthrough
	case "IN":
		fallthrough
	case "BETWEEN":
		*e = ComparisonOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComparisonOperatorEnum: %v", v)
	}
}
