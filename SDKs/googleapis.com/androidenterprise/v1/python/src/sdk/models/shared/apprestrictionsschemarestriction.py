"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apprestrictionsschemarestrictionrestrictionvalue as shared_apprestrictionsschemarestrictionrestrictionvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AppRestrictionsSchemaRestrictionRestrictionTypeEnum(str, Enum):
    r"""The type of the restriction."""
    BOOL = 'bool'
    STRING = 'string'
    INTEGER = 'integer'
    CHOICE = 'choice'
    MULTISELECT = 'multiselect'
    HIDDEN = 'hidden'
    BUNDLE = 'bundle'
    BUNDLE_ARRAY = 'bundleArray'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppRestrictionsSchemaRestriction:
    r"""A restriction in the App Restriction Schema represents a piece of configuration that may be pre-applied."""
    
    default_value: Optional[shared_apprestrictionsschemarestrictionrestrictionvalue.AppRestrictionsSchemaRestrictionRestrictionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})
    r"""A typed value for the restriction."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A longer description of the restriction, giving more detail of what it affects."""  
    entry: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry'), 'exclude': lambda f: f is None }})
    r"""For choice or multiselect restrictions, the list of possible entries' human-readable names."""  
    entry_value: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryValue'), 'exclude': lambda f: f is None }})
    r"""For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The unique key that the product uses to identify the restriction, e.g. \\"com.google.android.gm.fieldname\\"."""  
    nested_restriction: Optional[list[AppRestrictionsSchemaRestriction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nestedRestriction'), 'exclude': lambda f: f is None }})
    r"""For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep."""  
    restriction_type: Optional[AppRestrictionsSchemaRestrictionRestrictionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictionType'), 'exclude': lambda f: f is None }})
    r"""The type of the restriction."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The name of the restriction."""  
    