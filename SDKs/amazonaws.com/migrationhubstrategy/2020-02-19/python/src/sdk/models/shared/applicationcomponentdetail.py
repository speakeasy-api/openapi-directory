"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import antipatternreportstatus_enum as shared_antipatternreportstatus_enum
from ..shared import antipatternseveritysummary as shared_antipatternseveritysummary
from ..shared import apptype_enum as shared_apptype_enum
from ..shared import appuniterror as shared_appuniterror
from ..shared import databaseconfigdetail as shared_databaseconfigdetail
from ..shared import inclusionstatus_enum as shared_inclusionstatus_enum
from ..shared import recommendationset as shared_recommendationset
from ..shared import resourcesubtype_enum as shared_resourcesubtype_enum
from ..shared import result as shared_result
from ..shared import runtimeanalysisstatus_enum as shared_runtimeanalysisstatus_enum
from ..shared import s3object as shared_s3object
from ..shared import sourcecoderepository as shared_sourcecoderepository
from ..shared import srccodeordbanalysisstatus_enum as shared_srccodeordbanalysisstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationComponentDetail:
    r"""Contains detailed information about an application component."""
    
    analysis_status: Optional[shared_srccodeordbanalysisstatus_enum.SrcCodeOrDbAnalysisStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisStatus'), 'exclude': lambda f: f is None }})  
    antipattern_report_s3_object: Optional[shared_s3object.S3Object] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportS3Object'), 'exclude': lambda f: f is None }})  
    antipattern_report_status: Optional[shared_antipatternreportstatus_enum.AntipatternReportStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportStatus'), 'exclude': lambda f: f is None }})  
    antipattern_report_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportStatusMessage'), 'exclude': lambda f: f is None }})  
    app_type: Optional[shared_apptype_enum.AppTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appType'), 'exclude': lambda f: f is None }})  
    app_unit_error: Optional[shared_appuniterror.AppUnitError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appUnitError'), 'exclude': lambda f: f is None }})  
    associated_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedServerId'), 'exclude': lambda f: f is None }})  
    database_config_detail: Optional[shared_databaseconfigdetail.DatabaseConfigDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseConfigDetail'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    inclusion_status: Optional[shared_inclusionstatus_enum.InclusionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inclusionStatus'), 'exclude': lambda f: f is None }})  
    last_analyzed_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastAnalyzedTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    list_antipattern_severity_summary: Optional[list[shared_antipatternseveritysummary.AntipatternSeveritySummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listAntipatternSeveritySummary'), 'exclude': lambda f: f is None }})  
    more_server_association_exists: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moreServerAssociationExists'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    os_driver: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osDriver'), 'exclude': lambda f: f is None }})  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersion'), 'exclude': lambda f: f is None }})  
    recommendation_set: Optional[shared_recommendationset.RecommendationSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationSet'), 'exclude': lambda f: f is None }})  
    resource_sub_type: Optional[shared_resourcesubtype_enum.ResourceSubTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceSubType'), 'exclude': lambda f: f is None }})  
    result_list: Optional[list[shared_result.Result]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultList'), 'exclude': lambda f: f is None }})  
    runtime_status: Optional[shared_runtimeanalysisstatus_enum.RuntimeAnalysisStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeStatus'), 'exclude': lambda f: f is None }})  
    runtime_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeStatusMessage'), 'exclude': lambda f: f is None }})  
    source_code_repositories: Optional[list[shared_sourcecoderepository.SourceCodeRepository]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCodeRepositories'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})  
    