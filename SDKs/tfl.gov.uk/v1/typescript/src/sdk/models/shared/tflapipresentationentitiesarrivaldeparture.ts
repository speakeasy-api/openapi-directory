/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TflApiPresentationEntitiesPredictionTiming } from "./tflapipresentationentitiespredictiontiming";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Status of departure
 */
export enum TflApiPresentationEntitiesArrivalDepartureDepartureStatusEnum {
  OnTime = "OnTime",
  Delayed = "Delayed",
  Cancelled = "Cancelled",
  NotStoppingAtStation = "NotStoppingAtStation",
}

/**
 * DTO to capture the prediction details
 */
export class TflApiPresentationEntitiesArrivalDeparture extends SpeakeasyBase {
  /**
   * Reason for cancellation or delay
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cause" })
  cause?: string;

  /**
   * Status of departure
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departureStatus" })
  departureStatus?: TflApiPresentationEntitiesArrivalDepartureDepartureStatusEnum;

  /**
   * Name of the destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationName" })
  destinationName?: string;

  /**
   * Naptan Identifier for the prediction's destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationNaptanId" })
  destinationNaptanId?: string;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "estimatedTimeOfArrival" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  estimatedTimeOfArrival?: Date;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "estimatedTimeOfDeparture" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  estimatedTimeOfDeparture?: Date;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minutesAndSecondsToArrival" })
  minutesAndSecondsToArrival?: string;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minutesAndSecondsToDeparture" })
  minutesAndSecondsToDeparture?: string;

  /**
   * Identifier for the prediction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "naptanId" })
  naptanId?: string;

  /**
   * Platform name (for bus, this is the stop letter)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platformName" })
  platformName?: string;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledTimeOfArrival" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledTimeOfArrival?: Date;

  /**
   * Estimated time of arrival
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledTimeOfDeparture" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledTimeOfDeparture?: Date;

  /**
   * Station name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stationName" })
  stationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timing" })
  @Type(() => TflApiPresentationEntitiesPredictionTiming)
  timing?: TflApiPresentationEntitiesPredictionTiming;
}
