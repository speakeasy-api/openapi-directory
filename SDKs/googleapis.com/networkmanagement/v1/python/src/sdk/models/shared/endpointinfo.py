"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EndpointInfo:
    r"""For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model."""
    
    destination_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationIp'), 'exclude': lambda f: f is None }})
    r"""Destination IP address."""  
    destination_network_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationNetworkUri'), 'exclude': lambda f: f is None }})
    r"""URI of the network where this packet is sent to."""  
    destination_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationPort'), 'exclude': lambda f: f is None }})
    r"""Destination port. Only valid when protocol is TCP or UDP."""  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""IP protocol in string format, for example: \\"TCP\\", \\"UDP\\", \\"ICMP\\"."""  
    source_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceIp'), 'exclude': lambda f: f is None }})
    r"""Source IP address."""  
    source_network_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceNetworkUri'), 'exclude': lambda f: f is None }})
    r"""URI of the network where this packet originates from."""  
    source_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourcePort'), 'exclude': lambda f: f is None }})
    r"""Source port. Only valid when protocol is TCP or UDP."""  
    