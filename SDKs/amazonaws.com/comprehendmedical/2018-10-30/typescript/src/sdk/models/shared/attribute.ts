/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EntitySubTypeEnum } from "./entitysubtypeenum";
import { EntityTypeEnum } from "./entitytypeenum";
import { RelationshipTypeEnum } from "./relationshiptypeenum";
import { Trait } from "./trait";
import { Expose, Type } from "class-transformer";

/**
 *  An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. It contains information about the attribute such as id, begin and end offset within the input text, and the segment of the input text.
 */
export class Attribute extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BeginOffset" })
  beginOffset?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Category" })
  category?: EntityTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EndOffset" })
  endOffset?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RelationshipScore" })
  relationshipScore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RelationshipType" })
  relationshipType?: RelationshipTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Score" })
  score?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Text" })
  text?: string;

  @SpeakeasyMetadata({ elemType: Trait })
  @Expose({ name: "Traits" })
  @Type(() => Trait)
  traits?: Trait[];

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: EntitySubTypeEnum;
}
