// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposListForUserPathParams struct {
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

// ReposListForUserDirectionEnum - Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
type ReposListForUserDirectionEnum string

const (
	ReposListForUserDirectionEnumAsc  ReposListForUserDirectionEnum = "asc"
	ReposListForUserDirectionEnumDesc ReposListForUserDirectionEnum = "desc"
)

func (e *ReposListForUserDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = ReposListForUserDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForUserDirectionEnum: %s", s)
	}
}

// ReposListForUserSortEnum - Can be one of `created`, `updated`, `pushed`, `full_name`.
type ReposListForUserSortEnum string

const (
	ReposListForUserSortEnumCreated  ReposListForUserSortEnum = "created"
	ReposListForUserSortEnumUpdated  ReposListForUserSortEnum = "updated"
	ReposListForUserSortEnumPushed   ReposListForUserSortEnum = "pushed"
	ReposListForUserSortEnumFullName ReposListForUserSortEnum = "full_name"
)

func (e *ReposListForUserSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "pushed":
		fallthrough
	case "full_name":
		*e = ReposListForUserSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForUserSortEnum: %s", s)
	}
}

// ReposListForUserTypeEnum - Can be one of `all`, `owner`, `member`.
type ReposListForUserTypeEnum string

const (
	ReposListForUserTypeEnumAll    ReposListForUserTypeEnum = "all"
	ReposListForUserTypeEnumOwner  ReposListForUserTypeEnum = "owner"
	ReposListForUserTypeEnumMember ReposListForUserTypeEnum = "member"
)

func (e *ReposListForUserTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "owner":
		fallthrough
	case "member":
		*e = ReposListForUserTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposListForUserTypeEnum: %s", s)
	}
}

type ReposListForUserQueryParams struct {
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
	Direction *ReposListForUserDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort *ReposListForUserSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be one of `all`, `owner`, `member`.
	Type *ReposListForUserTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ReposListForUserRequest struct {
	PathParams  ReposListForUserPathParams
	QueryParams ReposListForUserQueryParams
}

type ReposListForUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	MinimalRepositories []shared.MinimalRepository
}
