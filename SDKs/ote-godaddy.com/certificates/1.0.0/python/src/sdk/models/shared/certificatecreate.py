"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificatecontact as shared_certificatecontact
from ..shared import certificateorganizationcreate as shared_certificateorganizationcreate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CertificateCreateProductTypeEnum(str, Enum):
    r"""Type of product requesting a certificate. Only required non-renewal"""
    DV_SSL = 'DV_SSL'
    DV_WILDCARD_SSL = 'DV_WILDCARD_SSL'
    EV_SSL = 'EV_SSL'
    OV_CS = 'OV_CS'
    OV_DS = 'OV_DS'
    OV_SSL = 'OV_SSL'
    OV_WILDCARD_SSL = 'OV_WILDCARD_SSL'
    UCC_DV_SSL = 'UCC_DV_SSL'
    UCC_EV_SSL = 'UCC_EV_SSL'
    UCC_OV_SSL = 'UCC_OV_SSL'

class CertificateCreateRootTypeEnum(str, Enum):
    r"""Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date"""
    GODADDY_SHA_1 = 'GODADDY_SHA_1'
    GODADDY_SHA_2 = 'GODADDY_SHA_2'
    STARFIELD_SHA_1 = 'STARFIELD_SHA_1'
    STARFIELD_SHA_2 = 'STARFIELD_SHA_2'

class CertificateCreateSlotSizeEnum(str, Enum):
    r"""Number of subject alternative names(SAN) to be included in certificate"""
    FIVE = 'FIVE'
    TEN = 'TEN'
    FIFTEEN = 'FIFTEEN'
    TWENTY = 'TWENTY'
    THIRTY = 'THIRTY'
    FOURTY = 'FOURTY'
    FIFTY = 'FIFTY'
    ONE_HUNDRED = 'ONE_HUNDRED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateCreate:
    r"""The certificate order information"""
    
    contact: shared_certificatecontact.CertificateContact = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact') }})  
    csr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csr') }})
    r"""Certificate Signing Request"""  
    period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period') }})
    r"""Number of years for certificate validity period"""  
    product_type: CertificateCreateProductTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType') }})
    r"""Type of product requesting a certificate. Only required non-renewal"""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callbackUrl'), 'exclude': lambda f: f is None }})
    r"""Required if client would like to receive stateful actions via callback during certificate lifecyle"""  
    common_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonName'), 'exclude': lambda f: f is None }})
    r"""Name to be secured in certificate. If provided, CN field in CSR will be ignored."""  
    intel_v_pro: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intelVPro'), 'exclude': lambda f: f is None }})
    r"""Only used for OV"""  
    organization: Optional[shared_certificateorganizationcreate.CertificateOrganizationCreate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    root_type: Optional[CertificateCreateRootTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootType'), 'exclude': lambda f: f is None }})
    r"""Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date"""  
    slot_size: Optional[CertificateCreateSlotSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotSize'), 'exclude': lambda f: f is None }})
    r"""Number of subject alternative names(SAN) to be included in certificate"""  
    subject_alternative_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectAlternativeNames'), 'exclude': lambda f: f is None }})
    r"""Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate."""  
    