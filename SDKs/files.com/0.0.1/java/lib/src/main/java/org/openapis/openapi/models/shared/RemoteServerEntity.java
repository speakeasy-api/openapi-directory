/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RemoteServerEntity - Create Remote Server
 */
public class RemoteServerEntity {
    /**
     * Describes the authorized account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_account_name")
    public String authAccountName;
    public RemoteServerEntity withAuthAccountName(String authAccountName) {
        this.authAccountName = authAccountName;
        return this;
    }
    
    /**
     * Returns link to login with an Oauth provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_setup_link")
    public String authSetupLink;
    public RemoteServerEntity withAuthSetupLink(String authSetupLink) {
        this.authSetupLink = authSetupLink;
        return this;
    }
    
    /**
     * Either `in_setup` or `complete`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_status")
    public RemoteServerEntityAuthStatusEnum authStatus;
    public RemoteServerEntity withAuthStatus(RemoteServerEntityAuthStatusEnum authStatus) {
        this.authStatus = authStatus;
        return this;
    }
    
    /**
     * Type of authentication method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_method")
    public String authenticationMethod;
    public RemoteServerEntity withAuthenticationMethod(String authenticationMethod) {
        this.authenticationMethod = authenticationMethod;
        return this;
    }
    
    /**
     * AWS Access Key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_access_key")
    public String awsAccessKey;
    public RemoteServerEntity withAwsAccessKey(String awsAccessKey) {
        this.awsAccessKey = awsAccessKey;
        return this;
    }
    
    /**
     * Azure Blob Storage Account name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_blob_storage_account")
    public String azureBlobStorageAccount;
    public RemoteServerEntity withAzureBlobStorageAccount(String azureBlobStorageAccount) {
        this.azureBlobStorageAccount = azureBlobStorageAccount;
        return this;
    }
    
    /**
     * Azure Blob Storage Container name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_blob_storage_container")
    public String azureBlobStorageContainer;
    public RemoteServerEntity withAzureBlobStorageContainer(String azureBlobStorageContainer) {
        this.azureBlobStorageContainer = azureBlobStorageContainer;
        return this;
    }
    
    /**
     * Shared Access Signature (SAS) token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_blob_storage_sas_token")
    public String azureBlobStorageSasToken;
    public RemoteServerEntity withAzureBlobStorageSasToken(String azureBlobStorageSasToken) {
        this.azureBlobStorageSasToken = azureBlobStorageSasToken;
        return this;
    }
    
    /**
     * Azure File Storage Account name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_files_storage_account")
    public String azureFilesStorageAccount;
    public RemoteServerEntity withAzureFilesStorageAccount(String azureFilesStorageAccount) {
        this.azureFilesStorageAccount = azureFilesStorageAccount;
        return this;
    }
    
    /**
     * Shared Access Signature (SAS) token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_files_storage_sas_token")
    public String azureFilesStorageSasToken;
    public RemoteServerEntity withAzureFilesStorageSasToken(String azureFilesStorageSasToken) {
        this.azureFilesStorageSasToken = azureFilesStorageSasToken;
        return this;
    }
    
    /**
     * Azure File Storage Share name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("azure_files_storage_share_name")
    public String azureFilesStorageShareName;
    public RemoteServerEntity withAzureFilesStorageShareName(String azureFilesStorageShareName) {
        this.azureFilesStorageShareName = azureFilesStorageShareName;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage Bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backblaze_b2_bucket")
    public String backblazeB2Bucket;
    public RemoteServerEntity withBackblazeB2Bucket(String backblazeB2Bucket) {
        this.backblazeB2Bucket = backblazeB2Bucket;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage S3 Endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backblaze_b2_s3_endpoint")
    public String backblazeB2S3Endpoint;
    public RemoteServerEntity withBackblazeB2S3Endpoint(String backblazeB2S3Endpoint) {
        this.backblazeB2S3Endpoint = backblazeB2S3Endpoint;
        return this;
    }
    
    /**
     * If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;
    public RemoteServerEntity withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * `true` if remote server only accepts connections from dedicated IPs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enable_dedicated_ips")
    public Boolean enableDedicatedIps;
    public RemoteServerEntity withEnableDedicatedIps(Boolean enableDedicatedIps) {
        this.enableDedicatedIps = enableDedicatedIps;
        return this;
    }
    
    /**
     * Filebase Access Key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filebase_access_key")
    public String filebaseAccessKey;
    public RemoteServerEntity withFilebaseAccessKey(String filebaseAccessKey) {
        this.filebaseAccessKey = filebaseAccessKey;
        return this;
    }
    
    /**
     * Filebase Bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filebase_bucket")
    public String filebaseBucket;
    public RemoteServerEntity withFilebaseBucket(String filebaseBucket) {
        this.filebaseBucket = filebaseBucket;
        return this;
    }
    
    /**
     * Files Agent API Token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files_agent_api_token")
    public String filesAgentApiToken;
    public RemoteServerEntity withFilesAgentApiToken(String filesAgentApiToken) {
        this.filesAgentApiToken = filesAgentApiToken;
        return this;
    }
    
    /**
     * Local permissions for files agent. read_only, write_only, or read_write
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files_agent_permission_set")
    public RemoteServerEntityFilesAgentPermissionSetEnum filesAgentPermissionSet;
    public RemoteServerEntity withFilesAgentPermissionSet(RemoteServerEntityFilesAgentPermissionSetEnum filesAgentPermissionSet) {
        this.filesAgentPermissionSet = filesAgentPermissionSet;
        return this;
    }
    
    /**
     * Agent local root path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files_agent_root")
    public String filesAgentRoot;
    public RemoteServerEntity withFilesAgentRoot(String filesAgentRoot) {
        this.filesAgentRoot = filesAgentRoot;
        return this;
    }
    
    /**
     * Google Cloud Storage bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("google_cloud_storage_bucket")
    public String googleCloudStorageBucket;
    public RemoteServerEntity withGoogleCloudStorageBucket(String googleCloudStorageBucket) {
        this.googleCloudStorageBucket = googleCloudStorageBucket;
        return this;
    }
    
    /**
     * Google Cloud Project ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("google_cloud_storage_project_id")
    public String googleCloudStorageProjectId;
    public RemoteServerEntity withGoogleCloudStorageProjectId(String googleCloudStorageProjectId) {
        this.googleCloudStorageProjectId = googleCloudStorageProjectId;
        return this;
    }
    
    /**
     * Hostname or IP address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;
    public RemoteServerEntity withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Remote server ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public RemoteServerEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_connections")
    public Integer maxConnections;
    public RemoteServerEntity withMaxConnections(Integer maxConnections) {
        this.maxConnections = maxConnections;
        return this;
    }
    
    /**
     * Internal name for your reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public RemoteServerEntity withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Either personal or business_other account types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("one_drive_account_type")
    public RemoteServerEntityOneDriveAccountTypeEnum oneDriveAccountType;
    public RemoteServerEntity withOneDriveAccountType(RemoteServerEntityOneDriveAccountTypeEnum oneDriveAccountType) {
        this.oneDriveAccountType = oneDriveAccountType;
        return this;
    }
    
    /**
     * If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin_to_site_region")
    public Boolean pinToSiteRegion;
    public RemoteServerEntity withPinToSiteRegion(Boolean pinToSiteRegion) {
        this.pinToSiteRegion = pinToSiteRegion;
        return this;
    }
    
    /**
     * If set, all communciations with this remote server are made through the provided region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinned_region")
    public String pinnedRegion;
    public RemoteServerEntity withPinnedRegion(String pinnedRegion) {
        this.pinnedRegion = pinnedRegion;
        return this;
    }
    
    /**
     * Port for remote server.  Not needed for S3.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public Integer port;
    public RemoteServerEntity withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * The name of the container (top level directory) where files will sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rackspace_container")
    public String rackspaceContainer;
    public RemoteServerEntity withRackspaceContainer(String rackspaceContainer) {
        this.rackspaceContainer = rackspaceContainer;
        return this;
    }
    
    /**
     * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rackspace_region")
    public String rackspaceRegion;
    public RemoteServerEntity withRackspaceRegion(String rackspaceRegion) {
        this.rackspaceRegion = rackspaceRegion;
        return this;
    }
    
    /**
     * Rackspace username used to login to the Rackspace Cloud Control Panel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rackspace_username")
    public String rackspaceUsername;
    public RemoteServerEntity withRackspaceUsername(String rackspaceUsername) {
        this.rackspaceUsername = rackspaceUsername;
        return this;
    }
    
    /**
     * Initial home folder on remote server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_home_path")
    public String remoteHomePath;
    public RemoteServerEntity withRemoteHomePath(String remoteHomePath) {
        this.remoteHomePath = remoteHomePath;
        return this;
    }
    
    /**
     * S3 bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_bucket")
    public String s3Bucket;
    public RemoteServerEntity withS3Bucket(String s3Bucket) {
        this.s3Bucket = s3Bucket;
        return this;
    }
    
    /**
     * S3-compatible Access Key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_compatible_access_key")
    public String s3CompatibleAccessKey;
    public RemoteServerEntity withS3CompatibleAccessKey(String s3CompatibleAccessKey) {
        this.s3CompatibleAccessKey = s3CompatibleAccessKey;
        return this;
    }
    
    /**
     * S3-compatible Bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_compatible_bucket")
    public String s3CompatibleBucket;
    public RemoteServerEntity withS3CompatibleBucket(String s3CompatibleBucket) {
        this.s3CompatibleBucket = s3CompatibleBucket;
        return this;
    }
    
    /**
     * S3-compatible endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_compatible_endpoint")
    public String s3CompatibleEndpoint;
    public RemoteServerEntity withS3CompatibleEndpoint(String s3CompatibleEndpoint) {
        this.s3CompatibleEndpoint = s3CompatibleEndpoint;
        return this;
    }
    
    /**
     * S3-compatible endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_compatible_region")
    public String s3CompatibleRegion;
    public RemoteServerEntity withS3CompatibleRegion(String s3CompatibleRegion) {
        this.s3CompatibleRegion = s3CompatibleRegion;
        return this;
    }
    
    /**
     * S3 region
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_region")
    public String s3Region;
    public RemoteServerEntity withS3Region(String s3Region) {
        this.s3Region = s3Region;
        return this;
    }
    
    /**
     * Remote server certificate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server_certificate")
    public RemoteServerEntityServerCertificateEnum serverCertificate;
    public RemoteServerEntity withServerCertificate(RemoteServerEntityServerCertificateEnum serverCertificate) {
        this.serverCertificate = serverCertificate;
        return this;
    }
    
    /**
     * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server_host_key")
    public String serverHostKey;
    public RemoteServerEntity withServerHostKey(String serverHostKey) {
        this.serverHostKey = serverHostKey;
        return this;
    }
    
    /**
     * Remote server type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server_type")
    public RemoteServerEntityServerTypeEnum serverType;
    public RemoteServerEntity withServerType(RemoteServerEntityServerTypeEnum serverType) {
        this.serverType = serverType;
        return this;
    }
    
    /**
     * Should we require SSL?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl")
    public RemoteServerEntitySslEnum ssl;
    public RemoteServerEntity withSsl(RemoteServerEntitySslEnum ssl) {
        this.ssl = ssl;
        return this;
    }
    
    /**
     * Remote server username.  Not needed for S3 buckets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public RemoteServerEntity withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Wasabi access key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wasabi_access_key")
    public String wasabiAccessKey;
    public RemoteServerEntity withWasabiAccessKey(String wasabiAccessKey) {
        this.wasabiAccessKey = wasabiAccessKey;
        return this;
    }
    
    /**
     * Wasabi Bucket name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wasabi_bucket")
    public String wasabiBucket;
    public RemoteServerEntity withWasabiBucket(String wasabiBucket) {
        this.wasabiBucket = wasabiBucket;
        return this;
    }
    
    /**
     * Wasabi region
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wasabi_region")
    public String wasabiRegion;
    public RemoteServerEntity withWasabiRegion(String wasabiRegion) {
        this.wasabiRegion = wasabiRegion;
        return this;
    }
    
}
