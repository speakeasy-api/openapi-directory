/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PubsubMessage - A message that is published by publishers and consumed by subscribers. The message must contain either a non-empty data field or at least one attribute. Note that client libraries represent this object differently depending on the language. See the corresponding [client library documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for more information. See [quotas and limits] (https://cloud.google.com/pubsub/quotas) for more information about message limits.
 */
public class PubsubMessage {
    /**
     * Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    public java.util.Map<String, String> attributes;

    public PubsubMessage withAttributes(java.util.Map<String, String> attributes) {
        this.attributes = attributes;
        return this;
    }
    
    /**
     * The message data field. If this field is empty, the message must contain at least one attribute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public String data;

    public PubsubMessage withData(String data) {
        this.data = data;
        return this;
    }
    
    /**
     * ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageId")
    public String messageId;

    public PubsubMessage withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }
    
    /**
     * If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value. For more information, see [ordering messages](https://cloud.google.com/pubsub/docs/ordering).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderingKey")
    public String orderingKey;

    public PubsubMessage withOrderingKey(String orderingKey) {
        this.orderingKey = orderingKey;
        return this;
    }
    
    /**
     * The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishTime")
    public String publishTime;

    public PubsubMessage withPublishTime(String publishTime) {
        this.publishTime = publishTime;
        return this;
    }
    
    public PubsubMessage(){}
}
