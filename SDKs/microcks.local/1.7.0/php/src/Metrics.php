<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Metrics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get aggregated invocation statistics for a day
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsResponse
     */
	public function getAggregatedInvocationsStats(
        \OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/invocations/global');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAggregatedInvocationsStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dailyInvocationStatistic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DailyInvocationStatistic', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get aggregation of conformance metrics
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConformanceMetricsAggregationResponse
     */
	public function getConformanceMetricsAggregation(
    ): \OpenAPI\OpenAPI\Models\Operations\GetConformanceMetricsAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/conformance/aggregate');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConformanceMetricsAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weightedMetricValues = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\WeightedMetricValue>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get invocation statistics for Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceResponse
     */
	public function getInvocationStatsByService(
        \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/invocations/{serviceName}/{serviceVersion}', \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInvocationStatsByServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dailyInvocationStatistic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DailyInvocationStatistic', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get aggregated invocations statistics for latest days
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsResponse
     */
	public function getLatestAggregatedInvocationsStats(
        \OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/invocations/global/latest');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLatestAggregatedInvocationsStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->counterMap = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, float>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get latest tests results
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsResponse
     */
	public function getLatestTestResults(
        \OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/tests/latest');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLatestTestResultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testResultSummaries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TestResultSummary>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get conformance metrics for a Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricResponse
     */
	public function getServiceTestConformanceMetric(
        \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/conformance/service/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServiceTestConformanceMetricResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testConformanceMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestConformanceMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get top invocation statistics for a day
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayResponse
     */
	public function getTopIvnocationsStatsByDay(
        \OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/invocations/top');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTopIvnocationsStatsByDayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dailyInvocationStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DailyInvocationStatistic>', 'json');
            }
        }

        return $response;
    }
}