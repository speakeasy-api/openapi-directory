"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import componentevent as shared_componentevent
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComponentChild:
    r"""A nested UI configuration within a parent <code>Component</code>."""
    
    component_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentType') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    properties: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties') }})
    r"""Describes the properties of the child component. You can't specify <code>tags</code> as a valid property for <code>properties</code>."""  
    children: Optional[list[ComponentChild]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})  
    events: Optional[dict[str, shared_componentevent.ComponentEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})  
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceId'), 'exclude': lambda f: f is None }})  
    