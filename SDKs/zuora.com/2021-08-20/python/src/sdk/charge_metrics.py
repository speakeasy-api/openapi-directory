"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChargeMetrics:
    r"""Charge Metrics provides a service to access key metrics for rate plan charges in Zuora, for example, Gross MRR, Net MRR, Gross TCV, and Net TCV."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_charge_metrics(self, request: operations.GETChargeMetricsRequest) -> operations.GETChargeMetricsResponse:
        r"""List charge metrics by time range
        Retrieves key charge metrics about rate plan charges that have changes in a specified time range.
        
        The purpose of `fromTimestamp` and `toTimestamp` is to synchronize charge metrics data incrementally.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/charge-metrics/data/charge-metrics'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETChargeMetricsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETChargeMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChargeMetricsResponse])
                res.charge_metrics_response = out
        elif http_res.status_code in [400, 429, 500]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonReasonsErrorResponse])
                res.common_reasons_error_response = out

        return res

    def get_charge_metrics_discount_allocation_details(self, request: operations.GETChargeMetricsDiscountAllocationDetailsRequest) -> operations.GETChargeMetricsDiscountAllocationDetailsResponse:
        r"""List discount allocation details by time range
        Retrieves discount allocation details about rate plan charges that have changes in a specified time range.
        
        The purpose of `fromTimestamp` and `toTimestamp` is to synchronize discount allocation details incrementally.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/charge-metrics/data/charge-metrics-discount-allocation-detail'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETChargeMetricsDiscountAllocationDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETChargeMetricsDiscountAllocationDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChargeMetricsDiscountAllocationDetailResponse])
                res.charge_metrics_discount_allocation_detail_response = out
        elif http_res.status_code in [400, 429, 500]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonReasonsErrorResponse])
                res.common_reasons_error_response = out

        return res

    