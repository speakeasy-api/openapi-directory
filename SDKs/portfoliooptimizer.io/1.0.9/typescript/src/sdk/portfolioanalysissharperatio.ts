/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PortfolioAnalysisSharpeRatio {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Sharpe Ratio
   *
   * @remarks
   * Compute the Sharpe ratio of one or several portfolio(s) from either:
   * * Portfolio assets arithmetic returns and assets covariance matrix
   * * Portfolio values
   *
   * References
   * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
   * * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioAnalysisSharpeRatio(
    req: any,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioAnalysisSharpeRatioResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/analysis/sharpe-ratio";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioAnalysisSharpeRatioResponse =
        new operations.PostPortfolioAnalysisSharpeRatioResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioAnalysisSharpeRatio200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioAnalysisSharpeRatio200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bias-Adjusted Sharpe Ratio
   *
   * @remarks
   * Compute the Sharpe ratio of one or several portfolio(s), adjusted for small sample bias.
   *
   * References
   * * [Opdyke, J., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
   *
   */
  postPortfolioAnalysisSharpeRatioBiasAdjusted(
    req: operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/analysis/sharpe-ratio/bias-adjusted";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedResponse =
        new operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioAnalysisSharpeRatioBiasAdjusted200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioAnalysisSharpeRatioBiasAdjusted200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sharpe Ratio Confidence Interval
   *
   * @remarks
   * Build a confidence interval for the Sharpe ratio of one or several portfolio(s).
   *
   * References
   * * [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
   *
   */
  postPortfolioAnalysisSharpeRatioConfidenceInterval(
    req: operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/analysis/sharpe-ratio/confidence-interval";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse =
        new operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Probabilistic Sharpe Ratio
   *
   * @remarks
   * Compute the probabilistic Sharpe ratio of one or several portfolio(s).
   *
   * References
   * * [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
   * * [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
   *
   */
  postPortfolioAnalysisSharpeRatioProbabilistic(
    req: any,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioAnalysisSharpeRatioProbabilisticResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/analysis/sharpe-ratio/probabilistic";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioAnalysisSharpeRatioProbabilisticResponse =
        new operations.PostPortfolioAnalysisSharpeRatioProbabilisticResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioAnalysisSharpeRatioProbabilistic200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioAnalysisSharpeRatioProbabilistic200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Minimum Track Record Length
   *
   * @remarks
   * Compute the minimum track record length of one or several portfolio(s).
   *
   * References
   * * [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
   *
   */
  postPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength(
    req: any,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/analysis/sharpe-ratio/probabilistic/minimum-track-record-length";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse =
        new operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
