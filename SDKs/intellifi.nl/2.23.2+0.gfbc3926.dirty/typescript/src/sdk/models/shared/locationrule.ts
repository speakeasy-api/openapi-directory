/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Location } from "./location";
import { LocationRuleTypeEnum } from "./locationruletypeenum";
import { Expose, Type } from "class-transformer";

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions23 extends SpeakeasyBase {
  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_location_url" })
  toLocationUrl?: string;
}

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions22 extends SpeakeasyBase {
  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_location_id" })
  toLocationId?: string;
}

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions21 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "to_location" })
  @Type(() => Location)
  toLocation?: Location;
}

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions13 extends SpeakeasyBase {
  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from_location_url" })
  fromLocationUrl?: string;
}

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions12 extends SpeakeasyBase {
  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from_location_id" })
  fromLocationId?: string;
}

/**
 * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
 */
export class LocationRuleConditions11 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "from_location" })
  @Type(() => Location)
  fromLocation?: Location;
}

/**
 * A JSON object containing the location rule
 */
export class LocationRule extends SpeakeasyBase {
  /**
   * Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conditions" })
  conditions?: any;

  /**
   * Whether this rule should be in effect (`true`) or on hold (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Unique identifier for resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A name or a label for this resource. This is used in the user interface, may be empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * Parameters for this rule; depends on the rule type. Refer to the rule type specification for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  parameters?: Record<string, any>;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_created" })
  timeCreated?: string;

  /**
   * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_updated" })
  timeUpdated?: string;

  /**
   * The type of location rule to be applied.
   *
   * @remarks
   * Allow: items at `conditions.from_location` can only move to `conditions.to_location` and locations allowed in other `allow` rules (destination whitelist).
   * Disallow: items at `conditions.from_location` cannot be moved to `conditions.to_location` and locations disallowed in other `disallow` rules (destination blacklist).
   * Disappeared: items disappearing at `conditions.from_location` will be moved to `parameters.location` after `parameters.time_s` seconds.
   * Debounce: items moves from `conditions.from_location` (and optionally to `conditions.to_location`) will be debounced with a period of `parameters.time_s` seconds, for a maximum of `parameters.max_periods` periods.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: LocationRuleTypeEnum;

  /**
   * Url to the individual resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
