"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import emoji as shared_emoji
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Poll:
    r"""Represents a poll attached to a status.
    https://docs.joinmastodon.org/entities/poll/
    """
    
    emojis: Optional[list[shared_emoji.Emoji]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emojis'), 'exclude': lambda f: f is None }})
    r"""Custom emoji to be used for rendering poll options."""  
    expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})
    r"""Is the poll currently expired?"""  
    expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the poll ends. ISO 8601 Datetime, or null if the poll does not end."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number."""  
    multiple: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiple'), 'exclude': lambda f: f is None }})
    r"""Does the poll allow multiple-choice answers?"""  
    options: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Possible answers for the poll."""  
    own_votes: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('own_votes'), 'exclude': lambda f: f is None }})
    r"""When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user"""  
    voted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voted'), 'exclude': lambda f: f is None }})
    r"""When called with a user token, has the authorized user voted? Boolean, or null if no current user"""  
    voters_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voters_count'), 'exclude': lambda f: f is None }})
    r"""How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false."""  
    votes_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('votes_count'), 'exclude': lambda f: f is None }})
    r"""How many votes have been received."""  
    