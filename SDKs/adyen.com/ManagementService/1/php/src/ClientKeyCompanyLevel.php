<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClientKeyCompanyLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generate new client key
     * 
     * Returns a new [client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works) for the API credential identified in the path. You can use the new client key a few minutes after generating it. The old client key stops working 24 hours after generating a new one.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management APIâ€”API credentials read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyResponse
     */
	public function postCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKey(
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/apiCredentials/{apiCredentialId}/generateClientKey', \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompaniesCompanyIdApiCredentialsApiCredentialIdGenerateClientKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateClientKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateClientKeyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}