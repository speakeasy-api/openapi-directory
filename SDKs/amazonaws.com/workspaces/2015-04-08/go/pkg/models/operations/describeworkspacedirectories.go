// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeWorkspaceDirectoriesQueryParams struct {
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// DescribeWorkspaceDirectoriesXAmzTargetEnum
type DescribeWorkspaceDirectoriesXAmzTargetEnum string

const (
	DescribeWorkspaceDirectoriesXAmzTargetEnumWorkspacesServiceDescribeWorkspaceDirectories DescribeWorkspaceDirectoriesXAmzTargetEnum = "WorkspacesService.DescribeWorkspaceDirectories"
)

func (e *DescribeWorkspaceDirectoriesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WorkspacesService.DescribeWorkspaceDirectories":
		*e = DescribeWorkspaceDirectoriesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeWorkspaceDirectoriesXAmzTargetEnum: %s", s)
	}
}

type DescribeWorkspaceDirectoriesHeaders struct {
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeWorkspaceDirectoriesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeWorkspaceDirectoriesRequest struct {
	QueryParams DescribeWorkspaceDirectoriesQueryParams
	Headers     DescribeWorkspaceDirectoriesHeaders
	Request     shared.DescribeWorkspaceDirectoriesRequest `request:"mediaType=application/json"`
}

type DescribeWorkspaceDirectoriesResponse struct {
	ContentType string
	// Success
	DescribeWorkspaceDirectoriesResult *shared.DescribeWorkspaceDirectoriesResult
	// InvalidParameterValuesException
	InvalidParameterValuesException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
