// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UsersGetContextForUserSubjectTypeEnum - Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
type UsersGetContextForUserSubjectTypeEnum string

const (
	UsersGetContextForUserSubjectTypeEnumOrganization UsersGetContextForUserSubjectTypeEnum = "organization"
	UsersGetContextForUserSubjectTypeEnumRepository   UsersGetContextForUserSubjectTypeEnum = "repository"
	UsersGetContextForUserSubjectTypeEnumIssue        UsersGetContextForUserSubjectTypeEnum = "issue"
	UsersGetContextForUserSubjectTypeEnumPullRequest  UsersGetContextForUserSubjectTypeEnum = "pull_request"
)

func (e *UsersGetContextForUserSubjectTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "organization":
		fallthrough
	case "repository":
		fallthrough
	case "issue":
		fallthrough
	case "pull_request":
		*e = UsersGetContextForUserSubjectTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersGetContextForUserSubjectTypeEnum: %s", s)
	}
}

type UsersGetContextForUserRequest struct {
	// Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
	SubjectID *string `queryParam:"style=form,explode=true,name=subject_id"`
	// Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
	SubjectType *UsersGetContextForUserSubjectTypeEnum `queryParam:"style=form,explode=true,name=subject_type"`
	Username    string                                 `pathParam:"style=simple,explode=false,name=username"`
}

type UsersGetContextForUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Hovercard *shared.Hovercard
	// Validation failed
	ValidationError *shared.ValidationError
}
