// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CisLineTypeCisLineTypeNominalCode - The cis line types' nominal code
type CisLineTypeCisLineTypeNominalCode struct {
	// The links' href
	AtHref *string `json:"@href,omitempty"`
	// The links' target type
	AtRel *string `json:"@rel,omitempty"`
	// The links' title
	AtTitle *string `json:"@title,omitempty"`
}

// CisLineTypeCisLineTypeTaxTreatmentEnum - The cis line types' tax treatment
type CisLineTypeCisLineTypeTaxTreatmentEnum string

const (
	CisLineTypeCisLineTypeTaxTreatmentEnumTaxable    CisLineTypeCisLineTypeTaxTreatmentEnum = "Taxable"
	CisLineTypeCisLineTypeTaxTreatmentEnumNonTaxable CisLineTypeCisLineTypeTaxTreatmentEnum = "NonTaxable"
	CisLineTypeCisLineTypeTaxTreatmentEnumNotional   CisLineTypeCisLineTypeTaxTreatmentEnum = "Notional"
	CisLineTypeCisLineTypeTaxTreatmentEnumMaterials  CisLineTypeCisLineTypeTaxTreatmentEnum = "Materials"
)

func (e *CisLineTypeCisLineTypeTaxTreatmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Taxable":
		fallthrough
	case "NonTaxable":
		fallthrough
	case "Notional":
		fallthrough
	case "Materials":
		*e = CisLineTypeCisLineTypeTaxTreatmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CisLineTypeCisLineTypeTaxTreatmentEnum: %s", s)
	}
}

type CisLineTypeCisLineType struct {
	// The cis line types' description
	Description *string `json:"Description,omitempty"`
	// The cis line types' line type
	LineType *string `json:"LineType,omitempty"`
	// The cis line types' nominal code
	NominalCode *CisLineTypeCisLineTypeNominalCode `json:"NominalCode,omitempty"`
	// The cis line types' tax treatment
	TaxTreatment *CisLineTypeCisLineTypeTaxTreatmentEnum `json:"TaxTreatment,omitempty"`
}

// CisLineType - The cis line type object.
type CisLineType struct {
	CisLineType *CisLineTypeCisLineType `json:"CisLineType,omitempty"`
}
