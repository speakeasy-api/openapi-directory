/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StreamingSession - A streaming session is a virtual workstation created using a particular launch profile.
 */
public class StreamingSession {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arn")
    public String arn;

    public StreamingSession withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automaticTerminationMode")
    public AutomaticTerminationModeEnum automaticTerminationMode;

    public StreamingSession withAutomaticTerminationMode(AutomaticTerminationModeEnum automaticTerminationMode) {
        this.automaticTerminationMode = automaticTerminationMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupMode")
    public SessionBackupModeEnum backupMode;

    public StreamingSession withBackupMode(SessionBackupModeEnum backupMode) {
        this.backupMode = backupMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public StreamingSession withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public String createdBy;

    public StreamingSession withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ec2InstanceType")
    public String ec2InstanceType;

    public StreamingSession withEc2InstanceType(String ec2InstanceType) {
        this.ec2InstanceType = ec2InstanceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchProfileId")
    public String launchProfileId;

    public StreamingSession withLaunchProfileId(String launchProfileId) {
        this.launchProfileId = launchProfileId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxBackupsToRetain")
    public Long maxBackupsToRetain;

    public StreamingSession withMaxBackupsToRetain(Long maxBackupsToRetain) {
        this.maxBackupsToRetain = maxBackupsToRetain;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownedBy")
    public String ownedBy;

    public StreamingSession withOwnedBy(String ownedBy) {
        this.ownedBy = ownedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionId")
    public String sessionId;

    public StreamingSession withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionPersistenceMode")
    public SessionPersistenceModeEnum sessionPersistenceMode;

    public StreamingSession withSessionPersistenceMode(SessionPersistenceModeEnum sessionPersistenceMode) {
        this.sessionPersistenceMode = sessionPersistenceMode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startedAt")
    public OffsetDateTime startedAt;

    public StreamingSession withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startedBy")
    public String startedBy;

    public StreamingSession withStartedBy(String startedBy) {
        this.startedBy = startedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startedFromBackupId")
    public String startedFromBackupId;

    public StreamingSession withStartedFromBackupId(String startedFromBackupId) {
        this.startedFromBackupId = startedFromBackupId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public StreamingSessionStateEnum state;

    public StreamingSession withState(StreamingSessionStateEnum state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    public StreamingSessionStatusCodeEnum statusCode;

    public StreamingSession withStatusCode(StreamingSessionStatusCodeEnum statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public StreamingSession withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stopAt")
    public OffsetDateTime stopAt;

    public StreamingSession withStopAt(OffsetDateTime stopAt) {
        this.stopAt = stopAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stoppedAt")
    public OffsetDateTime stoppedAt;

    public StreamingSession withStoppedAt(OffsetDateTime stoppedAt) {
        this.stoppedAt = stoppedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stoppedBy")
    public String stoppedBy;

    public StreamingSession withStoppedBy(String stoppedBy) {
        this.stoppedBy = stoppedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingImageId")
    public String streamingImageId;

    public StreamingSession withStreamingImageId(String streamingImageId) {
        this.streamingImageId = streamingImageId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public StreamingSession withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("terminateAt")
    public OffsetDateTime terminateAt;

    public StreamingSession withTerminateAt(OffsetDateTime terminateAt) {
        this.terminateAt = terminateAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public StreamingSession withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    public String updatedBy;

    public StreamingSession withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeConfiguration")
    public VolumeConfiguration volumeConfiguration;

    public StreamingSession withVolumeConfiguration(VolumeConfiguration volumeConfiguration) {
        this.volumeConfiguration = volumeConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeRetentionMode")
    public VolumeRetentionModeEnum volumeRetentionMode;

    public StreamingSession withVolumeRetentionMode(VolumeRetentionModeEnum volumeRetentionMode) {
        this.volumeRetentionMode = volumeRetentionMode;
        return this;
    }
    
    public StreamingSession(){}
}
