"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .v2 import V2
from sdk.models import operations

SERVERS = [
    "//www.ticketmaster.com/discovery/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Ticketmaster Discovery API allows you to search for events, attractions, or venues."""
    v2: V2

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.v2 = V2(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def find(self, request: operations.FindRequest) -> operations.FindResponse:
        r"""Attraction Search
        Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/discovery/v2/attractions'
        
        query_params = utils.get_query_params(operations.FindRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get(self, request: operations.GetRequest) -> operations.GetResponse:
        r"""Get Attraction Details
        Get details for a specific attraction using the unique identifier for the attraction.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRequest, base_url, '/discovery/v2/attractions/{id}', request)
        
        query_params = utils.get_query_params(operations.GetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_genre(self, request: operations.GetGenreRequest) -> operations.GetGenreResponse:
        r"""Get Genre Details
        Get details for a specific genre using its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGenreRequest, base_url, '/discovery/v2/classifications/genres/{id}', request)
        
        query_params = utils.get_query_params(operations.GetGenreRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGenreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_images(self, request: operations.GetImagesRequest) -> operations.GetImagesResponse:
        r"""Get Event Images
        Get images for a specific event using the unique identifier for the event.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetImagesRequest, base_url, '/discovery/v2/events/{id}/images', request)
        
        query_params = utils.get_query_params(operations.GetImagesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetImagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_segment(self, request: operations.GetSegmentRequest) -> operations.GetSegmentResponse:
        r"""Get Segment Details
        Get details for a specific segment using its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSegmentRequest, base_url, '/discovery/v2/classifications/segments/{id}', request)
        
        query_params = utils.get_query_params(operations.GetSegmentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_subgenre(self, request: operations.GetSubgenreRequest) -> operations.GetSubgenreResponse:
        r"""Get Sub-Genre Details
        Get details for a specific sub-genre using its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubgenreRequest, base_url, '/discovery/v2/classifications/subgenres/{id}', request)
        
        query_params = utils.get_query_params(operations.GetSubgenreRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubgenreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_classifications(self, request: operations.GetDiscoveryV2ClassificationsRequest) -> operations.GetDiscoveryV2ClassificationsResponse:
        r"""Classification Search
        Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/discovery/v2/classifications'
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2ClassificationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2ClassificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_classifications_id_(self, request: operations.GetDiscoveryV2ClassificationsIDRequest) -> operations.GetDiscoveryV2ClassificationsIDResponse:
        r"""Get Classification Details
        Get details for a specific segment, genre, or sub-genre using its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDiscoveryV2ClassificationsIDRequest, base_url, '/discovery/v2/classifications/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2ClassificationsIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2ClassificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_events(self, request: operations.GetDiscoveryV2EventsRequest) -> operations.GetDiscoveryV2EventsResponse:
        r"""Event Search
        Find events and filter your search by location, date, availability, and much more.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/discovery/v2/events'
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2EventsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2EventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_events_id_(self, request: operations.GetDiscoveryV2EventsIDRequest) -> operations.GetDiscoveryV2EventsIDResponse:
        r"""Get Event Details
        Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDiscoveryV2EventsIDRequest, base_url, '/discovery/v2/events/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2EventsIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2EventsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_venues(self, request: operations.GetDiscoveryV2VenuesRequest) -> operations.GetDiscoveryV2VenuesResponse:
        r"""Venue Search
        Find venues and filter your search by name, and much more.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/discovery/v2/venues'
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2VenuesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2VenuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_discovery_v2_venues_id_(self, request: operations.GetDiscoveryV2VenuesIDRequest) -> operations.GetDiscoveryV2VenuesIDResponse:
        r"""Get Venue Details
        Get details for a specific venue using the unique identifier for the venue.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDiscoveryV2VenuesIDRequest, base_url, '/discovery/v2/venues/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDiscoveryV2VenuesIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDiscoveryV2VenuesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    