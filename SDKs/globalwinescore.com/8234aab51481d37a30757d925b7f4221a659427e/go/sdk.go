// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.globalwinescore.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK -
//
// The GlobalWineScore API is designed as a RESTful API, providing several resources and methods depending on your usage plan.
//
// For further information please refer to <a href="https://www.globalwinescore.com/plans" target="_blank">our plans</a>.
//
// # Authentication
// The API uses token-based authentication.
// In order to authenticate your requests, you need to include a specific header in each of your requests:
//
// ```
// Authorization: Token {YOUR-API-TOKEN}
// ```
// The word <b>Token</b> must be written. Your requests must also use the <b>HTTPS</b> protocol.
//
// If you don't have a token yet, you need to apply for one [here](https://www.globalwinescore.com/api/).
//
// Your personal token can be found under the <a href="https://www.globalwinescore.com/account/api/" target="_blank">My account > API</a> section of the GlobalWineScore website
//
// # Format
// The API provides several rendering formats which you can control using the `Accept` header or `format` query parameter.
//
// - JSON (default): no header or `Accept: application/json`
// - XML: `Accept: application/xml`
// # Rate limiting
// For API requests, the rate limit allows for up to 10 requests per minute.
//
// # Error handling
//
// Whether a request succeeded is indicated by the HTTP status code. A 2xx status code indicates success, whereas a 4xx status code indicates failure.
//
// When a request fails, the response body is still JSON, but always contains a `detail` field with a description of the error, which you can inspect for debugging.
//
// For example, trying to access the API without proper authentication will return code 403 along with the message:
//
// `{"detail": "Authentication credentials were not provided."}`
//
// Found a bug ? send us an email at <a href="mailto:api@globalwinescore.com">api@globalwinescore.com</a>
//
// # Ordering
//
// At the moment, GlobalWineScores may be sorted by `date` and `score`. Use "-"
// to sort in descending order.
//
// # Continuous synchronization
//
// If you need to synchronize your database with our API, you can query our API using `?ordering=-date` to get the newest scores first, which means you won't have to crawl the whole catalog every time :-)
//
// # Quick search interface
// If you need to search our catalog (e.g. to align it with yours), we're providing you with a handy interface accessible here: <a href="https://api.globalwinescore.com/search/" target="_blank">https://api.globalwinescore.com/search/</a>
//
// You need to be logged in (email/password) to access this page, but other than that you can share it with anyone in your team and start searching right away !
//
// # Resources
//
// The details about available endpoints can be found below.
// You can click on each endpoint to find information about their parameters.
type SDK struct {
	GlobalWineScore *globalWineScore

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.GlobalWineScore = newGlobalWineScore(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
