"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class TravelTimeGetOverlayDirectionEnum(str, Enum):
    r"""The direction of travel."""
    AVERAGE = 'Average'
    FROM = 'From'
    TO = 'To'


@dataclasses.dataclass
class TravelTimeGetOverlayRequest:
    
    direction: TravelTimeGetOverlayDirectionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The direction of travel."""  
    height: int = dataclasses.field(metadata={'path_param': { 'field_name': 'height', 'style': 'simple', 'explode': False }})
    r"""The height of the requested overlay."""  
    map_center_lat: float = dataclasses.field(metadata={'path_param': { 'field_name': 'mapCenterLat', 'style': 'simple', 'explode': False }})
    r"""The map center latitude."""  
    map_center_lon: float = dataclasses.field(metadata={'path_param': { 'field_name': 'mapCenterLon', 'style': 'simple', 'explode': False }})
    r"""The map center longitude."""  
    mode_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'modeId', 'style': 'form', 'explode': True }})
    r"""The id of the mode."""  
    pin_lat: float = dataclasses.field(metadata={'path_param': { 'field_name': 'pinLat', 'style': 'simple', 'explode': False }})
    r"""The latitude of the pin."""  
    pin_lon: float = dataclasses.field(metadata={'path_param': { 'field_name': 'pinLon', 'style': 'simple', 'explode': False }})
    r"""The longitude of the pin."""  
    scenario_title: str = dataclasses.field(metadata={'query_param': { 'field_name': 'scenarioTitle', 'style': 'form', 'explode': True }})
    r"""The title of the scenario."""  
    time_of_day_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'timeOfDayId', 'style': 'form', 'explode': True }})
    r"""The id for the time of day (AM/INTER/PM)"""  
    travel_time_interval: int = dataclasses.field(metadata={'query_param': { 'field_name': 'travelTimeInterval', 'style': 'form', 'explode': True }})
    r"""The total minutes between the travel time bands"""  
    width: int = dataclasses.field(metadata={'path_param': { 'field_name': 'width', 'style': 'simple', 'explode': False }})
    r"""The width of the requested overlay."""  
    z: int = dataclasses.field(metadata={'path_param': { 'field_name': 'z', 'style': 'simple', 'explode': False }})
    r"""The zoom level."""  
    

@dataclasses.dataclass
class TravelTimeGetOverlayResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    system_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""OK"""  
    