"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Purchases:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidpublisher_purchases_products_acknowledge(self, request: operations.AndroidpublisherPurchasesProductsAcknowledgeRequest, security: operations.AndroidpublisherPurchasesProductsAcknowledgeSecurity) -> operations.AndroidpublisherPurchasesProductsAcknowledgeResponse:
        r"""Acknowledges a purchase of an inapp item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesProductsAcknowledgeRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_purchases_acknowledge_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesProductsAcknowledgeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesProductsAcknowledgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_products_consume(self, request: operations.AndroidpublisherPurchasesProductsConsumeRequest, security: operations.AndroidpublisherPurchasesProductsConsumeSecurity) -> operations.AndroidpublisherPurchasesProductsConsumeResponse:
        r"""Consumes a purchase for an inapp item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesProductsConsumeRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:consume', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesProductsConsumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesProductsConsumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_products_get(self, request: operations.AndroidpublisherPurchasesProductsGetRequest, security: operations.AndroidpublisherPurchasesProductsGetSecurity) -> operations.AndroidpublisherPurchasesProductsGetResponse:
        r"""Checks the purchase and consumption status of an inapp item."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesProductsGetRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesProductsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesProductsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductPurchase])
                res.product_purchase = out

        return res

    def androidpublisher_purchases_subscriptions_acknowledge(self, request: operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest, security: operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeResponse:
        r"""Acknowledges a subscription purchase."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subscription_purchases_acknowledge_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsAcknowledgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_subscriptions_cancel(self, request: operations.AndroidpublisherPurchasesSubscriptionsCancelRequest, security: operations.AndroidpublisherPurchasesSubscriptionsCancelSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsCancelResponse:
        r"""Cancels a user's subscription purchase. The subscription remains valid until its expiration time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsCancelRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_subscriptions_defer(self, request: operations.AndroidpublisherPurchasesSubscriptionsDeferRequest, security: operations.AndroidpublisherPurchasesSubscriptionsDeferSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsDeferResponse:
        r"""Defers a user's subscription purchase until a specified future expiration time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsDeferRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "subscription_purchases_defer_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsDeferRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsDeferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionPurchasesDeferResponse])
                res.subscription_purchases_defer_response = out

        return res

    def androidpublisher_purchases_subscriptions_get(self, request: operations.AndroidpublisherPurchasesSubscriptionsGetRequest, security: operations.AndroidpublisherPurchasesSubscriptionsGetSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsGetResponse:
        r"""Checks whether a user's subscription purchase is valid and returns its expiry time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsGetRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionPurchase])
                res.subscription_purchase = out

        return res

    def androidpublisher_purchases_subscriptions_refund(self, request: operations.AndroidpublisherPurchasesSubscriptionsRefundRequest, security: operations.AndroidpublisherPurchasesSubscriptionsRefundSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsRefundResponse:
        r"""Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsRefundRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsRefundRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_subscriptions_revoke(self, request: operations.AndroidpublisherPurchasesSubscriptionsRevokeRequest, security: operations.AndroidpublisherPurchasesSubscriptionsRevokeSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsRevokeResponse:
        r"""Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsRevokeRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsRevokeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsRevokeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidpublisher_purchases_subscriptionsv2_get(self, request: operations.AndroidpublisherPurchasesSubscriptionsv2GetRequest, security: operations.AndroidpublisherPurchasesSubscriptionsv2GetSecurity) -> operations.AndroidpublisherPurchasesSubscriptionsv2GetResponse:
        r"""Get metadata about a subscription"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesSubscriptionsv2GetRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesSubscriptionsv2GetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesSubscriptionsv2GetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionPurchaseV2])
                res.subscription_purchase_v2 = out

        return res

    def androidpublisher_purchases_voidedpurchases_list(self, request: operations.AndroidpublisherPurchasesVoidedpurchasesListRequest, security: operations.AndroidpublisherPurchasesVoidedpurchasesListSecurity) -> operations.AndroidpublisherPurchasesVoidedpurchasesListResponse:
        r"""Lists the purchases that were canceled, refunded or charged-back."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidpublisherPurchasesVoidedpurchasesListRequest, base_url, '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases', request)
        
        query_params = utils.get_query_params(operations.AndroidpublisherPurchasesVoidedpurchasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidpublisherPurchasesVoidedpurchasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VoidedPurchasesListResponse])
                res.voided_purchases_list_response = out

        return res

    