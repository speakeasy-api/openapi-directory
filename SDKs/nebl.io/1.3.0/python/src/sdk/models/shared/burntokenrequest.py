"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BurnTokenRequestBurn:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount of tokens to burn"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""Unique token id we are burning"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BurnTokenRequestTransfer:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address to transfer tokens to"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Number of tokens to send"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""ID of token we are sending"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BurnTokenRequest:
    r"""Object representing the token to be burned"""
    
    burn: list[BurnTokenRequestBurn] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('burn') }})
    r"""Array of objects representing tokens to be burned"""  
    fee: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fee') }})
    r"""Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)"""  
    from_: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Array of addresses to send the token from"""  
    transfer: Optional[list[BurnTokenRequestTransfer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfer'), 'exclude': lambda f: f is None }})  
    