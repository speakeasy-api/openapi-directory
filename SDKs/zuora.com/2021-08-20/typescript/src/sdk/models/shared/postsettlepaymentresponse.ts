/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
 *
 * @remarks
 *
 */
export enum POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum {
  Processing = "Processing",
  Yes = "Yes",
  No = "No",
  Error = "Error",
  Ignore = "Ignore",
}

/**
 * Container for the finance information related to the refund.
 *
 * @remarks
 *
 */
export class POSTSettlePaymentResponseFinanceInformation extends SpeakeasyBase {
  /**
   * The accounting code that maps to a bank account in your accounting system.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankAccountAccountingCode" })
  bankAccountAccountingCode?: string;

  /**
   * The type of the accounting code that maps to a bank account in your accounting system.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankAccountAccountingCodeType" })
  bankAccountAccountingCodeType?: string;

  /**
   * Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferredToAccounting" })
  transferredToAccounting?: POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum;

  /**
   * The accounting code for the unapplied payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unappliedPaymentAccountingCode" })
  unappliedPaymentAccountingCode?: string;

  /**
   * The type of the accounting code for the unapplied payment.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unappliedPaymentAccountingCodeType" })
  unappliedPaymentAccountingCodeType?: string;
}

/**
 * The status of the payment in the gateway; used for reconciliation.
 *
 * @remarks
 *
 */
export enum POSTSettlePaymentResponseGatewayStateEnum {
  MarkedForSubmission = "MarkedForSubmission",
  Submitted = "Submitted",
  Settled = "Settled",
  NotSubmitted = "NotSubmitted",
  FailedToSettle = "FailedToSettle",
}

/**
 * The type of the payment.
 *
 * @remarks
 *
 */
export enum POSTSettlePaymentResponseTypeEnum {
  External = "External",
  Electronic = "Electronic",
}

export class POSTSettlePaymentResponse extends SpeakeasyBase {
  /**
   * The ID of the customer account that the payment is for.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * The total amount of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * The applied amount of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliedAmount" })
  appliedAmount?: number;

  /**
   * The authorization transaction ID from the payment gateway.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authTransactionId" })
  authTransactionId?: string;

  /**
   * The first six digits of the credit card or debit card used for the payment, when applicable.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bankIdentificationNumber" })
  bankIdentificationNumber?: string;

  /**
   * The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  cancelledOn?: Date;

  /**
   * Comments about the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The ID of the Zuora user who created the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdById" })
  createdById?: string;

  /**
   * The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditBalanceAmount" })
  creditBalanceAmount?: number;

  /**
   * A currency defined in the web-based UI administrative settings.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * Container for the finance information related to the refund.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "financeInformation" })
  @Type(() => POSTSettlePaymentResponseFinanceInformation)
  financeInformation?: POSTSettlePaymentResponseFinanceInformation;

  /**
   * The ID of the gateway instance that processes the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayId" })
  gatewayId?: string;

  /**
   * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayOrderId" })
  gatewayOrderId?: string;

  /**
   * The message returned from the payment gateway for the payment. This message is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayResponse" })
  gatewayResponse?: string;

  /**
   * The code returned from the payment gateway for the payment. This code is gateway-dependent.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayResponseCode" })
  gatewayResponseCode?: string;

  /**
   * The status of the payment in the gateway; used for reconciliation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayState" })
  gatewayState?: POSTSettlePaymentResponseGatewayStateEnum;

  /**
   * The ID of the payment chargeback.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "markedForSubmissionOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  markedForSubmissionOn?: Date;

  /**
   * The unique identification number of the payment. For example, P-00000001.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  /**
   * The unique ID of the payment method that the customer used to make the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMethodId" })
  paymentMethodId?: string;

  /**
   * The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentMethodSnapshotId" })
  paymentMethodSnapshotId?: string;

  /**
   * The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referenceId" })
  referenceId?: string;

  /**
   * The amount of the payment that is refunded.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refundAmount" })
  refundAmount?: number;

  /**
   * The transaction ID returned by the payment gateway if there is an additional transaction for the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondPaymentReferenceId" })
  secondPaymentReferenceId?: string;

  /**
   * The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  settledOn?: Date;

  /**
   * A payment gateway-specific field that maps Zuora to other gateways.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softDescriptor" })
  softDescriptor?: string;

  /**
   * A payment gateway-specific field that maps Zuora to other gateways.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softDescriptorPhone" })
  softDescriptorPhone?: string;

  /**
   * The status of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submittedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  submittedOn?: Date;

  /**
   * Indicates if the request is processed successfully.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * The type of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: POSTSettlePaymentResponseTypeEnum;

  /**
   * The unapplied amount of the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unappliedAmount" })
  unappliedAmount?: number;

  /**
   * The ID of the Zuora user who last updated the payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedById" })
  updatedById?: string;

  /**
   * The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
