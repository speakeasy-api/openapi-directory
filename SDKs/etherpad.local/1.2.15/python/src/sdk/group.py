"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Group:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_group_if_not_exists_for_using_get(self, request: operations.CreateGroupIfNotExistsForUsingGETRequest) -> operations.CreateGroupIfNotExistsForUsingGETResponse:
        r"""this functions helps you to map your application group ids to Etherpad group ids"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroupIfNotExistsFor'
        
        query_params = utils.get_query_params(operations.CreateGroupIfNotExistsForUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupIfNotExistsForUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingGET200ApplicationJSON])
                res.create_group_if_not_exists_for_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingGET400ApplicationJSON])
                res.create_group_if_not_exists_for_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingGET401ApplicationJSON])
                res.create_group_if_not_exists_for_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingGET500ApplicationJSON])
                res.create_group_if_not_exists_for_using_get_500_application_json_object = out

        return res

    def create_group_if_not_exists_for_using_post(self, request: operations.CreateGroupIfNotExistsForUsingPOSTRequest) -> operations.CreateGroupIfNotExistsForUsingPOSTResponse:
        r"""this functions helps you to map your application group ids to Etherpad group ids"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroupIfNotExistsFor'
        
        query_params = utils.get_query_params(operations.CreateGroupIfNotExistsForUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupIfNotExistsForUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingPOST200ApplicationJSON])
                res.create_group_if_not_exists_for_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingPOST400ApplicationJSON])
                res.create_group_if_not_exists_for_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingPOST401ApplicationJSON])
                res.create_group_if_not_exists_for_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupIfNotExistsForUsingPOST500ApplicationJSON])
                res.create_group_if_not_exists_for_using_post_500_application_json_object = out

        return res

    def create_group_pad_using_get(self, request: operations.CreateGroupPadUsingGETRequest) -> operations.CreateGroupPadUsingGETResponse:
        r"""creates a new pad in this group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroupPad'
        
        query_params = utils.get_query_params(operations.CreateGroupPadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupPadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingGET200ApplicationJSON])
                res.create_group_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingGET400ApplicationJSON])
                res.create_group_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingGET401ApplicationJSON])
                res.create_group_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingGET500ApplicationJSON])
                res.create_group_pad_using_get_500_application_json_object = out

        return res

    def create_group_pad_using_post(self, request: operations.CreateGroupPadUsingPOSTRequest) -> operations.CreateGroupPadUsingPOSTResponse:
        r"""creates a new pad in this group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroupPad'
        
        query_params = utils.get_query_params(operations.CreateGroupPadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupPadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingPOST200ApplicationJSON])
                res.create_group_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingPOST400ApplicationJSON])
                res.create_group_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingPOST401ApplicationJSON])
                res.create_group_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupPadUsingPOST500ApplicationJSON])
                res.create_group_pad_using_post_500_application_json_object = out

        return res

    def create_group_using_get(self) -> operations.CreateGroupUsingGETResponse:
        r"""creates a new group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroup'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingGET200ApplicationJSON])
                res.create_group_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingGET400ApplicationJSON])
                res.create_group_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingGET401ApplicationJSON])
                res.create_group_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingGET500ApplicationJSON])
                res.create_group_using_get_500_application_json_object = out

        return res

    def create_group_using_post(self) -> operations.CreateGroupUsingPOSTResponse:
        r"""creates a new group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createGroup'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingPOST200ApplicationJSON])
                res.create_group_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingPOST400ApplicationJSON])
                res.create_group_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingPOST401ApplicationJSON])
                res.create_group_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroupUsingPOST500ApplicationJSON])
                res.create_group_using_post_500_application_json_object = out

        return res

    def delete_group_using_get(self, request: operations.DeleteGroupUsingGETRequest) -> operations.DeleteGroupUsingGETResponse:
        r"""deletes a group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteGroup'
        
        query_params = utils.get_query_params(operations.DeleteGroupUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingGET200ApplicationJSON])
                res.delete_group_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingGET400ApplicationJSON])
                res.delete_group_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingGET401ApplicationJSON])
                res.delete_group_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingGET500ApplicationJSON])
                res.delete_group_using_get_500_application_json_object = out

        return res

    def delete_group_using_post(self, request: operations.DeleteGroupUsingPOSTRequest) -> operations.DeleteGroupUsingPOSTResponse:
        r"""deletes a group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteGroup'
        
        query_params = utils.get_query_params(operations.DeleteGroupUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingPOST200ApplicationJSON])
                res.delete_group_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingPOST400ApplicationJSON])
                res.delete_group_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingPOST401ApplicationJSON])
                res.delete_group_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroupUsingPOST500ApplicationJSON])
                res.delete_group_using_post_500_application_json_object = out

        return res

    def list_all_groups_using_get(self) -> operations.ListAllGroupsUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAllGroups'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAllGroupsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingGET200ApplicationJSON])
                res.list_all_groups_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingGET400ApplicationJSON])
                res.list_all_groups_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingGET401ApplicationJSON])
                res.list_all_groups_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingGET500ApplicationJSON])
                res.list_all_groups_using_get_500_application_json_object = out

        return res

    def list_all_groups_using_post(self) -> operations.ListAllGroupsUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAllGroups'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAllGroupsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingPOST200ApplicationJSON])
                res.list_all_groups_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingPOST400ApplicationJSON])
                res.list_all_groups_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingPOST401ApplicationJSON])
                res.list_all_groups_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllGroupsUsingPOST500ApplicationJSON])
                res.list_all_groups_using_post_500_application_json_object = out

        return res

    def list_pads_using_get(self, request: operations.ListPadsUsingGETRequest) -> operations.ListPadsUsingGETResponse:
        r"""returns all pads of this group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listPads'
        
        query_params = utils.get_query_params(operations.ListPadsUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPadsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingGET200ApplicationJSON])
                res.list_pads_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingGET400ApplicationJSON])
                res.list_pads_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingGET401ApplicationJSON])
                res.list_pads_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingGET500ApplicationJSON])
                res.list_pads_using_get_500_application_json_object = out

        return res

    def list_pads_using_post(self, request: operations.ListPadsUsingPOSTRequest) -> operations.ListPadsUsingPOSTResponse:
        r"""returns all pads of this group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listPads'
        
        query_params = utils.get_query_params(operations.ListPadsUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPadsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingPOST200ApplicationJSON])
                res.list_pads_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingPOST400ApplicationJSON])
                res.list_pads_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingPOST401ApplicationJSON])
                res.list_pads_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsUsingPOST500ApplicationJSON])
                res.list_pads_using_post_500_application_json_object = out

        return res

    def list_sessions_of_group_using_get(self, request: operations.ListSessionsOfGroupUsingGETRequest) -> operations.ListSessionsOfGroupUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSessionsOfGroup'
        
        query_params = utils.get_query_params(operations.ListSessionsOfGroupUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSessionsOfGroupUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingGET200ApplicationJSON])
                res.list_sessions_of_group_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingGET400ApplicationJSON])
                res.list_sessions_of_group_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingGET401ApplicationJSON])
                res.list_sessions_of_group_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingGET500ApplicationJSON])
                res.list_sessions_of_group_using_get_500_application_json_object = out

        return res

    def list_sessions_of_group_using_post(self, request: operations.ListSessionsOfGroupUsingPOSTRequest) -> operations.ListSessionsOfGroupUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSessionsOfGroup'
        
        query_params = utils.get_query_params(operations.ListSessionsOfGroupUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSessionsOfGroupUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingPOST200ApplicationJSON])
                res.list_sessions_of_group_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingPOST400ApplicationJSON])
                res.list_sessions_of_group_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingPOST401ApplicationJSON])
                res.list_sessions_of_group_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfGroupUsingPOST500ApplicationJSON])
                res.list_sessions_of_group_using_post_500_application_json_object = out

        return res

    