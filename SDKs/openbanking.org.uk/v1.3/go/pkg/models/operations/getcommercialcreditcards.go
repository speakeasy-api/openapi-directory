// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetCommercialCreditCardsHeaders struct {
	// Used for conditional request, to retrieve data only if modified since a given date
	IfModifiedSince *string `header:"style=simple,explode=false,name=If-Modified-Since"`
	// Used for conditional request, to retrieve data only if the given Etag value does not match
	IfNoneMatch *string `header:"style=simple,explode=false,name=If-None-Match"`
}

type GetCommercialCreditCardsRequest struct {
	Headers GetCommercialCreditCardsHeaders
}

// GetCommercialCreditCardsErrorObject - A standard error response.
type GetCommercialCreditCardsErrorObject struct {
	// Further details describing the error
	Description string `json:"description"`
	// This corresponds to the HTTP status code
	Status string `json:"status"`
	// A short title of the type of error
	Title string `json:"title"`
}

type GetCommercialCreditCards503ErrorObjectDescriptionEnum string

const (
	GetCommercialCreditCards503ErrorObjectDescriptionEnumTheServiceIsTemporarilyUnavailable GetCommercialCreditCards503ErrorObjectDescriptionEnum = "The service is temporarily unavailable."
)

func (e *GetCommercialCreditCards503ErrorObjectDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "The service is temporarily unavailable.":
		*e = GetCommercialCreditCards503ErrorObjectDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards503ErrorObjectDescriptionEnum: %s", s)
	}
}

type GetCommercialCreditCards503ErrorObjectStatusEnum string

const (
	GetCommercialCreditCards503ErrorObjectStatusEnumFiveHundredAndThree GetCommercialCreditCards503ErrorObjectStatusEnum = "503"
)

func (e *GetCommercialCreditCards503ErrorObjectStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "503":
		*e = GetCommercialCreditCards503ErrorObjectStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards503ErrorObjectStatusEnum: %s", s)
	}
}

type GetCommercialCreditCards503ErrorObjectTitleEnum string

const (
	GetCommercialCreditCards503ErrorObjectTitleEnumServiceTemporarilyUnavailable GetCommercialCreditCards503ErrorObjectTitleEnum = "Service temporarily unavailable"
)

func (e *GetCommercialCreditCards503ErrorObjectTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Service temporarily unavailable":
		*e = GetCommercialCreditCards503ErrorObjectTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards503ErrorObjectTitleEnum: %s", s)
	}
}

// GetCommercialCreditCards503ErrorObject - The service is temporarily unavailable.
type GetCommercialCreditCards503ErrorObject struct {
	Description GetCommercialCreditCards503ErrorObjectDescriptionEnum `json:"description"`
	Status      GetCommercialCreditCards503ErrorObjectStatusEnum      `json:"status"`
	Title       GetCommercialCreditCards503ErrorObjectTitleEnum       `json:"title"`
}

type GetCommercialCreditCards500ErrorObjectDescriptionEnum string

const (
	GetCommercialCreditCards500ErrorObjectDescriptionEnumAnErrorOccurredOnTheServerNoFurtherInformationIsAvailable GetCommercialCreditCards500ErrorObjectDescriptionEnum = "An error occurred on the server. No further information is available."
)

func (e *GetCommercialCreditCards500ErrorObjectDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "An error occurred on the server. No further information is available.":
		*e = GetCommercialCreditCards500ErrorObjectDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards500ErrorObjectDescriptionEnum: %s", s)
	}
}

type GetCommercialCreditCards500ErrorObjectStatusEnum string

const (
	GetCommercialCreditCards500ErrorObjectStatusEnumFiveHundred GetCommercialCreditCards500ErrorObjectStatusEnum = "500"
)

func (e *GetCommercialCreditCards500ErrorObjectStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "500":
		*e = GetCommercialCreditCards500ErrorObjectStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards500ErrorObjectStatusEnum: %s", s)
	}
}

type GetCommercialCreditCards500ErrorObjectTitleEnum string

const (
	GetCommercialCreditCards500ErrorObjectTitleEnumInternalServerError GetCommercialCreditCards500ErrorObjectTitleEnum = "Internal server error"
)

func (e *GetCommercialCreditCards500ErrorObjectTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = GetCommercialCreditCards500ErrorObjectTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards500ErrorObjectTitleEnum: %s", s)
	}
}

// GetCommercialCreditCards500ErrorObject - An error occurred on the server. No further information is available.
type GetCommercialCreditCards500ErrorObject struct {
	Description GetCommercialCreditCards500ErrorObjectDescriptionEnum `json:"description"`
	Status      GetCommercialCreditCards500ErrorObjectStatusEnum      `json:"status"`
	Title       GetCommercialCreditCards500ErrorObjectTitleEnum       `json:"title"`
}

type GetCommercialCreditCards429ErrorObjectDescriptionEnum string

const (
	GetCommercialCreditCards429ErrorObjectDescriptionEnumYouHaveRequestedThisResourceTooOftenSlowDown GetCommercialCreditCards429ErrorObjectDescriptionEnum = "You have requested this resource too often. Slow down."
)

func (e *GetCommercialCreditCards429ErrorObjectDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "You have requested this resource too often. Slow down.":
		*e = GetCommercialCreditCards429ErrorObjectDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards429ErrorObjectDescriptionEnum: %s", s)
	}
}

type GetCommercialCreditCards429ErrorObjectStatusEnum string

const (
	GetCommercialCreditCards429ErrorObjectStatusEnumFourHundredAndTwentyNine GetCommercialCreditCards429ErrorObjectStatusEnum = "429"
)

func (e *GetCommercialCreditCards429ErrorObjectStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "429":
		*e = GetCommercialCreditCards429ErrorObjectStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards429ErrorObjectStatusEnum: %s", s)
	}
}

type GetCommercialCreditCards429ErrorObjectTitleEnum string

const (
	GetCommercialCreditCards429ErrorObjectTitleEnumTooManyRequests GetCommercialCreditCards429ErrorObjectTitleEnum = "Too many requests"
)

func (e *GetCommercialCreditCards429ErrorObjectTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Too many requests":
		*e = GetCommercialCreditCards429ErrorObjectTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards429ErrorObjectTitleEnum: %s", s)
	}
}

// GetCommercialCreditCards429ErrorObject - You have requested this resource too often. Slow down.
type GetCommercialCreditCards429ErrorObject struct {
	Description GetCommercialCreditCards429ErrorObjectDescriptionEnum `json:"description"`
	Status      GetCommercialCreditCards429ErrorObjectStatusEnum      `json:"status"`
	Title       GetCommercialCreditCards429ErrorObjectTitleEnum       `json:"title"`
}

type GetCommercialCreditCards408ErrorObjectDescriptionEnum string

const (
	GetCommercialCreditCards408ErrorObjectDescriptionEnumYourClientHasFailedToSubmitARequestAndATimeoutHasOccurred GetCommercialCreditCards408ErrorObjectDescriptionEnum = "Your client has failed to submit a request, and a timeout has occurred."
)

func (e *GetCommercialCreditCards408ErrorObjectDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Your client has failed to submit a request, and a timeout has occurred.":
		*e = GetCommercialCreditCards408ErrorObjectDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards408ErrorObjectDescriptionEnum: %s", s)
	}
}

type GetCommercialCreditCards408ErrorObjectStatusEnum string

const (
	GetCommercialCreditCards408ErrorObjectStatusEnumFourHundredAndEight GetCommercialCreditCards408ErrorObjectStatusEnum = "408"
)

func (e *GetCommercialCreditCards408ErrorObjectStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "408":
		*e = GetCommercialCreditCards408ErrorObjectStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards408ErrorObjectStatusEnum: %s", s)
	}
}

type GetCommercialCreditCards408ErrorObjectTitleEnum string

const (
	GetCommercialCreditCards408ErrorObjectTitleEnumClientTimeout GetCommercialCreditCards408ErrorObjectTitleEnum = "Client timeout"
)

func (e *GetCommercialCreditCards408ErrorObjectTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Client timeout":
		*e = GetCommercialCreditCards408ErrorObjectTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards408ErrorObjectTitleEnum: %s", s)
	}
}

// GetCommercialCreditCards408ErrorObject - Your client has failed to submit a request, and a timeout has occurred.
type GetCommercialCreditCards408ErrorObject struct {
	Description GetCommercialCreditCards408ErrorObjectDescriptionEnum `json:"description"`
	Status      GetCommercialCreditCards408ErrorObjectStatusEnum      `json:"status"`
	Title       GetCommercialCreditCards408ErrorObjectTitleEnum       `json:"title"`
}

type GetCommercialCreditCards400ErrorObjectDescriptionEnum string

const (
	GetCommercialCreditCards400ErrorObjectDescriptionEnumYouHaveSentARequestWhichCouldNotBeUnderstood GetCommercialCreditCards400ErrorObjectDescriptionEnum = "You have sent a request which could not be understood."
)

func (e *GetCommercialCreditCards400ErrorObjectDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "You have sent a request which could not be understood.":
		*e = GetCommercialCreditCards400ErrorObjectDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards400ErrorObjectDescriptionEnum: %s", s)
	}
}

type GetCommercialCreditCards400ErrorObjectStatusEnum string

const (
	GetCommercialCreditCards400ErrorObjectStatusEnumFourHundred GetCommercialCreditCards400ErrorObjectStatusEnum = "400"
)

func (e *GetCommercialCreditCards400ErrorObjectStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = GetCommercialCreditCards400ErrorObjectStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards400ErrorObjectStatusEnum: %s", s)
	}
}

type GetCommercialCreditCards400ErrorObjectTitleEnum string

const (
	GetCommercialCreditCards400ErrorObjectTitleEnumBadRequest GetCommercialCreditCards400ErrorObjectTitleEnum = "Bad request"
)

func (e *GetCommercialCreditCards400ErrorObjectTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Bad request":
		*e = GetCommercialCreditCards400ErrorObjectTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards400ErrorObjectTitleEnum: %s", s)
	}
}

// GetCommercialCreditCards400ErrorObject - You have sent a request which could not be understood.
type GetCommercialCreditCards400ErrorObject struct {
	Description GetCommercialCreditCards400ErrorObjectDescriptionEnum `json:"description"`
	Status      GetCommercialCreditCards400ErrorObjectStatusEnum      `json:"status"`
	Title       GetCommercialCreditCards400ErrorObjectTitleEnum       `json:"title"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum - Criteria that is required in order to be eligible for the Benefit
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumCashDeposit    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "CashDeposit"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumDeposit        GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "Deposit"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumDirectDebit    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "DirectDebit"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumInitialDeposit GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "InitialDeposit"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumInternetLogon  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "InternetLogon"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumMobileLogon    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "MobileLogon"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnumRegularDeposit GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum = "RegularDeposit"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CashDeposit":
		fallthrough
	case "Deposit":
		fallthrough
	case "DirectDebit":
		fallthrough
	case "InitialDeposit":
		fallthrough
	case "InternetLogon":
		fallthrough
	case "MobileLogon":
		fallthrough
	case "RegularDeposit":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetail - Benefit detail
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetail struct {
	// A textual explanation of what the benefit is
	BenefitDescription *string `json:"BenefitDescription,omitempty"`
	// Unique benefit identifier per organisation
	BenefitID *string `json:"BenefitID,omitempty"`
	// The name of the benefit
	BenefitName *string `json:"BenefitName,omitempty"`
	// Type that represents the nature of the benefit
	BenefitType *string `json:"BenefitType,omitempty"`
	// The value or values permissible for a specific benefit for an individual product representing a product characteristic
	BenefitValue *string `json:"BenefitValue,omitempty"`
	// Counter for the criteria (e.g. number of DD)
	Counter      *int64                                                                                                                                    `json:"Counter,omitempty"`
	CriteriaType []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum `json:"CriteriaType,omitempty"`
	// Is the benefit part of the default account
	DefaultToAccounts *bool `json:"DefaultToAccounts,omitempty"`
	// Maximum amount for the criteria
	MaximumCriteria *string `json:"MaximumCriteria,omitempty"`
	// Minimum amount for the criteria
	MinimumCriteria *string `json:"MinimumCriteria,omitempty"`
	// If the benefit is temporal the end date is when the benefit is no longer applicable
	PromotionEndDate *string `json:"PromotionEndDate,omitempty"`
	// If the benefit is temporal the start date is when the benefit comes into effect
	PromotionStartDate *string `json:"PromotionStartDate,omitempty"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItem - Benefit Item
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItem struct {
	BenefitDetail []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetail `json:"BenefitDetail,omitempty"`
	// Date of the change if it refers to future terms
	DateOfChange *string `json:"DateOfChange,omitempty"`
	// Describes the length if only a duration is given instead of a date in days
	LengthPromotionalInDays *int64 `json:"LengthPromotionalInDays,omitempty"`
	// Describes the start date
	StartPromotionOrFutureTerms *string `json:"StartPromotionOrFutureTerms,omitempty"`
	// Describes the end date
	StopPromotionOrFutureTerms *string `json:"StopPromotionOrFutureTerms,omitempty"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum - Benefit Subtype Code
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnumFutureMultipleTerms GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum = "FutureMultipleTerms"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnumPromotional         GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum = "Promotional"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnumRegular             GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum = "Regular"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FutureMultipleTerms":
		fallthrough
	case "Promotional":
		fallthrough
	case "Regular":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroup - Benefit Interest Group
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroup struct {
	// Benefit Item
	BenefitItem GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItem `json:"BenefitItem"`
	// Benefit Subtype Code
	BenefitSubType *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum `json:"BenefitSubType,omitempty"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefits - Benefit
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefits struct {
	// Describe  one or more benefits if they exist
	Benefit      bool                                                                                              `json:"Benefit"`
	BenefitGroup []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroup `json:"BenefitGroup,omitempty"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum - CCC Subtype Code
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnumFutureMultipleTerms GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum = "FutureMultipleTerms"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnumPromotional         GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum = "Promotional"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnumRegular             GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum = "Regular"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FutureMultipleTerms":
		fallthrough
	case "Promotional":
		fallthrough
	case "Regular":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum - The period used to define the specific interest rate for balance transfers
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnumAnnual  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum = "Annual"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnumMonthly GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum = "Monthly"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Annual":
		fallthrough
	case "Monthly":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum - Card Scheme Code
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnumCashcard         GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum = "Cashcard"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnumCreditMastercard GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum = "CreditMastercard"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnumCreditVisa       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum = "CreditVisa"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Cashcard":
		fallthrough
	case "CreditMastercard":
		fallthrough
	case "CreditVisa":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum - Repayment frequency
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumDaily       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Daily"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumFlexible    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Flexible"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumFortnightly GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Fortnightly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumHalfYearly  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "HalfYearly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumMonthly     GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Monthly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumQuarterly   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Quarterly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumWeekly      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Weekly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnumYearly      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = "Yearly"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Daily":
		fallthrough
	case "Flexible":
		fallthrough
	case "Fortnightly":
		fallthrough
	case "HalfYearly":
		fallthrough
	case "Monthly":
		fallthrough
	case "Quarterly":
		fallthrough
	case "Weekly":
		fallthrough
	case "Yearly":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItem - Commercial Credit Card Item
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItem struct {
	// Annual Percentage Rate
	APRRate string `json:"APRRate"`
	// The ability to set separate limts on different cards in one account
	AbilityToSetIndividualLimits *bool `json:"AbilityToSetIndividualLimits,omitempty"`
	// Describes whether the account have access to an online tool for reprting on expenditure
	AccessToOnlineDataReportingTool bool `json:"AccessToOnlineDataReportingTool"`
	// Allocation rules for repayment
	AllocationofRepayment *string `json:"AllocationofRepayment,omitempty"`
	// Details on annual account fee, such as non payable when there is a turnover above a certain sum
	AnnualAccountFeeType *string `json:"AnnualAccountFeeType,omitempty"`
	// Standard fee on the card
	AnnualFeeAmount string `json:"AnnualFeeAmount"`
	// The period used to define the specific interest rate for balance transfers
	BalanceTransferInterestRatePeriod *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum `json:"BalanceTransferInterestRatePeriod,omitempty"`
	// Balance transfer rate
	BalanceTransferRate *string `json:"BalanceTransferRate,omitempty"`
	// Card Scheme Code
	CardScheme GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum `json:"CardScheme"`
	// Cash advance rate
	CashAdvanceRate string `json:"CashAdvanceRate"`
	// Describes whether cash withdrawals are allowed
	CashWithdrawalsAllowed bool `json:"CashWithdrawalsAllowed"`
	// Percent of cashback on amount spend
	CashbackPercent *string `json:"CashbackPercent,omitempty"`
	// Percentage fee on convenience cheques
	ChequeFeePercent *string `json:"ChequeFeePercent,omitempty"`
	// Describes whether the card account allow convenience cheques
	ConvenienceCheque bool `json:"ConvenienceCheque"`
	// Date of the change if it refers to future terms
	DateOfChange *string `json:"DateOfChange,omitempty"`
	// Describes how many interest free days are given if the card is fully paid at each term
	DaysInterestFreeCreditIfPaymentFull int64 `json:"DaysInterestFreeCreditIfPaymentFull"`
	// The margin added, by certain card issuers, to the scheme rate in order to arrive at the exchange rate qouted as the reference exchange rate to the cardholder
	ExchangeRateAdjustment string `json:"ExchangeRateAdjustment"`
	// Percentage fee on a convenince cheques
	FeesOnCheque *string `json:"FeesOnCheque,omitempty"`
	// Additional card fee applied to sterling cash withdrawal made abroad
	ForeignCashFee *string `json:"ForeignCashFee,omitempty"`
	// Additional card fee rate applied to sterling cash withdrawal made abroad
	ForeignCashFeeRate *string `json:"ForeignCashFeeRate,omitempty"`
	// Additional card fee applied to sterling retail transactions made abroad
	ForeignPurchaseFee *string `json:"ForeignPurchaseFee,omitempty"`
	// Additional card fee rate applied to sterling retail transactions made abroad
	ForeignPurchaseFeeRate *string `json:"ForeignPurchaseFeeRate,omitempty"`
	// Amount payable for issuing an emergency card
	IssuingEmergencyCardsFees string `json:"IssuingEmergencyCardsFees"`
	// Describes the length if only a duration is given instead of a date
	LengthPromotionalInDays *int64 `json:"LengthPromotionalInDays,omitempty"`
	// The maximum numbers of cards per account
	MaximumNumberOfCardsPermitted *int64 `json:"MaximumNumberOfCardsPermitted,omitempty"`
	// Minimum £500, maximum subject to status
	MinimumCreditLimit string `json:"MinimumCreditLimit"`
	// The minimum lending available
	MinimumLendingAmount *string `json:"MinimumLendingAmount,omitempty"`
	// Minimum repayment amount
	MinimumRepaymentAmount *string `json:"MinimumRepaymentAmount,omitempty"`
	// Minimum repayment as percentage
	MinimumRepaymentPercentage *string `json:"MinimumRepaymentPercentage,omitempty"`
	// An additional fee applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
	NonSterlingCashFee *string `json:"NonSterlingCashFee,omitempty"`
	// An additional fee rate applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
	NonSterlingCashFeeRate *string `json:"NonSterlingCashFeeRate,omitempty"`
	// An additional fee applied to certain card retail transactions
	NonSterlingPurchaseFee *string `json:"NonSterlingPurchaseFee,omitempty"`
	// An additional fee rate applied to certain card retail transactions
	NonSterlingPurchaseFeeRate *string `json:"NonSterlingPurchaseFeeRate,omitempty"`
	// A fee applied to all non-Sterling card transactions
	NonSterlingTransactionFee *string `json:"NonSterlingTransactionFee,omitempty"`
	// A fee rate applied to all non-Sterling card transactions
	NonSterlingTransactionFeeRate *string `json:"NonSterlingTransactionFeeRate,omitempty"`
	// Fee applicable if the card was credited over its limit
	OverLimitFee *string `json:"OverLimitFee,omitempty"`
	// How many days after statement is the payment expected
	PaymentDaysAfterStatement int64 `json:"PaymentDaysAfterStatement"`
	// Any payment network fee applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
	PaymentSchemeExchangeFee *string `json:"PaymentSchemeExchangeFee,omitempty"`
	// Any payment network fee rate applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
	PaymentSchemeExchangeFeeRate *string `json:"PaymentSchemeExchangeFeeRate,omitempty"`
	// The base exchange rate used in settlement of the transaction between issuer and scheme
	PaymentSchemeExchangeRate *string `json:"PaymentSchemeExchangeRate,omitempty"`
	// Purchase rate
	PurchaseRate string `json:"PurchaseRate"`
	// Repayment frequency
	RepaymentFrequency GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum `json:"RepaymentFrequency"`
	// Additional notes
	RepaymentNotes *string `json:"RepaymentNotes,omitempty"`
	// Describes the start date
	StartPromotionOrFutureTerms *string `json:"StartPromotionOrFutureTerms,omitempty"`
	// Describes whether there is a statement at account level
	StatementAtAccountLevel bool `json:"StatementAtAccountLevel"`
	// Describes whether there is a statement at card level
	StatementAtPersonalLevel bool `json:"StatementAtPersonalLevel"`
	// Describes the end date
	StopPromotionOrFutureTerms *string `json:"StopPromotionOrFutureTerms,omitempty"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetails - Commercial Credit Card Group
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetails struct {
	// CCC Subtype Code
	CCSubType GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum `json:"CCSubType"`
	// Commercial Credit Card Item
	CommercialCreditCardItem GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItem `json:"CommercialCreditCardItem"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum - Eligibility type
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumAnyBusinessCustomer       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "AnyBusinessCustomer"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumBusinessOnly              GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "BusinessOnly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumCreditCard                GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "CreditCard"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumCreditScoring             GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "CreditScoring"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumEmailAddress              GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "EmailAddress"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumExistingCustomers         GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "ExistingCustomers"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumIDAndV                    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "IdAndV"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumMortgage                  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "Mortgage"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNoArrearsOnLoan           GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NoArrearsOnLoan"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNoCustomerInArrears       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NoCustomerInArrears"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNoOverOverdraftThirtyDays GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NoOverOverdraftThirtyDays"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNoSoleUkAccountOrBankrupt GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NoSoleUkAccountOrBankrupt"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNtb                       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NTB"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumNtbBusiness               GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "NTBBusiness"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumSoleStudentAccount        GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "SoleStudentAccount"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumSoleUkAccount             GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "SoleUkAccount"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumStudentsOnly              GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "StudentsOnly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumTwoMonthsOfCourseStart    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "TwoMonthsOfCourseStart"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnumUcasFulltimeTwoYears      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum = "UCASFulltimeTwoYears"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AnyBusinessCustomer":
		fallthrough
	case "BusinessOnly":
		fallthrough
	case "CreditCard":
		fallthrough
	case "CreditScoring":
		fallthrough
	case "EmailAddress":
		fallthrough
	case "ExistingCustomers":
		fallthrough
	case "IdAndV":
		fallthrough
	case "Mortgage":
		fallthrough
	case "NoArrearsOnLoan":
		fallthrough
	case "NoCustomerInArrears":
		fallthrough
	case "NoOverOverdraftThirtyDays":
		fallthrough
	case "NoSoleUkAccountOrBankrupt":
		fallthrough
	case "NTB":
		fallthrough
	case "NTBBusiness":
		fallthrough
	case "SoleStudentAccount":
		fallthrough
	case "SoleUkAccount":
		fallthrough
	case "StudentsOnly":
		fallthrough
	case "TwoMonthsOfCourseStart":
		fallthrough
	case "UCASFulltimeTwoYears":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum - Specific eligibility for marketing
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnumExistingCustomers GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum = "ExistingCustomers"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnumNewCustomersOnly  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum = "NewCustomersOnly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnumSwitchersOnly     GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum = "SwitchersOnly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnumStartUp           GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum = "StartUp"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ExistingCustomers":
		fallthrough
	case "NewCustomersOnly":
		fallthrough
	case "SwitchersOnly":
		fallthrough
	case "StartUp":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum - The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumAcademicTerm GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "AcademicTerm"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumHalfYearly   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "HalfYearly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumMonthly      GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "Monthly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumQuarterly    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "Quarterly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumWeekly       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "Weekly"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnumYearly       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum = "Yearly"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AcademicTerm":
		fallthrough
	case "HalfYearly":
		fallthrough
	case "Monthly":
		fallthrough
	case "Quarterly":
		fallthrough
	case "Weekly":
		fallthrough
	case "Yearly":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum - Indicates a customer must be current resident of a geographic area/country
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumUk    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "UK"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumEea   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "EEA"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumEu    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "EU"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumEfta  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "EFTA"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumGbEng GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "GB - ENG"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumGbNir GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "GB - NIR"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumGbSct GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "GB - SCT"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumGbWls GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "GB - WLS"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnumIrl   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum = "IRL"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UK":
		fallthrough
	case "EEA":
		fallthrough
	case "EU":
		fallthrough
	case "EFTA":
		fallthrough
	case "GB - ENG":
		fallthrough
	case "GB - NIR":
		fallthrough
	case "GB - SCT":
		fallthrough
	case "GB - WLS":
		fallthrough
	case "IRL":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum - Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnumJoint       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum = "Joint"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnumSoleIncome  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum = "SoleIncome"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnumSoleOrJoint GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum = "SoleOrJoint"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnumTurnover    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum = "Turnover"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Joint":
		fallthrough
	case "SoleIncome":
		fallthrough
	case "SoleOrJoint":
		fallthrough
	case "Turnover":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibility - Eligibility
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibility struct {
	// Indicates a customer's age is part of eligibility criteria
	AgeRestricted bool `json:"AgeRestricted"`
	// Annual Business Turnover
	AnnualBusinessTurnover *string `json:"AnnualBusinessTurnover,omitempty"`
	// Annual Business Turnover Currency
	AnnualBusinessTurnoverCurrency *string `json:"AnnualBusinessTurnoverCurrency,omitempty"`
	// One paragraph detailing the eligibility
	Description string `json:"Description"`
	// Free text description, denotes non standard eligibilities not included in the code list
	EligibilityName *string `json:"EligibilityName,omitempty"`
	// Optional additional notes to supplement the eligibility conditions. Only used for very specific conditions
	EligibilityNotes *string `json:"EligibilityNotes,omitempty"`
	// Eligibility type
	EligibilityType *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum `json:"EligibilityType,omitempty"`
	// Stipulates any particular definition of income that applies to the income eligibility and/or method by which income must paid into the account (eg Salary DD)
	IncomeCondition *string `json:"IncomeCondition,omitempty"`
	// Indicates if eligibility linked to income
	IncomeTurnoverRelated bool                                                                                                             `json:"IncomeTurnoverRelated"`
	MarketingEligibility  []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum `json:"MarketingEligibility,omitempty"`
	// Maximum number of the same prodcut the customer may hold
	MaxNumberOfAccounts *string `json:"MaxNumberOfAccounts,omitempty"`
	// Maximum age, in years, allowed to hold the account
	MaximumAge *int64 `json:"MaximumAge,omitempty"`
	// Maximum age, in years, to open an account
	MaximumAgeToOpen *int64 `json:"MaximumAgeToOpen,omitempty"`
	// A maximum amount to be deposited at opening
	MaximumOpeningAmount *bool `json:"MaximumOpeningAmount,omitempty"`
	// Minimum Income Amount required to paid into the account
	MinIncomeTurnoverPaidIntoAccount *int64 `json:"MinIncomeTurnoverPaidIntoAccount,omitempty"`
	// Minimum age, in years, required to hold an account
	MinimumAge *int64 `json:"MinimumAge,omitempty"`
	// A minimum deposit required to hold this account
	MinimumDeposit *bool `json:"MinimumDeposit,omitempty"`
	// The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
	MinimumIncomeFrequency *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum `json:"MinimumIncomeFrequency,omitempty"`
	// Minimum income / Turnover required to hold the product
	MinimumIncomeTurnoverAmount *string `json:"MinimumIncomeTurnoverAmount,omitempty"`
	// Minimum income / Turnover Currency
	MinimumIncomeTurnoverCurrency *string `json:"MinimumIncomeTurnoverCurrency,omitempty"`
	// Minimum Operating Balance
	MinimumOperatingBalance *string `json:"MinimumOperatingBalance,omitempty"`
	// Minimum Operating Balance currency
	MinimumOperatingBalanceCurrency *string `json:"MinimumOperatingBalanceCurrency,omitempty"`
	// Is there a Minimum Operating Balance?
	MinimumOperatingBalanceExists *bool `json:"MinimumOperatingBalanceExists,omitempty"`
	// Maximum Amount to be depositing at opening
	OpeningDepositMaximumAmount *string `json:"OpeningDepositMaximumAmount,omitempty"`
	// The currency of the Minimum Amount to be depositing at opening
	OpeningDepositMaximumCurrency *string `json:"OpeningDepositMaximumCurrency,omitempty"`
	// Minimum Amount to be held on account
	OpeningDepositMinimum *string `json:"OpeningDepositMinimum,omitempty"`
	// The currency of the Minimum Amount to be depositing at opening
	OpeningDepositMinimumCurrency *string `json:"OpeningDepositMinimumCurrency,omitempty"`
	// Indicates that it is necessary to hold another product with the bank in order to be eligible for this product or feature
	OtherFinancialHoldingRequired bool `json:"OtherFinancialHoldingRequired"`
	// Describes if a previous bankruptcy / insolvency disqualfies for this account Details in ELI-280
	PreviousBankruptcy bool `json:"PreviousBankruptcy"`
	// Indicates a customer's residency forms part of the eligibility criteria
	ResidencyRestricted bool `json:"ResidencyRestricted"`
	// Indicates a customer must be current resident of a geographic area/country
	ResidencyRestrictedRegion *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum `json:"ResidencyRestrictedRegion,omitempty"`
	// Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
	SingleJointIncome *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum `json:"SingleJointIncome,omitempty"`
	// Is the product available to operate as a Clubs or Societies account?
	ThirdSectorOrganisations bool `json:"ThirdSectorOrganisations"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum - The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnumUk GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum = "UK"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnumEu GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum = "EU"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UK":
		fallthrough
	case "EU":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrand - Brand
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrand struct {
	// The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted
	TrademarkID string `json:"TrademarkID"`
	// The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
	TrademarkIPOCode GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum `json:"TrademarkIPOCode"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisationOrganisationName - Organisation Name
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisationOrganisationName struct {
	// Legal Name of the organisation
	LegalName string `json:"LegalName"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisation - Parent organisation
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisation struct {
	// The BIC from the organisation
	Bic *string `json:"BIC,omitempty"`
	// The LEI ID of the organisation
	Lei *string `json:"LEI,omitempty"`
	// Organisation Name
	OrganisationName GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisationOrganisationName `json:"OrganisationName"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisation - Organisation
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisation struct {
	// Brand
	Brand GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrand `json:"Brand"`
	// Parent organisation
	ParentOrganisation GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisation `json:"ParentOrganisation"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum - Marketing or industry segment that the product is designed for
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnumCashback  GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum = "Cashback"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnumCorporate GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum = "Corporate"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnumGeneral   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum = "General"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnumReward    GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum = "Reward"
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnumSme       GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum = "SME"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Cashback":
		fallthrough
	case "Corporate":
		fallthrough
	case "General":
		fallthrough
	case "Reward":
		fallthrough
	case "SME":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum - Descriptive code for the product category
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnumCommercialCreditCards GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum = "CommercialCreditCards"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CommercialCreditCards":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONData - Commercial Credit Card
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONData struct {
	// Benefit
	Benefits GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefits `json:"Benefits"`
	// Product description
	Description string `json:"Description"`
	// Commercial Credit Card Group
	Details GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetails `json:"Details"`
	// Eligibility
	Eligibility GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibility `json:"Eligibility"`
	// Product key features
	KeyFeatures string `json:"KeyFeatures"`
	// Organisation
	Organisation GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisation `json:"Organisation"`
	// Additional Features of the card
	OtherKeyFeatures *string `json:"OtherKeyFeatures,omitempty"`
	// Indicates whether a payment holiday is possible
	PaymentHoliday bool `json:"PaymentHoliday"`
	// Detailed description on the payment holiday if available
	PaymentHolidayDescription *string `json:"PaymentHolidayDescription,omitempty"`
	// Identifier within the parent organisation for the product. Must be unique in the organisation
	ProductIdentifier string `json:"ProductIdentifier"`
	// Name of the Commercial Credit Card
	ProductName string `json:"ProductName"`
	// Marketing or industry segment that the product is designed for
	ProductSegment []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum `json:"ProductSegment,omitempty"`
	// Descriptive code for the product category
	ProductType GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum `json:"ProductType"`
	// URL provided by the organisation which redirects to the product (on live products only). There might be more than one product at a given URL
	ProductURL []string `json:"ProductURL"`
	// URL provided by the parent organisation which redirects to the current T&Cs. Only applies on live products
	TsandCs []string `json:"TsandCs"`
}

type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnumUseOfTheApIsAndAnyRelatedDataWillBeSubjectToTheTermsOfTheOpenLicenceAndSubjectToTermsAndConditions GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum = "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum - Open Banking License
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnumHTTPSWwwOpenbankingOrgUkOpenLicence GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum = "https://www.openbanking.org.uk/open-licence"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "https://www.openbanking.org.uk/open-licence":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum: %s", s)
	}
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum - Open Banking Terms of Use
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum string

const (
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnumHTTPSWwwOpenbankingOrgUkTerms GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum = "https://www.openbanking.org.uk/terms"
)

func (e *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "https://www.openbanking.org.uk/terms":
		*e = GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum: %s", s)
	}
}

type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData struct {
	Agreement   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum `json:"Agreement"`
	LastUpdated time.Time                                                                                    `json:"LastUpdated"`
	// Open Banking License
	License GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum `json:"License"`
	// Open Banking Terms of Use
	TermsOfUse   GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum `json:"TermsOfUse"`
	TotalResults int64                                                                                         `json:"TotalResults"`
}

// GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSON - Successful response with a list of `Commercial Credit Card` data
type GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSON struct {
	Data []GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONData   `json:"data"`
	Meta GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData `json:"meta"`
}

type GetCommercialCreditCardsResponse struct {
	// You have sent a request which could not be understood.
	FourHundredErrorObject *GetCommercialCreditCards400ErrorObject
	// Your client has failed to submit a request, and a timeout has occurred.
	FourHundredAndEightErrorObject *GetCommercialCreditCards408ErrorObject
	// You have requested this resource too often. Slow down.
	FourHundredAndTwentyNineErrorObject *GetCommercialCreditCards429ErrorObject
	// An error occurred on the server. No further information is available.
	FiveHundredErrorObject *GetCommercialCreditCards500ErrorObject
	// The service is temporarily unavailable.
	FiveHundredAndThreeErrorObject *GetCommercialCreditCards503ErrorObject
	ContentType                    string
	// A standard error response.
	ErrorObject *GetCommercialCreditCardsErrorObject
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful response with a list of `Commercial Credit Card` data
	GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONObject *GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSON
}
