"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awss3bucketbucketlifecycleconfigurationrulesabortincompletemultipartuploaddetails as shared_awss3bucketbucketlifecycleconfigurationrulesabortincompletemultipartuploaddetails
from ..shared import awss3bucketbucketlifecycleconfigurationrulesfilterdetails as shared_awss3bucketbucketlifecycleconfigurationrulesfilterdetails
from ..shared import awss3bucketbucketlifecycleconfigurationrulesnoncurrentversiontransitionsdetails as shared_awss3bucketbucketlifecycleconfigurationrulesnoncurrentversiontransitionsdetails
from ..shared import awss3bucketbucketlifecycleconfigurationrulestransitionsdetails as shared_awss3bucketbucketlifecycleconfigurationrulestransitionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsS3BucketBucketLifecycleConfigurationRulesDetails:
    r"""Configuration for a lifecycle rule."""
    
    abort_incomplete_multipart_upload: Optional[shared_awss3bucketbucketlifecycleconfigurationrulesabortincompletemultipartuploaddetails.AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbortIncompleteMultipartUpload'), 'exclude': lambda f: f is None }})  
    expiration_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationDate'), 'exclude': lambda f: f is None }})  
    expiration_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationInDays'), 'exclude': lambda f: f is None }})  
    expired_object_delete_marker: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpiredObjectDeleteMarker'), 'exclude': lambda f: f is None }})  
    filter: Optional[shared_awss3bucketbucketlifecycleconfigurationrulesfilterdetails.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ID'), 'exclude': lambda f: f is None }})  
    noncurrent_version_expiration_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NoncurrentVersionExpirationInDays'), 'exclude': lambda f: f is None }})  
    noncurrent_version_transitions: Optional[list[shared_awss3bucketbucketlifecycleconfigurationrulesnoncurrentversiontransitionsdetails.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NoncurrentVersionTransitions'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Prefix'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    transitions: Optional[list[shared_awss3bucketbucketlifecycleconfigurationrulestransitionsdetails.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Transitions'), 'exclude': lambda f: f is None }})  
    