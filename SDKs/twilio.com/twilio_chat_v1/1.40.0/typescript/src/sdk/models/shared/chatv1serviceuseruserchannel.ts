/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserChannelEnumChannelStatusEnum } from "./userchannelenumchannelstatusenum";
import { Expose } from "class-transformer";

export class ChatV1ServiceUserUserChannel extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the User Channel resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel_sid" })
  channelSid?: string;

  /**
   * The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) in the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) that the Member has read.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_consumed_message_index" })
  lastConsumedMessageIndex?: number;

  /**
   * The absolute URLs of the [Members](https://www.twilio.com/docs/chat/api/members), [Messages](https://www.twilio.com/docs/chat/api/messages) , [Invites](https://www.twilio.com/docs/chat/api/invites) and, if it exists, the last [Message](https://www.twilio.com/docs/chat/api/messages) for the Channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;

  /**
   * The SID of a [Member](https://www.twilio.com/docs/api/chat/rest/members) that represents the User on the Channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member_sid" })
  memberSid?: string;

  /**
   * The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_sid" })
  serviceSid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: UserChannelEnumChannelStatusEnum;

  /**
   * The number of unread Messages in the Channel for the User. Note that retrieving messages on a client endpoint does not mean that messages are consumed or read. See [Consumption Horizon feature](/docs/api/chat/guides/consumption-horizon) to learn how to mark messages as consumed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unread_messages_count" })
  unreadMessagesCount?: number;
}
