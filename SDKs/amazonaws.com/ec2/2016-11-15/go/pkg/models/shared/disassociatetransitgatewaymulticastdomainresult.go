// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum - The type of resource, for example a VPC attachment.
type DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum string

const (
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumVpc                  DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "vpc"
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumVpn                  DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "vpn"
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumDirectConnectGateway DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "direct-connect-gateway"
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumConnect              DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "connect"
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumPeering              DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "peering"
	DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnumTgwPeering           DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum = "tgw-peering"
)

func (e *DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "vpc":
		fallthrough
	case "vpn":
		fallthrough
	case "direct-connect-gateway":
		fallthrough
	case "connect":
		fallthrough
	case "peering":
		fallthrough
	case "tgw-peering":
		*e = DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum: %s", s)
	}
}

// DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum - The state of the subnet association.
type DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum string

const (
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumPendingAcceptance DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "pendingAcceptance"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumAssociating       DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "associating"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumAssociated        DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "associated"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumDisassociating    DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "disassociating"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumDisassociated     DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "disassociated"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumRejected          DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "rejected"
	DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnumFailed            DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum = "failed"
)

func (e *DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pendingAcceptance":
		fallthrough
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "rejected":
		fallthrough
	case "failed":
		*e = DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum: %s", s)
	}
}

// DisassociateTransitGatewayMulticastDomainResultAssociationsSubnets - Describes the subnet association with the transit gateway multicast domain.
type DisassociateTransitGatewayMulticastDomainResultAssociationsSubnets struct {
	State    *DisassociateTransitGatewayMulticastDomainResultAssociationsSubnetsStateEnum
	SubnetID *string
}

// DisassociateTransitGatewayMulticastDomainResultAssociations - Information about the association.
type DisassociateTransitGatewayMulticastDomainResultAssociations struct {
	ResourceID                      *string
	ResourceOwnerID                 *string
	ResourceType                    *DisassociateTransitGatewayMulticastDomainResultAssociationsResourceTypeEnum
	Subnets                         []DisassociateTransitGatewayMulticastDomainResultAssociationsSubnets
	TransitGatewayAttachmentID      *string
	TransitGatewayMulticastDomainID *string
}

// DisassociateTransitGatewayMulticastDomainResult - Success
type DisassociateTransitGatewayMulticastDomainResult struct {
	Associations *DisassociateTransitGatewayMulticastDomainResultAssociations
}
