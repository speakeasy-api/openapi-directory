"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Domain:
    r"""successful operation"""
    
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""The actual domain or sub-domain. e.g. www.hubspot.com"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of this domain."""  
    is_resolving: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isResolving') }})
    r"""Whether the DNS for this domain is optimally configured for use with HubSpot."""  
    is_used_for_blog_post: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUsedForBlogPost') }})
    r"""Whether the domain is used for CMS blog posts."""  
    is_used_for_email: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUsedForEmail') }})
    r"""Whether the domain is used for CMS email web pages."""  
    is_used_for_knowledge: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUsedForKnowledge') }})
    r"""Whether the domain is used for CMS knowledge pages."""  
    is_used_for_landing_page: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUsedForLandingPage') }})
    r"""Whether the domain is used for CMS landing pages."""  
    is_used_for_site_page: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUsedForSitePage') }})
    r"""Whether the domain is used for CMS site pages."""  
    correct_cname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correctCname'), 'exclude': lambda f: f is None }})  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    is_ssl_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSslEnabled'), 'exclude': lambda f: f is None }})  
    is_ssl_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSslOnly'), 'exclude': lambda f: f is None }})  
    manually_marked_as_resolving: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manuallyMarkedAsResolving'), 'exclude': lambda f: f is None }})  
    primary_blog_post: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryBlogPost'), 'exclude': lambda f: f is None }})  
    primary_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryEmail'), 'exclude': lambda f: f is None }})  
    primary_knowledge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryKnowledge'), 'exclude': lambda f: f is None }})  
    primary_landing_page: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryLandingPage'), 'exclude': lambda f: f is None }})  
    primary_site_page: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primarySitePage'), 'exclude': lambda f: f is None }})  
    secondary_to_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryToDomain'), 'exclude': lambda f: f is None }})  
    updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    