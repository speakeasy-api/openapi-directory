// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VexAssessmentStateEnum - Provides the state of this Vulnerability assessment.
type VexAssessmentStateEnum string

const (
	VexAssessmentStateEnumStateUnspecified   VexAssessmentStateEnum = "STATE_UNSPECIFIED"
	VexAssessmentStateEnumAffected           VexAssessmentStateEnum = "AFFECTED"
	VexAssessmentStateEnumNotAffected        VexAssessmentStateEnum = "NOT_AFFECTED"
	VexAssessmentStateEnumFixed              VexAssessmentStateEnum = "FIXED"
	VexAssessmentStateEnumUnderInvestigation VexAssessmentStateEnum = "UNDER_INVESTIGATION"
)

func (e *VexAssessmentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "AFFECTED":
		fallthrough
	case "NOT_AFFECTED":
		fallthrough
	case "FIXED":
		fallthrough
	case "UNDER_INVESTIGATION":
		*e = VexAssessmentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VexAssessmentStateEnum: %s", s)
	}
}

// VexAssessment - VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
type VexAssessment struct {
	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	Cve *string `json:"cve,omitempty"`
	// Contains information about the impact of this vulnerability, this will change with time.
	Impacts []string `json:"impacts,omitempty"`
	// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	Justification *Justification `json:"justification,omitempty"`
	// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
	NoteName *string `json:"noteName,omitempty"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUris []RelatedURL `json:"relatedUris,omitempty"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []Remediation `json:"remediations,omitempty"`
	// Provides the state of this Vulnerability assessment.
	State *VexAssessmentStateEnum `json:"state,omitempty"`
}
