"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Campaigns:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_campaigns_get(self, request: operations.DfareportingCampaignsGetRequest, security: operations.DfareportingCampaignsGetSecurity) -> operations.DfareportingCampaignsGetResponse:
        r"""Gets one campaign by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCampaignsGetRequest, base_url, '/userprofiles/{profileId}/campaigns/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingCampaignsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCampaignsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Campaign])
                res.campaign = out

        return res

    def dfareporting_campaigns_insert(self, request: operations.DfareportingCampaignsInsertRequest, security: operations.DfareportingCampaignsInsertSecurity) -> operations.DfareportingCampaignsInsertResponse:
        r"""Inserts a new campaign."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCampaignsInsertRequest, base_url, '/userprofiles/{profileId}/campaigns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "campaign", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCampaignsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCampaignsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Campaign])
                res.campaign = out

        return res

    def dfareporting_campaigns_list(self, request: operations.DfareportingCampaignsListRequest, security: operations.DfareportingCampaignsListSecurity) -> operations.DfareportingCampaignsListResponse:
        r"""Retrieves a list of campaigns, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCampaignsListRequest, base_url, '/userprofiles/{profileId}/campaigns', request)
        
        query_params = utils.get_query_params(operations.DfareportingCampaignsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCampaignsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignsListResponse])
                res.campaigns_list_response = out

        return res

    def dfareporting_campaigns_patch(self, request: operations.DfareportingCampaignsPatchRequest, security: operations.DfareportingCampaignsPatchSecurity) -> operations.DfareportingCampaignsPatchResponse:
        r"""Updates an existing campaign. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCampaignsPatchRequest, base_url, '/userprofiles/{profileId}/campaigns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "campaign", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCampaignsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCampaignsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Campaign])
                res.campaign = out

        return res

    def dfareporting_campaigns_update(self, request: operations.DfareportingCampaignsUpdateRequest, security: operations.DfareportingCampaignsUpdateSecurity) -> operations.DfareportingCampaignsUpdateResponse:
        r"""Updates an existing campaign."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCampaignsUpdateRequest, base_url, '/userprofiles/{profileId}/campaigns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "campaign", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCampaignsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCampaignsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Campaign])
                res.campaign = out

        return res

    