<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PurchaseInformation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create purchase information
     * 
     * Creates purchase information for a given client profile.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationResponse
     */
	public function createPurchaseInformation(
        \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/purchase-info', \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePurchaseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPurchaseInformation201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete purchase information
     * 
     * Deletes purchase informaiton by `profileId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationResponse
     */
	public function deletePurchaseInformation(
        \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/purchase-info', \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePurchaseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get purchase information
     * 
     * Retrieves purchase information of a given client, by its `profileId`.
     * 
     * 
     * > For security and privacy reasons, this request returns masked data. For unmasked information, see Get unmasked purchase information.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationResponse
     */
	public function getPurchaseInformation(
        \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/purchase-info', \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPurchaseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPurchaseInformation200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked purchase information
     * 
     * Retrieves unmasked purchase information of a given client, by its `profileId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationResponse
     */
	public function getUnmaskedPurchaseInformation(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/purchase-info/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedPurchaseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedPurchaseInformation200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update purchase information
     * 
     * Updates one or more fields of existing purchase information for a given client profile.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationResponse
     */
	public function updatePurchaseInformation(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/purchase-info', \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePurchaseInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePurchaseInformation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}