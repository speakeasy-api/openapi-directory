/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnterpriseCrmEventbusProtoCombinedCondition } from "./enterprisecrmeventbusprotocombinedcondition";
import { Expose, Type } from "class-transformer";

/**
 * The task that is next in line to be executed, if the condition specified evaluated to true.
 */
export class EnterpriseCrmEventbusProtoNextTask extends SpeakeasyBase {
  /**
   * Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`
   */
  @SpeakeasyMetadata({ elemType: EnterpriseCrmEventbusProtoCombinedCondition })
  @Expose({ name: "combinedConditions" })
  @Type(() => EnterpriseCrmEventbusProtoCombinedCondition)
  combinedConditions?: EnterpriseCrmEventbusProtoCombinedCondition[];

  /**
   * Standard filter expression for this task to become an eligible next task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "condition" })
  condition?: string;

  /**
   * User-provided description intended to give more business context about the next task edge or condition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * User-provided label that is attached to this edge in the UI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * ID of the next task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taskConfigId" })
  taskConfigId?: string;

  /**
   * Task number of the next task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taskNumber" })
  taskNumber?: string;
}
