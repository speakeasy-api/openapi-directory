<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Transaction - Represents a transaction processed with Square, either with the
 * 
 * Connect API or with Square Point of Sale.
 * 
 * The `tenders` field of this object lists all methods of payment used to pay in
 * the transaction.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Transaction
{
    /**
     * If the transaction was created in the Square Point of Sale app, this value
     * 
     * is the ID generated for the transaction by Square Point of Sale.
     * 
     * This ID has no relationship to the transaction's canonical `id`, which is
     * generated by Square's backend servers. This value is generated for bookkeeping
     * purposes, in case the transaction cannot immediately be completed (for example,
     * if the transaction is processed in offline mode).
     * 
     * It is not currently possible with the Connect API to perform a transaction
     * lookup by this value.
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('client_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * The timestamp for when the transaction was created, in RFC 3339 format.
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * The transaction's unique ID, issued by Square payments servers.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The ID of the transaction's associated location.
     * 
     * @var ?string $locationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('location_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $locationId = null;
    
    /**
     * The order_id is an identifier for the order associated with this transaction, if any.
     * 
     * @var ?string $orderId
     */
	#[\JMS\Serializer\Annotation\SerializedName('order_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $orderId = null;
    
    /**
     * The Square product that processed the transaction.
     * 
     * @var ?string $product
     */
	#[\JMS\Serializer\Annotation\SerializedName('product')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $product = null;
    
    /**
     * If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
     * 
     * endpoint, this value is the same as the value provided for the `reference_id`
     * parameter in the request to that endpoint. Otherwise, it is not set.
     * 
     * @var ?string $referenceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('reference_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceId = null;
    
    /**
     * Refunds that have been applied to any tender in the transaction.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Refund> $refunds
     */
	#[\JMS\Serializer\Annotation\SerializedName('refunds')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Refund>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $refunds = null;
    
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $shippingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('shipping_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $shippingAddress = null;
    
    /**
     * The tenders used to pay in the transaction.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Tender> $tenders
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenders')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Tender>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tenders = null;
    
	public function __construct()
	{
		$this->clientId = null;
		$this->createdAt = null;
		$this->id = null;
		$this->locationId = null;
		$this->orderId = null;
		$this->product = null;
		$this->referenceId = null;
		$this->refunds = null;
		$this->shippingAddress = null;
		$this->tenders = null;
	}
}
