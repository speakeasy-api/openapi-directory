<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Member 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse
     */
	public function createMember(
        \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/members', \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createMember201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateMember201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse
     */
	public function deleteMember(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/members/{member_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteMember200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMemberResponse
     */
	public function getMember(
        \OpenAPI\OpenAPI\Models\Operations\GetMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/members/{member_id}', \OpenAPI\OpenAPI\Models\Operations\GetMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMember200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetMember200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List members
     * 
     * This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMembersResponse
     */
	public function getMembers(
        \OpenAPI\OpenAPI\Models\Operations\GetMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/members', \OpenAPI\OpenAPI\Models\Operations\GetMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMembers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetMembers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
     */
	public function updateMember(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/members/{member_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateMember200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateMember200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}