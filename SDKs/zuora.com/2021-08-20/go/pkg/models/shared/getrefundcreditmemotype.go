// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum - Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum string

const (
	GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnumProcessing GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum = "Processing"
	GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnumYes        GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum = "Yes"
	GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnumNo         GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum = "No"
	GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnumError      GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum = "Error"
	GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnumIgnore     GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum = "Ignore"
)

func (e *GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "No":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum: %s", s)
	}
}

// GETRefundCreditMemoTypeFinanceInformation - Container for the finance information related to the refund.
type GETRefundCreditMemoTypeFinanceInformation struct {
	// The accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCode *string `json:"bankAccountAccountingCode,omitempty"`
	// The type of the accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCodeType *string `json:"bankAccountAccountingCodeType,omitempty"`
	// Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *GETRefundCreditMemoTypeFinanceInformationTransferredToAccountingEnum `json:"transferredToAccounting,omitempty"`
	// The accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCode *string `json:"unappliedPaymentAccountingCode,omitempty"`
	// The type of the accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCodeType *string `json:"unappliedPaymentAccountingCodeType,omitempty"`
}

// GETRefundCreditMemoTypeGatewayStateEnum - The status of the refund in the gateway.
type GETRefundCreditMemoTypeGatewayStateEnum string

const (
	GETRefundCreditMemoTypeGatewayStateEnumMarkedForSubmission GETRefundCreditMemoTypeGatewayStateEnum = "MarkedForSubmission"
	GETRefundCreditMemoTypeGatewayStateEnumSubmitted           GETRefundCreditMemoTypeGatewayStateEnum = "Submitted"
	GETRefundCreditMemoTypeGatewayStateEnumSettled             GETRefundCreditMemoTypeGatewayStateEnum = "Settled"
	GETRefundCreditMemoTypeGatewayStateEnumNotSubmitted        GETRefundCreditMemoTypeGatewayStateEnum = "NotSubmitted"
	GETRefundCreditMemoTypeGatewayStateEnumFailedToSettle      GETRefundCreditMemoTypeGatewayStateEnum = "FailedToSettle"
)

func (e *GETRefundCreditMemoTypeGatewayStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarkedForSubmission":
		fallthrough
	case "Submitted":
		fallthrough
	case "Settled":
		fallthrough
	case "NotSubmitted":
		fallthrough
	case "FailedToSettle":
		*e = GETRefundCreditMemoTypeGatewayStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundCreditMemoTypeGatewayStateEnum: %s", s)
	}
}

// GETRefundCreditMemoTypeMethodTypeEnum - How an external refund was issued to a customer.
type GETRefundCreditMemoTypeMethodTypeEnum string

const (
	GETRefundCreditMemoTypeMethodTypeEnumAch                            GETRefundCreditMemoTypeMethodTypeEnum = "ACH"
	GETRefundCreditMemoTypeMethodTypeEnumCash                           GETRefundCreditMemoTypeMethodTypeEnum = "Cash"
	GETRefundCreditMemoTypeMethodTypeEnumCheck                          GETRefundCreditMemoTypeMethodTypeEnum = "Check"
	GETRefundCreditMemoTypeMethodTypeEnumCreditCard                     GETRefundCreditMemoTypeMethodTypeEnum = "CreditCard"
	GETRefundCreditMemoTypeMethodTypeEnumPayPal                         GETRefundCreditMemoTypeMethodTypeEnum = "PayPal"
	GETRefundCreditMemoTypeMethodTypeEnumWireTransfer                   GETRefundCreditMemoTypeMethodTypeEnum = "WireTransfer"
	GETRefundCreditMemoTypeMethodTypeEnumDebitCard                      GETRefundCreditMemoTypeMethodTypeEnum = "DebitCard"
	GETRefundCreditMemoTypeMethodTypeEnumCreditCardReferenceTransaction GETRefundCreditMemoTypeMethodTypeEnum = "CreditCardReferenceTransaction"
	GETRefundCreditMemoTypeMethodTypeEnumBankTransfer                   GETRefundCreditMemoTypeMethodTypeEnum = "BankTransfer"
	GETRefundCreditMemoTypeMethodTypeEnumOther                          GETRefundCreditMemoTypeMethodTypeEnum = "Other"
)

func (e *GETRefundCreditMemoTypeMethodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACH":
		fallthrough
	case "Cash":
		fallthrough
	case "Check":
		fallthrough
	case "CreditCard":
		fallthrough
	case "PayPal":
		fallthrough
	case "WireTransfer":
		fallthrough
	case "DebitCard":
		fallthrough
	case "CreditCardReferenceTransaction":
		fallthrough
	case "BankTransfer":
		fallthrough
	case "Other":
		*e = GETRefundCreditMemoTypeMethodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundCreditMemoTypeMethodTypeEnum: %s", s)
	}
}

// GETRefundCreditMemoTypeStatusEnum - The status of the refund.
type GETRefundCreditMemoTypeStatusEnum string

const (
	GETRefundCreditMemoTypeStatusEnumProcessed  GETRefundCreditMemoTypeStatusEnum = "Processed"
	GETRefundCreditMemoTypeStatusEnumCanceled   GETRefundCreditMemoTypeStatusEnum = "Canceled"
	GETRefundCreditMemoTypeStatusEnumError      GETRefundCreditMemoTypeStatusEnum = "Error"
	GETRefundCreditMemoTypeStatusEnumProcessing GETRefundCreditMemoTypeStatusEnum = "Processing"
)

func (e *GETRefundCreditMemoTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processed":
		fallthrough
	case "Canceled":
		fallthrough
	case "Error":
		fallthrough
	case "Processing":
		*e = GETRefundCreditMemoTypeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundCreditMemoTypeStatusEnum: %s", s)
	}
}

// GETRefundCreditMemoTypeTypeEnum - The type of the refund.
type GETRefundCreditMemoTypeTypeEnum string

const (
	GETRefundCreditMemoTypeTypeEnumExternal   GETRefundCreditMemoTypeTypeEnum = "External"
	GETRefundCreditMemoTypeTypeEnumElectronic GETRefundCreditMemoTypeTypeEnum = "Electronic"
)

func (e *GETRefundCreditMemoTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = GETRefundCreditMemoTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundCreditMemoTypeTypeEnum: %s", s)
	}
}

// GETRefundCreditMemoType - Container for custom fields of a Refund object.
type GETRefundCreditMemoType struct {
	// ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationIDNS *string `json:"IntegrationId__NS,omitempty"`
	// Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationStatusNS *string `json:"IntegrationStatus__NS,omitempty"`
	// Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	OriginNS *string `json:"Origin__NS,omitempty"`
	// Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SyncDateNS *string `json:"SyncDate__NS,omitempty"`
	// Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SynctoNetSuiteNS *string `json:"SynctoNetSuite__NS,omitempty"`
	// The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The total amount of the refund.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Comments about the refund.
	//
	Comment *string `json:"comment,omitempty"`
	// The ID of the Zuora user who created the refund.
	//
	CreatedByID *string `json:"createdById,omitempty"`
	// The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The ID of the credit memo that is refunded.
	//
	CreditMemoID *string `json:"creditMemoId,omitempty"`
	// Container for the finance information related to the refund.
	//
	FinanceInformation *GETRefundCreditMemoTypeFinanceInformation `json:"financeInformation,omitempty"`
	// The ID of the gateway instance that processes the refund.
	//
	GatewayID *string `json:"gatewayId,omitempty"`
	// The message returned from the payment gateway for the refund. This message is gateway-dependent.
	//
	GatewayResponse *string `json:"gatewayResponse,omitempty"`
	// The response code returned from the payment gateway for the refund. This code is gateway-dependent.
	//
	GatewayResponseCode *string `json:"gatewayResponseCode,omitempty"`
	// The status of the refund in the gateway.
	//
	GatewayState *GETRefundCreditMemoTypeGatewayStateEnum `json:"gatewayState,omitempty"`
	// The ID of the created refund.
	//
	ID *string `json:"id,omitempty"`
	// The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
	//
	MarkedForSubmissionOn *time.Time `json:"markedForSubmissionOn,omitempty"`
	// How an external refund was issued to a customer.
	//
	MethodType *GETRefundCreditMemoTypeMethodTypeEnum `json:"methodType,omitempty"`
	// The unique identification number of the refund.
	//
	Number *string `json:"number,omitempty"`
	// The ID of the payment associated with the refund.
	//
	PaymentID *string `json:"paymentId,omitempty"`
	// The unique ID of the payment method that the customer used to make the refund.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
	//
	PaymentMethodSnapshotID *string `json:"paymentMethodSnapshotId,omitempty"`
	// A code identifying the reason for the transaction.
	//
	ReasonCode *string `json:"reasonCode,omitempty"`
	// The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"referenceId,omitempty"`
	// The date when the refund takes effect, in yyyy-mm-dd format.
	//
	RefundDate *types.Date `json:"refundDate,omitempty"`
	// The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
	//
	RefundTransactionTime *time.Time `json:"refundTransactionTime,omitempty"`
	// The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
	//
	SecondRefundReferenceID *string `json:"secondRefundReferenceId,omitempty"`
	// The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
	//
	SettledOn *time.Time `json:"settledOn,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptor *string `json:"softDescriptor,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptorPhone *string `json:"softDescriptorPhone,omitempty"`
	// The status of the refund.
	//
	Status *GETRefundCreditMemoTypeStatusEnum `json:"status,omitempty"`
	// The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
	//
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`
	// Returns `true` if the request was processed successfully.
	Success *bool `json:"success,omitempty"`
	// The type of the refund.
	//
	Type *GETRefundCreditMemoTypeTypeEnum `json:"type,omitempty"`
	// The ID of the Zuora user who last updated the refund.
	//
	UpdatedByID *string `json:"updatedById,omitempty"`
	// The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.
	//
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}
