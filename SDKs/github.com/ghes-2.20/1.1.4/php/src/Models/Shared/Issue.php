<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Issue - Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Issue
{
	#[\JMS\Serializer\Annotation\SerializedName('active_lock_reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $activeLockReason = null;
    
    /**
     * Simple User
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $assignee
     */
	#[\JMS\Serializer\Annotation\SerializedName('assignee')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    public NullableSimpleUser $assignee;
    
    /**
     * $assignees
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SimpleUser> $assignees
     */
	#[\JMS\Serializer\Annotation\SerializedName('assignees')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $assignees = null;
    
    /**
     * How the author is associated with the repository.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AuthorAssociationEnum $authorAssociation
     */
	#[\JMS\Serializer\Annotation\SerializedName('author_association')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AuthorAssociationEnum>')]
    public AuthorAssociationEnum $authorAssociation;
    
    /**
     * Contents of the issue
     * 
     * @var ?string $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $body = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('body_html')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bodyHtml = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('body_text')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bodyText = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('closed_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $closedAt;
    
    /**
     * Simple User
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $closedBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('closed_by')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $closedBy = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('comments')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $comments;
    
	#[\JMS\Serializer\Annotation\SerializedName('comments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('html_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $htmlUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
     * 
     * @var array<mixed> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<mixed>')]
    public array $labels;
    
	#[\JMS\Serializer\Annotation\SerializedName('labels_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $labelsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('locked')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $locked;
    
    /**
     * A collection of related issues and pull requests.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableMilestone $milestone
     */
	#[\JMS\Serializer\Annotation\SerializedName('milestone')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableMilestone')]
    public NullableMilestone $milestone;
    
	#[\JMS\Serializer\Annotation\SerializedName('node_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeId;
    
    /**
     * Number uniquely identifying the issue within its repository
     * 
     * @var int $number
     */
	#[\JMS\Serializer\Annotation\SerializedName('number')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $number;
    
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableIntegration $performedViaGithubApp
     */
	#[\JMS\Serializer\Annotation\SerializedName('performed_via_github_app')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableIntegration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableIntegration $performedViaGithubApp = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('pull_request')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssuePullRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssuePullRequest $pullRequest = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('reactions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ReactionRollup')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReactionRollup $reactions = null;
    
    /**
     * A git repository
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Repository $repository
     */
	#[\JMS\Serializer\Annotation\SerializedName('repository')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Repository')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Repository $repository = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('repository_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $repositoryUrl;
    
    /**
     * State of the issue; either 'open' or 'closed'
     * 
     * @var string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $state;
    
	#[\JMS\Serializer\Annotation\SerializedName('timeline_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $timelineUrl = null;
    
    /**
     * Title of the issue
     * 
     * @var string $title
     */
	#[\JMS\Serializer\Annotation\SerializedName('title')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $title;
    
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $updatedAt;
    
    /**
     * URL for the issue
     * 
     * @var string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
    /**
     * Simple User
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    public NullableSimpleUser $user;
    
	public function __construct()
	{
		$this->activeLockReason = null;
		$this->assignee = new \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser();
		$this->assignees = null;
		$this->authorAssociation = \OpenAPI\OpenAPI\Models\Shared\AuthorAssociationEnum::COLLABORATOR;
		$this->body = null;
		$this->bodyHtml = null;
		$this->bodyText = null;
		$this->closedAt = new \DateTime();
		$this->closedBy = null;
		$this->comments = 0;
		$this->commentsUrl = "";
		$this->createdAt = new \DateTime();
		$this->eventsUrl = "";
		$this->htmlUrl = "";
		$this->id = 0;
		$this->labels = [];
		$this->labelsUrl = "";
		$this->locked = false;
		$this->milestone = new \OpenAPI\OpenAPI\Models\Shared\NullableMilestone();
		$this->nodeId = "";
		$this->number = 0;
		$this->performedViaGithubApp = null;
		$this->pullRequest = null;
		$this->reactions = null;
		$this->repository = null;
		$this->repositoryUrl = "";
		$this->state = "";
		$this->timelineUrl = null;
		$this->title = "";
		$this->updatedAt = new \DateTime();
		$this->url = "";
		$this->user = new \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser();
	}
}
