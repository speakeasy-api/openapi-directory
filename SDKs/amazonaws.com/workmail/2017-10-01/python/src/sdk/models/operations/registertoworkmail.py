"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import registertoworkmailrequest as shared_registertoworkmailrequest
from enum import Enum
from typing import Any, Optional

class RegisterToWorkMailXAmzTargetEnum(str, Enum):
    WORK_MAIL_SERVICE_REGISTER_TO_WORK_MAIL = 'WorkMailService.RegisterToWorkMail'


@dataclasses.dataclass
class RegisterToWorkMailRequest:
    
    register_to_work_mail_request: shared_registertoworkmailrequest.RegisterToWorkMailRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: RegisterToWorkMailXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class RegisterToWorkMailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    directory_service_authentication_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DirectoryServiceAuthenticationFailedException"""  
    directory_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DirectoryUnavailableException"""  
    email_address_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EmailAddressInUseException"""  
    entity_already_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EntityAlreadyRegisteredException"""  
    entity_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EntityNotFoundException"""  
    entity_state_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EntityStateException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    mail_domain_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MailDomainNotFoundException"""  
    mail_domain_state_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MailDomainStateException"""  
    organization_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OrganizationNotFoundException"""  
    organization_state_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OrganizationStateException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    register_to_work_mail_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    