// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUnassignIpv6AddressesActionEnum
type GETUnassignIpv6AddressesActionEnum string

const (
	GETUnassignIpv6AddressesActionEnumUnassignIpv6Addresses GETUnassignIpv6AddressesActionEnum = "UnassignIpv6Addresses"
)

func (e *GETUnassignIpv6AddressesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UnassignIpv6Addresses":
		*e = GETUnassignIpv6AddressesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUnassignIpv6AddressesActionEnum: %s", s)
	}
}

// GETUnassignIpv6AddressesVersionEnum
type GETUnassignIpv6AddressesVersionEnum string

const (
	GETUnassignIpv6AddressesVersionEnumTwoThousandAndSixteen1115 GETUnassignIpv6AddressesVersionEnum = "2016-11-15"
)

func (e *GETUnassignIpv6AddressesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETUnassignIpv6AddressesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUnassignIpv6AddressesVersionEnum: %s", s)
	}
}

type GETUnassignIpv6AddressesQueryParams struct {
	Action GETUnassignIpv6AddressesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IPv6 addresses to unassign from the network interface.
	Ipv6Addresses []string `queryParam:"style=form,explode=true,name=Ipv6Addresses"`
	// The IPv6 prefixes to unassign from the network interface.
	Ipv6Prefix []string `queryParam:"style=form,explode=true,name=Ipv6Prefix"`
	// The ID of the network interface.
	NetworkInterfaceID string                              `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	Version            GETUnassignIpv6AddressesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETUnassignIpv6AddressesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUnassignIpv6AddressesRequest struct {
	QueryParams GETUnassignIpv6AddressesQueryParams
	Headers     GETUnassignIpv6AddressesHeaders
}

type GETUnassignIpv6AddressesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
