"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Social:
    r"""Social media and pseudonyms"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def phone_code(self, request: operations.PhoneCodeRequest, security: operations.PhoneCodeSecurity) -> operations.PhoneCodeResponse:
        r"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PhoneCodeRequest, base_url, '/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PhoneCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNamePhoneCodedOut])
                res.first_last_name_phone_coded_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def phone_code_batch(self, request: shared.BatchFirstLastNamePhoneNumberIn, security: operations.PhoneCodeBatchSecurity) -> operations.PhoneCodeBatchResponse:
        r"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/phoneCodeBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PhoneCodeBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchFirstLastNamePhoneCodedOut])
                res.batch_first_last_name_phone_coded_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def phone_code_geo(self, request: operations.PhoneCodeGeoRequest, security: operations.PhoneCodeGeoSecurity) -> operations.PhoneCodeGeoResponse:
        r"""[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PhoneCodeGeoRequest, base_url, '/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PhoneCodeGeoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNamePhoneCodedOut])
                res.first_last_name_phone_coded_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def phone_code_geo_batch(self, request: shared.BatchFirstLastNamePhoneNumberGeoIn, security: operations.PhoneCodeGeoBatchSecurity) -> operations.PhoneCodeGeoBatchResponse:
        r"""[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/phoneCodeGeoBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PhoneCodeGeoBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchFirstLastNamePhoneCodedOut])
                res.batch_first_last_name_phone_coded_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def phone_code_geo_feedback_loop(self, request: operations.PhoneCodeGeoFeedbackLoopRequest, security: operations.PhoneCodeGeoFeedbackLoopSecurity) -> operations.PhoneCodeGeoFeedbackLoopResponse:
        r"""[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PhoneCodeGeoFeedbackLoopRequest, base_url, '/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PhoneCodeGeoFeedbackLoopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNamePhoneCodedOut])
                res.first_last_name_phone_coded_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    