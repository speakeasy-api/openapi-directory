/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Pipeline - Specifies a series of actions to execute, expressed as Docker containers.
 */
public class Pipeline {
    /**
     * The list of actions to execute, in the order they are specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actions")
    public Action[] actions;

    public Pipeline withActions(Action[] actions) {
        this.actions = actions;
        return this;
    }
    
    /**
     * Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedEnvironment")
    public Secret encryptedEnvironment;

    public Pipeline withEncryptedEnvironment(Secret encryptedEnvironment) {
        this.encryptedEnvironment = encryptedEnvironment;
        return this;
    }
    
    /**
     * The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public java.util.Map<String, String> environment;

    public Pipeline withEnvironment(java.util.Map<String, String> environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * The system resources for the pipeline run. At least one zone or region must be specified or the pipeline run will fail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public Resources resources;

    public Pipeline withResources(Resources resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;

    public Pipeline withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public Pipeline(){}
}
