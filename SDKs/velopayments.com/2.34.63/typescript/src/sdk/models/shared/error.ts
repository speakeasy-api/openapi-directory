/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorData } from "./errordata";
import { LocalisationDetails } from "./localisationdetails";
import { Expose, Type } from "class-transformer";

/**
 * the location type in the request that was the cause of the error
 *
 * @remarks
 *
 */
export enum ErrorLocationTypeEnum {
  RequestBody = "requestBody",
  QueryParam = "queryParam",
  RequestParam = "requestParam",
  Header = "header",
  PathParam = "pathParam",
}

export class ErrorT extends SpeakeasyBase {
  /**
   * Unique numeric code that can be used for switching client behavior or to drive translated or customised error messages
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCode" })
  errorCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorData" })
  @Type(() => ErrorData)
  errorData?: ErrorData;

  /**
   * English language message indicating the nature of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "localisationDetails" })
  @Type(() => LocalisationDetails)
  localisationDetails?: LocalisationDetails;

  /**
   * the property or object that caused the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * the location type in the request that was the cause of the error
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locationType" })
  locationType?: ErrorLocationTypeEnum;

  /**
   * a camel-cased string that can be used by clients to localise client error messages (deprecated)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reasonCode" })
  reasonCode?: string;
}
