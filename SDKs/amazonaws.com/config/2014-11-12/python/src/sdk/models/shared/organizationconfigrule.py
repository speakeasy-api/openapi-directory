"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import organizationcustompolicyrulemetadatanopolicy as shared_organizationcustompolicyrulemetadatanopolicy
from ..shared import organizationcustomrulemetadata as shared_organizationcustomrulemetadata
from ..shared import organizationmanagedrulemetadata as shared_organizationmanagedrulemetadata
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationConfigRule:
    r"""An organization Config rule that has information about Config rules that Config creates in member accounts."""
    
    organization_config_rule_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationConfigRuleArn') }})  
    organization_config_rule_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationConfigRuleName') }})  
    excluded_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludedAccounts'), 'exclude': lambda f: f is None }})  
    last_update_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    organization_custom_policy_rule_metadata: Optional[shared_organizationcustompolicyrulemetadatanopolicy.OrganizationCustomPolicyRuleMetadataNoPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationCustomPolicyRuleMetadata'), 'exclude': lambda f: f is None }})  
    organization_custom_rule_metadata: Optional[shared_organizationcustomrulemetadata.OrganizationCustomRuleMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationCustomRuleMetadata'), 'exclude': lambda f: f is None }})  
    organization_managed_rule_metadata: Optional[shared_organizationmanagedrulemetadata.OrganizationManagedRuleMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationManagedRuleMetadata'), 'exclude': lambda f: f is None }})  
    