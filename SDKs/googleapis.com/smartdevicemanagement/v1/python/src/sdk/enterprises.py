"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Enterprises:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def smartdevicemanagement_enterprises_devices_execute_command(self, request: operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandRequest, security: operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandSecurity) -> operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandResponse:
        r"""Executes a command to device managed by the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandRequest, base_url, '/v1/{name}:executeCommand', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_home_enterprise_sdm_v1_execute_device_command_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmartdevicemanagementEnterprisesDevicesExecuteCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleHomeEnterpriseSdmV1ExecuteDeviceCommandResponse])
                res.google_home_enterprise_sdm_v1_execute_device_command_response = out

        return res

    def smartdevicemanagement_enterprises_devices_list(self, request: operations.SmartdevicemanagementEnterprisesDevicesListRequest, security: operations.SmartdevicemanagementEnterprisesDevicesListSecurity) -> operations.SmartdevicemanagementEnterprisesDevicesListResponse:
        r"""Lists devices managed by the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SmartdevicemanagementEnterprisesDevicesListRequest, base_url, '/v1/{parent}/devices', request)
        
        query_params = utils.get_query_params(operations.SmartdevicemanagementEnterprisesDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmartdevicemanagementEnterprisesDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleHomeEnterpriseSdmV1ListDevicesResponse])
                res.google_home_enterprise_sdm_v1_list_devices_response = out

        return res

    def smartdevicemanagement_enterprises_structures_list(self, request: operations.SmartdevicemanagementEnterprisesStructuresListRequest, security: operations.SmartdevicemanagementEnterprisesStructuresListSecurity) -> operations.SmartdevicemanagementEnterprisesStructuresListResponse:
        r"""Lists structures managed by the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SmartdevicemanagementEnterprisesStructuresListRequest, base_url, '/v1/{parent}/structures', request)
        
        query_params = utils.get_query_params(operations.SmartdevicemanagementEnterprisesStructuresListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmartdevicemanagementEnterprisesStructuresListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleHomeEnterpriseSdmV1ListStructuresResponse])
                res.google_home_enterprise_sdm_v1_list_structures_response = out

        return res

    def smartdevicemanagement_enterprises_structures_rooms_get(self, request: operations.SmartdevicemanagementEnterprisesStructuresRoomsGetRequest, security: operations.SmartdevicemanagementEnterprisesStructuresRoomsGetSecurity) -> operations.SmartdevicemanagementEnterprisesStructuresRoomsGetResponse:
        r"""Gets a room managed by the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SmartdevicemanagementEnterprisesStructuresRoomsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.SmartdevicemanagementEnterprisesStructuresRoomsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmartdevicemanagementEnterprisesStructuresRoomsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleHomeEnterpriseSdmV1Room])
                res.google_home_enterprise_sdm_v1_room = out

        return res

    def smartdevicemanagement_enterprises_structures_rooms_list(self, request: operations.SmartdevicemanagementEnterprisesStructuresRoomsListRequest, security: operations.SmartdevicemanagementEnterprisesStructuresRoomsListSecurity) -> operations.SmartdevicemanagementEnterprisesStructuresRoomsListResponse:
        r"""Lists rooms managed by the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SmartdevicemanagementEnterprisesStructuresRoomsListRequest, base_url, '/v1/{parent}/rooms', request)
        
        query_params = utils.get_query_params(operations.SmartdevicemanagementEnterprisesStructuresRoomsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SmartdevicemanagementEnterprisesStructuresRoomsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleHomeEnterpriseSdmV1ListRoomsResponse])
                res.google_home_enterprise_sdm_v1_list_rooms_response = out

        return res

    