<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EventTags 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an existing event tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteResponse
     */
	public function dfareportingEventTagsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets one event tag by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetResponse
     */
	public function dfareportingEventTagsGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new event tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertResponse
     */
	public function dfareportingEventTagsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "eventTag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of event tags, possibly filtered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListResponse
     */
	public function dfareportingEventTagsList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTagsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTagsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing event tag. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchResponse
     */
	public function dfareportingEventTagsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "eventTag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing event tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateResponse
     */
	public function dfareportingEventTagsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/eventTags', \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "eventTag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingEventTagsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTag', 'json');
            }
        }

        return $response;
    }
}