/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Allowed } from "./allowed";
import { AuthDecisionEnum } from "./authdecisionenum";
import { AuthInfo } from "./authinfo";
import { Denied } from "./denied";
import { Expose, Type } from "class-transformer";

/**
 * The authorizer result.
 */
export class AuthResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowed" })
  @Type(() => Allowed)
  allowed?: Allowed;

  @SpeakeasyMetadata()
  @Expose({ name: "authDecision" })
  authDecision?: AuthDecisionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "authInfo" })
  @Type(() => AuthInfo)
  authInfo?: AuthInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "denied" })
  @Type(() => Denied)
  denied?: Denied;

  @SpeakeasyMetadata()
  @Expose({ name: "missingContextValues" })
  missingContextValues?: string[];
}
