<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Payment - Represents a payment processed by the Square API.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Payment
{
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $amountMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $amountMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $appFeeMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('app_fee_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $appFeeMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $approvedMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('approved_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $approvedMoney = null;
    
    /**
     * Additional details about BANK_ACCOUNT type payments.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BankAccountPaymentDetails $bankAccountDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('bank_account_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BankAccountPaymentDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BankAccountPaymentDetails $bankAccountDetails = null;
    
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $billingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('billing_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $billingAddress = null;
    
    /**
     * The buyer's email address.
     * 
     * @var ?string $buyerEmailAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('buyer_email_address')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buyerEmailAddress = null;
    
    /**
     * Actions that can be performed on this payment:
     * 
     * - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
     * - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
     * - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
     * - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
     * 
     * @var ?array<string> $capabilities
     */
	#[\JMS\Serializer\Annotation\SerializedName('capabilities')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $capabilities = null;
    
    /**
     * Reflects the current status of a card payment. Contains only non-confidential information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CardPaymentDetails $cardDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('card_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CardPaymentDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CardPaymentDetails $cardDetails = null;
    
    /**
     * Stores details about a cash payment. Contains only non-confidential information. For more information, see 
     * 
     * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CashPaymentDetails $cashDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('cash_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CashPaymentDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CashPaymentDetails $cashDetails = null;
    
    /**
     * The timestamp of when the payment was created, in RFC 3339 format.
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
     * 
     * @var ?string $customerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customerId = null;
    
    /**
     * The action to be applied to the payment when the `delay_duration` has elapsed. This field
     * 
     * is read-only.
     * 
     * Current values include `CANCEL`.
     * 
     * @var ?string $delayAction
     */
	#[\JMS\Serializer\Annotation\SerializedName('delay_action')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delayAction = null;
    
    /**
     * The duration of time after the payment's creation when Square automatically applies the
     * 
     * `delay_action` to the payment. This automatic `delay_action` applies only to payments that
     * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
     * time period.
     * 
     * This field is specified as a time duration, in RFC 3339 format.
     * 
     * Notes:
     * This feature is only supported for card payments.
     * 
     * Default:
     * 
     * - Card-present payments: "PT36H" (36 hours) from the creation time.
     * - Card-not-present payments: "P7D" (7 days) from the creation time.
     * 
     * @var ?string $delayDuration
     */
	#[\JMS\Serializer\Annotation\SerializedName('delay_duration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delayDuration = null;
    
    /**
     * The read-only timestamp of when the `delay_action` is automatically applied,
     * 
     * in RFC 3339 format.
     * 
     * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
     * fields. The `created_at` field is generated by Square and might not exactly match the
     * time on your local machine.
     * 
     * @var ?string $delayedUntil
     */
	#[\JMS\Serializer\Annotation\SerializedName('delayed_until')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delayedUntil = null;
    
    /**
     * An optional ID of the employee associated with taking the payment.
     * 
     * @var ?string $employeeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('employee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $employeeId = null;
    
    /**
     * Stores details about an external payment. Contains only non-confidential information.
     * 
     * For more information, see 
     * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExternalPaymentDetails $externalDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('external_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExternalPaymentDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExternalPaymentDetails $externalDetails = null;
    
    /**
     * A unique ID for the payment.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The ID of the location associated with the payment.
     * 
     * @var ?string $locationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('location_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $locationId = null;
    
    /**
     * An optional note to include when creating a payment.
     * 
     * @var ?string $note
     */
	#[\JMS\Serializer\Annotation\SerializedName('note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $note = null;
    
    /**
     * The ID of the order associated with the payment.
     * 
     * @var ?string $orderId
     */
	#[\JMS\Serializer\Annotation\SerializedName('order_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $orderId = null;
    
    /**
     * The processing fees and fee adjustments assessed by Square for this payment.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ProcessingFee> $processingFee
     */
	#[\JMS\Serializer\Annotation\SerializedName('processing_fee')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ProcessingFee>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $processingFee = null;
    
    /**
     * The payment's receipt number.
     * 
     * The field is missing if a payment is canceled.
     * 
     * @var ?string $receiptNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('receipt_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $receiptNumber = null;
    
    /**
     * The URL for the payment's receipt.
     * 
     * The field is only populated for COMPLETED payments.
     * 
     * @var ?string $receiptUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('receipt_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $receiptUrl = null;
    
    /**
     * An optional ID that associates the payment with an entity in
     * 
     * another system.
     * 
     * @var ?string $referenceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('reference_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceId = null;
    
    /**
     * A list of `refund_id`s identifying refunds for the payment.
     * 
     * @var ?array<string> $refundIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('refund_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $refundIds = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $refundedMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('refunded_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $refundedMoney = null;
    
    /**
     * Represents fraud risk information for the associated payment.
     * 
     * 
     * When you take a payment through Square's Payments API (using the `CreatePayment`
     * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
     * can use this information to determine the course of action (for example,
     * provide the goods/services or refund the payment).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RiskEvaluation $riskEvaluation
     */
	#[\JMS\Serializer\Annotation\SerializedName('risk_evaluation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RiskEvaluation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RiskEvaluation $riskEvaluation = null;
    
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $shippingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('shipping_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $shippingAddress = null;
    
    /**
     * The source type for this payment.
     * 
     * 
     * Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
     * 
     * @var ?string $sourceType
     */
	#[\JMS\Serializer\Annotation\SerializedName('source_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceType = null;
    
    /**
     * Additional payment information that gets added to the customer's card statement
     * 
     * as part of the statement description.
     * 
     * Note that the `statement_description_identifier` might get truncated on the statement description
     * to fit the required information including the Square identifier (SQ *) and the name of the
     * seller taking the payment.
     * 
     * @var ?string $statementDescriptionIdentifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('statement_description_identifier')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $statementDescriptionIdentifier = null;
    
    /**
     * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $tipMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('tip_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $tipMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalMoney = null;
    
    /**
     * The timestamp of when the payment was last updated, in RFC 3339 format.
     * 
     * @var ?string $updatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedAt = null;
    
    /**
     * Used for optimistic concurrency. This opaque token identifies a specific version of the
     * 
     * `Payment` object.
     * 
     * @var ?string $versionToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('version_token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $versionToken = null;
    
    /**
     * Additional details about `WALLET` type payments. Contains only non-confidential information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DigitalWalletDetails $walletDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('wallet_details')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DigitalWalletDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DigitalWalletDetails $walletDetails = null;
    
	public function __construct()
	{
		$this->amountMoney = null;
		$this->appFeeMoney = null;
		$this->approvedMoney = null;
		$this->bankAccountDetails = null;
		$this->billingAddress = null;
		$this->buyerEmailAddress = null;
		$this->capabilities = null;
		$this->cardDetails = null;
		$this->cashDetails = null;
		$this->createdAt = null;
		$this->customerId = null;
		$this->delayAction = null;
		$this->delayDuration = null;
		$this->delayedUntil = null;
		$this->employeeId = null;
		$this->externalDetails = null;
		$this->id = null;
		$this->locationId = null;
		$this->note = null;
		$this->orderId = null;
		$this->processingFee = null;
		$this->receiptNumber = null;
		$this->receiptUrl = null;
		$this->referenceId = null;
		$this->refundIds = null;
		$this->refundedMoney = null;
		$this->riskEvaluation = null;
		$this->shippingAddress = null;
		$this->sourceType = null;
		$this->statementDescriptionIdentifier = null;
		$this->status = null;
		$this->tipMoney = null;
		$this->totalMoney = null;
		$this->updatedAt = null;
		$this->versionToken = null;
		$this->walletDetails = null;
	}
}
