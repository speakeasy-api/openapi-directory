"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import loyaltyeventdatetimefilter as shared_loyaltyeventdatetimefilter
from ..shared import loyaltyeventlocationfilter as shared_loyaltyeventlocationfilter
from ..shared import loyaltyeventloyaltyaccountfilter as shared_loyaltyeventloyaltyaccountfilter
from ..shared import loyaltyeventorderfilter as shared_loyaltyeventorderfilter
from ..shared import loyaltyeventtypefilter as shared_loyaltyeventtypefilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoyaltyEventFilter:
    r"""The filtering criteria. If the request specifies multiple filters,
    the endpoint uses a logical AND to evaluate them.
    """
    
    date_time_filter: Optional[shared_loyaltyeventdatetimefilter.LoyaltyEventDateTimeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time_filter'), 'exclude': lambda f: f is None }})
    r"""Filter events by date time range."""  
    location_filter: Optional[shared_loyaltyeventlocationfilter.LoyaltyEventLocationFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_filter'), 'exclude': lambda f: f is None }})
    r"""Filter events by location."""  
    loyalty_account_filter: Optional[shared_loyaltyeventloyaltyaccountfilter.LoyaltyEventLoyaltyAccountFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loyalty_account_filter'), 'exclude': lambda f: f is None }})
    r"""Filter events by loyalty account."""  
    order_filter: Optional[shared_loyaltyeventorderfilter.LoyaltyEventOrderFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_filter'), 'exclude': lambda f: f is None }})
    r"""Filter events by the order associated with the event."""  
    type_filter: Optional[shared_loyaltyeventtypefilter.LoyaltyEventTypeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type_filter'), 'exclude': lambda f: f is None }})
    r"""Filter events by event type."""  
    