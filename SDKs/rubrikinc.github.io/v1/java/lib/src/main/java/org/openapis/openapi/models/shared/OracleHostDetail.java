/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OracleHostDetail {
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public OracleHostDetail withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public OracleHostDetail withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public OracleHostDetail withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
     */
    @JsonProperty("hostLogRetentionHours")
    public Integer hostLogRetentionHours;

    public OracleHostDetail withHostLogRetentionHours(Integer hostLogRetentionHours) {
        this.hostLogRetentionHours = hostLogRetentionHours;
        return this;
    }
    
    /**
     * Path where the NFS share is mounted on the host.
     */
    @JsonProperty("hostMount")
    public String hostMount;

    public OracleHostDetail withHostMount(String hostMount) {
        this.hostMount = hostMount;
        return this;
    }
    
    /**
     * ID assigned to the standalone Oracle host.
     */
    @JsonProperty("id")
    public String id;

    public OracleHostDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An array that contains information about the objects in the infrastructure path of a specified Oracle database.
     */
    @JsonProperty("infraPath")
    public ManagedHierarchyObjectAncestor[] infraPath;

    public OracleHostDetail withInfraPath(ManagedHierarchyObjectAncestor[] infraPath) {
        this.infraPath = infraPath;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public OracleHostDetail withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Specifies an interval in minutes. This interval is the period between successive log backups.
     */
    @JsonProperty("logBackupFrequencyInMinutes")
    public Integer logBackupFrequencyInMinutes;

    public OracleHostDetail withLogBackupFrequencyInMinutes(Integer logBackupFrequencyInMinutes) {
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        return this;
    }
    
    /**
     * Specifies an interval in hours. Log backups are retained for the duration of the interval.
     */
    @JsonProperty("logRetentionHours")
    public Integer logRetentionHours;

    public OracleHostDetail withLogRetentionHours(Integer logRetentionHours) {
        this.logRetentionHours = logRetentionHours;
        return this;
    }
    
    /**
     * Hostname of the standalone Oracle host.
     */
    @JsonProperty("name")
    public String name;

    public OracleHostDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Number of channels used to backup the Oracle database.
     */
    @JsonProperty("numChannels")
    public Integer numChannels;

    public OracleHostDetail withNumChannels(Integer numChannels) {
        this.numChannels = numChannels;
        return this;
    }
    
    /**
     * Count of the number of databases on the Oracle RAC.
     */
    @JsonProperty("numDbs")
    public Integer numDbs;

    public OracleHostDetail withNumDbs(Integer numDbs) {
        this.numDbs = numDbs;
        return this;
    }
    
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public OracleHostDetail withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public OracleHostDetail withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Connectivity status of the Oracle RAC.
     */
    @JsonProperty("status")
    public String status;

    public OracleHostDetail withStatus(String status) {
        this.status = status;
        return this;
    }
    
    public OracleHostDetail(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("hostLogRetentionHours") Integer hostLogRetentionHours, @JsonProperty("hostMount") String hostMount, @JsonProperty("id") String id, @JsonProperty("infraPath") ManagedHierarchyObjectAncestor[] infraPath, @JsonProperty("logBackupFrequencyInMinutes") Integer logBackupFrequencyInMinutes, @JsonProperty("logRetentionHours") Integer logRetentionHours, @JsonProperty("name") String name, @JsonProperty("numChannels") Integer numChannels, @JsonProperty("numDbs") Integer numDbs, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("status") String status) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.hostLogRetentionHours = hostLogRetentionHours;
        this.hostMount = hostMount;
        this.id = id;
        this.infraPath = infraPath;
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        this.logRetentionHours = logRetentionHours;
        this.name = name;
        this.numChannels = numChannels;
        this.numDbs = numDbs;
        this.primaryClusterId = primaryClusterId;
        this.status = status;
  }
}
