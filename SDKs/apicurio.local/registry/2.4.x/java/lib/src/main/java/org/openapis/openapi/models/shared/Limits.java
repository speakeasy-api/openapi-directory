/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Limits - List of limitations on used resources, that are applied on the current instance of Registry.
 * Keys represent the resource type and are suffixed by the corresponding unit.
 * Values are integers. Only non-negative values are allowed, with the exception of -1, which means that the limit is not applied.
 */
public class Limits {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxArtifactDescriptionLengthChars")
    public Long maxArtifactDescriptionLengthChars;
    public Limits withMaxArtifactDescriptionLengthChars(Long maxArtifactDescriptionLengthChars) {
        this.maxArtifactDescriptionLengthChars = maxArtifactDescriptionLengthChars;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxArtifactLabelsCount")
    public Long maxArtifactLabelsCount;
    public Limits withMaxArtifactLabelsCount(Long maxArtifactLabelsCount) {
        this.maxArtifactLabelsCount = maxArtifactLabelsCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxArtifactNameLengthChars")
    public Long maxArtifactNameLengthChars;
    public Limits withMaxArtifactNameLengthChars(Long maxArtifactNameLengthChars) {
        this.maxArtifactNameLengthChars = maxArtifactNameLengthChars;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxArtifactPropertiesCount")
    public Long maxArtifactPropertiesCount;
    public Limits withMaxArtifactPropertiesCount(Long maxArtifactPropertiesCount) {
        this.maxArtifactPropertiesCount = maxArtifactPropertiesCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxArtifactsCount")
    public Long maxArtifactsCount;
    public Limits withMaxArtifactsCount(Long maxArtifactsCount) {
        this.maxArtifactsCount = maxArtifactsCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLabelSizeBytes")
    public Long maxLabelSizeBytes;
    public Limits withMaxLabelSizeBytes(Long maxLabelSizeBytes) {
        this.maxLabelSizeBytes = maxLabelSizeBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPropertyKeySizeBytes")
    public Long maxPropertyKeySizeBytes;
    public Limits withMaxPropertyKeySizeBytes(Long maxPropertyKeySizeBytes) {
        this.maxPropertyKeySizeBytes = maxPropertyKeySizeBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPropertyValueSizeBytes")
    public Long maxPropertyValueSizeBytes;
    public Limits withMaxPropertyValueSizeBytes(Long maxPropertyValueSizeBytes) {
        this.maxPropertyValueSizeBytes = maxPropertyValueSizeBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRequestsPerSecondCount")
    public Long maxRequestsPerSecondCount;
    public Limits withMaxRequestsPerSecondCount(Long maxRequestsPerSecondCount) {
        this.maxRequestsPerSecondCount = maxRequestsPerSecondCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxSchemaSizeBytes")
    public Long maxSchemaSizeBytes;
    public Limits withMaxSchemaSizeBytes(Long maxSchemaSizeBytes) {
        this.maxSchemaSizeBytes = maxSchemaSizeBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTotalSchemasCount")
    public Long maxTotalSchemasCount;
    public Limits withMaxTotalSchemasCount(Long maxTotalSchemasCount) {
        this.maxTotalSchemasCount = maxTotalSchemasCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxVersionsPerArtifactCount")
    public Long maxVersionsPerArtifactCount;
    public Limits withMaxVersionsPerArtifactCount(Long maxVersionsPerArtifactCount) {
        this.maxVersionsPerArtifactCount = maxVersionsPerArtifactCount;
        return this;
    }
    
}
