// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UgdcnSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type UgdcnRequestBodyCertificateParameters struct {
	// DocumentNumber
	DocumentNumber string `json:"DocumentNumber"`
}

// UgdcnRequestBodyFormatEnum - The format of the certificate in response.
type UgdcnRequestBodyFormatEnum string

const (
	UgdcnRequestBodyFormatEnumPdf UgdcnRequestBodyFormatEnum = "pdf"
)

func (e *UgdcnRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = UgdcnRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UgdcnRequestBodyFormatEnum: %s", s)
	}
}

// UgdcnRequestBody - Request format
type UgdcnRequestBody struct {
	CertificateParameters *UgdcnRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format UgdcnRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ugdcn504ApplicationJSONErrorEnum string

const (
	Ugdcn504ApplicationJSONErrorEnumGatewayTimeout Ugdcn504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ugdcn504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ugdcn504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn504ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ugdcn504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ugdcn504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ugdcn504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn504ApplicationJSON - Gateway timeout
type Ugdcn504ApplicationJSON struct {
	Error            *Ugdcn504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn503ApplicationJSONErrorEnum string

const (
	Ugdcn503ApplicationJSONErrorEnumServiceUnavailable Ugdcn503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ugdcn503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ugdcn503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn503ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ugdcn503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ugdcn503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ugdcn503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn503ApplicationJSON - Service unavailable
type Ugdcn503ApplicationJSON struct {
	Error            *Ugdcn503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn502ApplicationJSONErrorEnum string

const (
	Ugdcn502ApplicationJSONErrorEnumBadGatewy Ugdcn502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ugdcn502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ugdcn502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn502ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ugdcn502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ugdcn502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ugdcn502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn502ApplicationJSON - Bad gateway
type Ugdcn502ApplicationJSON struct {
	Error            *Ugdcn502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn500ApplicationJSONErrorEnum string

const (
	Ugdcn500ApplicationJSONErrorEnumInternalServerError Ugdcn500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ugdcn500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ugdcn500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn500ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn500ApplicationJSONErrorDescriptionEnumInternalServerError Ugdcn500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ugdcn500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ugdcn500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn500ApplicationJSON - Internal server error
type Ugdcn500ApplicationJSON struct {
	Error            *Ugdcn500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn404ApplicationJSONErrorEnum string

const (
	Ugdcn404ApplicationJSONErrorEnumRecordNotFound Ugdcn404ApplicationJSONErrorEnum = "record_not_found"
	Ugdcn404ApplicationJSONErrorEnumURLNotFound    Ugdcn404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ugdcn404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ugdcn404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn404ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ugdcn404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ugdcn404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ugdcn404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ugdcn404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ugdcn404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn404ApplicationJSON - No record found
type Ugdcn404ApplicationJSON struct {
	Error            *Ugdcn404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn401ApplicationJSONErrorEnum string

const (
	Ugdcn401ApplicationJSONErrorEnumInvalidAuthentication Ugdcn401ApplicationJSONErrorEnum = "invalid_authentication"
	Ugdcn401ApplicationJSONErrorEnumInvalidAuthorization  Ugdcn401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ugdcn401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ugdcn401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn401ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ugdcn401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ugdcn401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ugdcn401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ugdcn401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ugdcn401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn401ApplicationJSON - Unauthorized access
type Ugdcn401ApplicationJSON struct {
	Error            *Ugdcn401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ugdcn400ApplicationJSONErrorEnum string

const (
	Ugdcn400ApplicationJSONErrorEnumMissingParameter Ugdcn400ApplicationJSONErrorEnum = "missing_parameter"
	Ugdcn400ApplicationJSONErrorEnumInvalidParameter Ugdcn400ApplicationJSONErrorEnum = "invalid_parameter"
	Ugdcn400ApplicationJSONErrorEnumInvalidFormat    Ugdcn400ApplicationJSONErrorEnum = "invalid_format"
	Ugdcn400ApplicationJSONErrorEnumInvalidTxnid     Ugdcn400ApplicationJSONErrorEnum = "invalid_txnid"
	Ugdcn400ApplicationJSONErrorEnumInvalidConsentid Ugdcn400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ugdcn400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ugdcn400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ugdcn400ApplicationJSONErrorDescriptionEnum string

const (
	Ugdcn400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ugdcn400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ugdcn400ApplicationJSONErrorDescriptionEnumBadRequest                              Ugdcn400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ugdcn400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ugdcn400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ugdcn400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ugdcn400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ugdcn400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ugdcn400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ugdcn400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ugdcn400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ugdcn400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ugdcn400ApplicationJSON - Bad request
type Ugdcn400ApplicationJSON struct {
	Error            *Ugdcn400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ugdcn400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type UgdcnResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ugdcn400ApplicationJSONObject *Ugdcn400ApplicationJSON
	// Unauthorized access
	Ugdcn401ApplicationJSONObject *Ugdcn401ApplicationJSON
	// No record found
	Ugdcn404ApplicationJSONObject *Ugdcn404ApplicationJSON
	// Internal server error
	Ugdcn500ApplicationJSONObject *Ugdcn500ApplicationJSON
	// Bad gateway
	Ugdcn502ApplicationJSONObject *Ugdcn502ApplicationJSON
	// Service unavailable
	Ugdcn503ApplicationJSONObject *Ugdcn503ApplicationJSON
	// Gateway timeout
	Ugdcn504ApplicationJSONObject *Ugdcn504ApplicationJSON
}
