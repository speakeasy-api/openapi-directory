"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Report:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def getreportstatusby_id(self, request: operations.GetreportstatusbyIDRequest) -> operations.GetreportstatusbyIDResponse:
        r"""Get report status by ID
        Retrieves the Subscription's report status, filtering by its reportId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetreportstatusbyIDRequest, base_url, '/report/reportStatus/{reportId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetreportstatusbyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def requestreportby_status(self, request: operations.RequestreportbyStatusRequest) -> operations.RequestreportbyStatusResponse:
        r"""Retrieve Subscription report by Status
        Retrieves Subscriptions' reports, filtering by status. The report will be sent by email, to the address inserted in the API's path.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/report/subscriptionsByStatus'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RequestreportbyStatusRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestreportbyStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def requestreportbydate(self, request: operations.RequestreportbydateRequest) -> operations.RequestreportbydateResponse:
        r"""Retrieve Subscription report by date
        Retrieves a report with the subscriptions created at the date interval requested
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/report/subscriptionsByDate'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RequestreportbydateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestreportbydateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def requestreportbyorderdate(self, request: operations.RequestreportbyorderdateRequest) -> operations.RequestreportbyorderdateResponse:
        r"""Retrieve Subscription report by order date
        Retrieves a report regarding the Subscriptions created during the date interval of orders.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/report/subscriptionsOrderByDate'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RequestreportbyorderdateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestreportbyorderdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def requestreportbyschedule(self, request: operations.RequestreportbyscheduleRequest) -> operations.RequestreportbyscheduleResponse:
        r"""Retrieve Subscription report by schedule
        Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/report/subscriptionsScheduled'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RequestreportbyscheduleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestreportbyscheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def requestreportbyupdate(self, request: operations.RequestreportbyupdateRequest) -> operations.RequestreportbyupdateResponse:
        r"""Request report by update
        Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API's path.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/report/subscriptionsUpdated'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RequestreportbyupdateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RequestreportbyupdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    