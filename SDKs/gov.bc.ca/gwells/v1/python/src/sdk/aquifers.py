"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Aquifers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def aquifers_files_list(self, request: operations.AquifersFilesListRequest) -> operations.AquifersFilesListResponse:
        r"""list files found for the aquifer identified in the uri"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AquifersFilesListRequest, base_url, '/aquifers/{aquifer_id}/files', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AquifersFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AquifersFilesList200ApplicationJSON])
                res.aquifers_files_list_200_application_json_object = out

        return res

    def aquifers_list(self, request: operations.AquifersListRequest) -> operations.AquifersListResponse:
        r"""return a list of aquifers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aquifers/'
        
        query_params = utils.get_query_params(operations.AquifersListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AquifersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AquifersList200ApplicationJSON])
                res.aquifers_list_200_application_json_object = out

        return res

    def aquifers_names_list(self, request: operations.AquifersNamesListRequest) -> operations.AquifersNamesListResponse:
        r"""List all aquifers in a simplified format"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/aquifers/names/'
        
        query_params = utils.get_query_params(operations.AquifersNamesListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AquifersNamesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AquiferSerializerBasic]])
                res.aquifer_serializer_basics = out

        return res

    def aquifers_read(self, request: operations.AquifersReadRequest) -> operations.AquifersReadResponse:
        r"""return details of aquifers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AquifersReadRequest, base_url, '/aquifers/{aquifer_id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AquifersReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Aquifer])
                res.aquifer = out

        return res

    