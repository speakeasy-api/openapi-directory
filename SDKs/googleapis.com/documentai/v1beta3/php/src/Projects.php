<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Fetches processor types. Note that we don't use ListProcessorTypes here, because it isn't paginated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesResponse
     */
	public function documentaiProjectsLocationsFetchProcessorTypes(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}:fetchProcessorTypes', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsFetchProcessorTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3FetchProcessorTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3FetchProcessorTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListResponse
     */
	public function documentaiProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudLocationListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudLocationListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelResponse
     */
	public function documentaiProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a processor type detail.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetResponse
     */
	public function documentaiProjectsLocationsProcessorTypesGet(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ProcessorType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ProcessorType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the processor types that exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListResponse
     */
	public function documentaiProjectsLocationsProcessorTypesList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processorTypes', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ListProcessorTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ListProcessorTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a processor from the ProcessorType provided. The processor will be at `ENABLED` state by default after its creation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateResponse
     */
	public function documentaiProjectsLocationsProcessorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processors', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3ProcessorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3Processor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3Processor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disables a processor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableResponse
     */
	public function documentaiProjectsLocationsProcessorsDisable(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:disable', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables a processor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableResponse
     */
	public function documentaiProjectsLocationsProcessorsEnable(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:enable', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a document for Human Review. The input document should be processed by the specified processor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse
     */
	public function documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{humanReviewConfig}:reviewDocument', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3ReviewDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all processors which belong to this project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListResponse
     */
	public function documentaiProjectsLocationsProcessorsList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processors', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ListProcessorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ListProcessorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:batchProcess', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3BatchProcessRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the processor version, all artifacts under the processor version will be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deploys the processor version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsDeploy(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:deploy', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Evaluates a ProcessorVersion against annotated documents, producing an Evaluation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{processorVersion}:evaluateProcessorVersion', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a set of evaluations for a given processor version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/evaluations', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ListEvaluationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ListEvaluationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports a processor version from source processor version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersion(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processorVersions:importProcessorVersion', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3ImportProcessorVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all versions of a processor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processorVersions', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ListProcessorVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ListProcessorVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a single document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsProcess(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:process', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3ProcessRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDocumentaiV1beta3ProcessResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDocumentaiV1beta3ProcessResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trains a new processor version. Operation metadata is returned as TrainProcessorVersionMetadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsTrain(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{parent}/processorVersions:train', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3TrainProcessorVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeploys the processor version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse
     */
	public function documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{name}:undeploy', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse
     */
	public function documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion(
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta3/{processor}:setDefaultProcessorVersion', \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
}