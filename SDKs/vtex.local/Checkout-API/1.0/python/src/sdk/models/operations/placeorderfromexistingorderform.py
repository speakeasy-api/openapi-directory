"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaceOrderFromExistingOrderFormRequestBody:
    
    interest_value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interestValue') }})
    r"""Interest rate to be used in case it applies."""  
    reference_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId') }})
    r"""ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter."""  
    reference_value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceValue') }})
    r"""Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Total value of the order without separating cents. For example, $24.99 is represented `2499`."""  
    optin_news_letter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optinNewsLetter'), 'exclude': lambda f: f is None }})
    r"""True if the shopper opted to receive the newsletter."""  
    save_personal_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savePersonalData'), 'exclude': lambda f: f is None }})
    r"""`true` if the shopper's data provided during checkout should be saved for future reference."""  
    

@dataclasses.dataclass
class PlaceOrderFromExistingOrderFormRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    order_form_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orderFormId', 'style': 'simple', 'explode': False }})
    r"""ID of the `orderForm` corresponding to the cart from which to place the order."""  
    request_body: Optional[PlaceOrderFromExistingOrderFormRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PlaceOrderFromExistingOrderFormResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    place_order_from_existing_order_form_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    