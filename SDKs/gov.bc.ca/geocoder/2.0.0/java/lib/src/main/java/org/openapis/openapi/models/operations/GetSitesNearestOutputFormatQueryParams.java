/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSitesNearestOutputFormatQueryParams {
    /**
     * If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=brief")
    public Boolean brief;
    public GetSitesNearestOutputFormatQueryParams withBrief(Boolean brief) {
        this.brief = brief;
        return this;
    }
    
    /**
     * If true, excludes sites that are units of a parent site
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=excludeUnits")
    public Boolean excludeUnits;
    public GetSitesNearestOutputFormatQueryParams withExcludeUnits(Boolean excludeUnits) {
        this.excludeUnits = excludeUnits;
        return this;
    }
    
    /**
     * Describes the nature of the address location. See &lt;a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target="_blank"&gt;locationDescriptor&lt;/a&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locationDescriptor")
    public GetSitesNearestOutputFormatLocationDescriptorEnum locationDescriptor;
    public GetSitesNearestOutputFormatQueryParams withLocationDescriptor(GetSitesNearestOutputFormatLocationDescriptorEnum locationDescriptor) {
        this.locationDescriptor = locationDescriptor;
        return this;
    }
    
    /**
     * The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxDistance")
    public Long maxDistance;
    public GetSitesNearestOutputFormatQueryParams withMaxDistance(Long maxDistance) {
        this.maxDistance = maxDistance;
        return this;
    }
    
    /**
     * If true, excludes sites without a civic address
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=onlyCivic")
    public Boolean onlyCivic;
    public GetSitesNearestOutputFormatQueryParams withOnlyCivic(Boolean onlyCivic) {
        this.onlyCivic = onlyCivic;
        return this;
    }
    
    /**
     * The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank"&gt;outputSRS&lt;/a&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=outputSRS")
    public GetSitesNearestOutputFormatOutputSrsEnum outputSRS;
    public GetSitesNearestOutputFormatQueryParams withOutputSRS(GetSitesNearestOutputFormatOutputSrsEnum outputSRS) {
        this.outputSRS = outputSRS;
        return this;
    }
    
    /**
     * Centre point of search. See &lt;a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#point target="_blank"&gt;point&lt;/a&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=point")
    public String point;
    public GetSitesNearestOutputFormatQueryParams withPoint(String point) {
        this.point = point;
        return this;
    }
    
    /**
     * The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=setBack")
    public Long setBack;
    public GetSitesNearestOutputFormatQueryParams withSetBack(Long setBack) {
        this.setBack = setBack;
        return this;
    }
    
}
