// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetChatMessagesSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type GetChatMessagesPathParams struct {
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type GetChatMessagesQueryParams struct {
	// The query date for which you would like to get the chat messages.
	Date *types.Date `queryParam:"style=form,explode=true,name=date"`
	// **Optional** <br>
	// Set the value of this field to `true` to include edited and deleted messages in the response.
	IncludeDeletedAndEditedMessage *string `queryParam:"style=form,explode=true,name=include_deleted_and_edited_message"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned with a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The channel Id of a channel inside which the current user had chat conversations. Messages that were sent and/or received between the user and the channel is displayed.
	//
	// Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
	ToChannel *string `queryParam:"style=form,explode=true,name=to_channel"`
	// The email address of a chat contact with whom the current user chatted. Messages that were sent and/or received between the user and the contact is displayed.
	//
	// Note: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel.
	ToContact *string `queryParam:"style=form,explode=true,name=to_contact"`
}

type GetChatMessagesRequest struct {
	PathParams  GetChatMessagesPathParams
	QueryParams GetChatMessagesQueryParams
	Security    GetChatMessagesSecurity
}

// GetChatMessages200ApplicationXMLMessagesStatusEnum - This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
//
// This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
type GetChatMessages200ApplicationXMLMessagesStatusEnum string

const (
	GetChatMessages200ApplicationXMLMessagesStatusEnumDeleted GetChatMessages200ApplicationXMLMessagesStatusEnum = "Deleted"
	GetChatMessages200ApplicationXMLMessagesStatusEnumEdited  GetChatMessages200ApplicationXMLMessagesStatusEnum = "Edited"
	GetChatMessages200ApplicationXMLMessagesStatusEnumNormal  GetChatMessages200ApplicationXMLMessagesStatusEnum = "Normal"
)

func (e *GetChatMessages200ApplicationXMLMessagesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Deleted":
		fallthrough
	case "Edited":
		fallthrough
	case "Normal":
		*e = GetChatMessages200ApplicationXMLMessagesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChatMessages200ApplicationXMLMessagesStatusEnum: %s", s)
	}
}

type GetChatMessages200ApplicationXMLMessages struct {
	// The date-time at which the message was sent.
	DateTime *string
	// Message ID: Unique Identifier of the message.
	ID *string
	// The message content.
	Message *string
	// Unique identifier of a reply. This field will only be returned if the message is a reply message.
	ReplyMainMessageID *string
	// Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
	//
	// The value of this field will be in **long** format(int64).
	ReplyMainMessageTimestamp *int64
	// The email address of the sender of the message.
	Sender *string
	// This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
	//
	// This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
	Status *GetChatMessages200ApplicationXMLMessagesStatusEnum
	// The timestamp of the message in microseconds.
	Timestamp *int64
}

// GetChatMessages200ApplicationXML - Chat message object.
type GetChatMessages200ApplicationXML struct {
	// The date provided in the query parameter. If a date is not provided, the default value is the **current date**.
	Date *types.Date
	// List of message(s).
	Messages []GetChatMessages200ApplicationXMLMessages
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	//
	NextPageToken *string
	// The number of records returned with a single API call.
	PageSize *int64
}

// GetChatMessages200ApplicationJSONMessagesStatusEnum - This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
//
// This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
type GetChatMessages200ApplicationJSONMessagesStatusEnum string

const (
	GetChatMessages200ApplicationJSONMessagesStatusEnumDeleted GetChatMessages200ApplicationJSONMessagesStatusEnum = "Deleted"
	GetChatMessages200ApplicationJSONMessagesStatusEnumEdited  GetChatMessages200ApplicationJSONMessagesStatusEnum = "Edited"
	GetChatMessages200ApplicationJSONMessagesStatusEnumNormal  GetChatMessages200ApplicationJSONMessagesStatusEnum = "Normal"
)

func (e *GetChatMessages200ApplicationJSONMessagesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Deleted":
		fallthrough
	case "Edited":
		fallthrough
	case "Normal":
		*e = GetChatMessages200ApplicationJSONMessagesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChatMessages200ApplicationJSONMessagesStatusEnum: %s", s)
	}
}

type GetChatMessages200ApplicationJSONMessages struct {
	// The date-time at which the message was sent.
	DateTime *string `json:"date_time,omitempty"`
	// Message ID: Unique Identifier of the message.
	ID *string `json:"id,omitempty"`
	// The message content.
	Message *string `json:"message,omitempty"`
	// Unique identifier of a reply. This field will only be returned if the message is a reply message.
	ReplyMainMessageID *string `json:"reply_main_message_id,omitempty"`
	// Timestamp of when the reply message was sent. This field will only be returned if the message is a reply message.
	//
	// The value of this field will be in **long** format(int64).
	ReplyMainMessageTimestamp *int64 `json:"reply_main_message_timestamp,omitempty"`
	// The email address of the sender of the message.
	Sender *string `json:"sender,omitempty"`
	// This field indicates whether a message is an original message(unedited), an edited message or a deleted message.
	//
	// This field is only returned if you set the value of `for include_deleted_and_edited_message` query parameter to `true`.
	Status *GetChatMessages200ApplicationJSONMessagesStatusEnum `json:"status,omitempty"`
	// The timestamp of the message in microseconds.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// GetChatMessages200ApplicationJSON - Chat message object.
type GetChatMessages200ApplicationJSON struct {
	// The date provided in the query parameter. If a date is not provided, the default value is the **current date**.
	Date *types.Date `json:"date,omitempty"`
	// List of message(s).
	Messages []GetChatMessages200ApplicationJSONMessages `json:"messages,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	//
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
}

type GetChatMessagesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:**`200`<br>
	// List of chat messages returned.
	GetChatMessages200ApplicationJSONObject *GetChatMessages200ApplicationJSON
}
