/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AuditLogEventContext - The context from which this event originated.
 */
public class AuditLogEventContext {
    /**
     * The authentication method used in the context of an API request.
     * Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_authentication_method")
    public AuditLogEventContextApiAuthenticationMethodEnum apiAuthenticationMethod;
    public AuditLogEventContext withApiAuthenticationMethod(AuditLogEventContextApiAuthenticationMethodEnum apiAuthenticationMethod) {
        this.apiAuthenticationMethod = apiAuthenticationMethod;
        return this;
    }
    
    /**
     * The IP address of the client that initiated the event, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_ip_address")
    public String clientIpAddress;
    public AuditLogEventContext withClientIpAddress(String clientIpAddress) {
        this.clientIpAddress = clientIpAddress;
        return this;
    }
    
    /**
     * The type of context.
     * Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context_type")
    public AuditLogEventContextContextTypeEnum contextType;
    public AuditLogEventContext withContextType(AuditLogEventContextContextTypeEnum contextType) {
        this.contextType = contextType;
        return this;
    }
    
    /**
     * The name of the OAuth App that initiated the event.
     * Only present if the `api_authentication_method` is `oauth`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_app_name")
    public String oauthAppName;
    public AuditLogEventContext withOauthAppName(String oauthAppName) {
        this.oauthAppName = oauthAppName;
        return this;
    }
    
    /**
     * The user agent of the client that initiated the event, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_agent")
    public String userAgent;
    public AuditLogEventContext withUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }
    
}
