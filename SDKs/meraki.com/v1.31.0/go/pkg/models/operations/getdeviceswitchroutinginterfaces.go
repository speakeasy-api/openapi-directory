// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetDeviceSwitchRoutingInterfacesPathParams struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

type GetDeviceSwitchRoutingInterfacesRequest struct {
	PathParams GetDeviceSwitchRoutingInterfacesPathParams
}

// GetDeviceSwitchRoutingInterfaces200ApplicationJSONIpv6 - IPv6 addressing
type GetDeviceSwitchRoutingInterfaces200ApplicationJSONIpv6 struct {
	// IPv6 address
	Address *string `json:"address,omitempty"`
	// Assignment mode
	AssignmentMode *string `json:"assignmentMode,omitempty"`
	// IPv6 gateway
	Gateway *string `json:"gateway,omitempty"`
	// IPv6 subnet
	Prefix *string `json:"prefix,omitempty"`
}

// GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfSettings - IPv4 OSPF Settings
type GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfSettings struct {
	// Area id
	Area *string `json:"area,omitempty"`
	// OSPF Cost
	Cost *int64 `json:"cost,omitempty"`
	// Disable sending Hello packets on this interface's IPv4 area
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

// GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfV3 - IPv6 OSPF Settings
type GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfV3 struct {
	// Area id
	Area *string `json:"area,omitempty"`
	// OSPF Cost
	Cost *int64 `json:"cost,omitempty"`
	// Disable sending Hello packets on this interface's IPv6 area
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

type GetDeviceSwitchRoutingInterfaces200ApplicationJSON struct {
	// IPv4 default gateway
	DefaultGateway *string `json:"defaultGateway,omitempty"`
	// The id
	InterfaceID *string `json:"interfaceId,omitempty"`
	// IPv4 address
	InterfaceIP *string `json:"interfaceIp,omitempty"`
	// IPv6 addressing
	Ipv6 *GetDeviceSwitchRoutingInterfaces200ApplicationJSONIpv6 `json:"ipv6,omitempty"`
	// Multicast routing status
	MulticastRouting *string `json:"multicastRouting,omitempty"`
	// The name
	Name *string `json:"name,omitempty"`
	// IPv4 OSPF Settings
	OspfSettings *GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfSettings `json:"ospfSettings,omitempty"`
	// IPv6 OSPF Settings
	OspfV3 *GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfV3 `json:"ospfV3,omitempty"`
	// IPv4 subnet
	Subnet *string `json:"subnet,omitempty"`
	// VLAN id
	VlanID *int64 `json:"vlanId,omitempty"`
}

type GetDeviceSwitchRoutingInterfacesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetDeviceSwitchRoutingInterfaces200ApplicationJSONObjects []GetDeviceSwitchRoutingInterfaces200ApplicationJSON
}
