// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type EarningWithTQSStatusEnum string

const (
	EarningWithTQSStatusEnumPaid    EarningWithTQSStatusEnum = "paid"
	EarningWithTQSStatusEnumPending EarningWithTQSStatusEnum = "pending"
	EarningWithTQSStatusEnumFailed  EarningWithTQSStatusEnum = "failed"
)

func (e EarningWithTQSStatusEnum) ToPointer() *EarningWithTQSStatusEnum {
	return &e
}

func (e *EarningWithTQSStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paid":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		*e = EarningWithTQSStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EarningWithTQSStatusEnum: %v", v)
	}
}

type EarningWithTQS struct {
	Amount   *float32 `json:"amount,omitempty"`
	Currency *string  `json:"currency,omitempty"`
	// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
	DueDate *time.Time `json:"due_date,omitempty"`
	// Is this score above or below the average among other vendors in the same project?
	IsAboveAverage *bool                     `json:"is_above_average,omitempty"`
	ProjectID      *int64                    `json:"project_id,omitempty"`
	Score          *float32                  `json:"score,omitempty"`
	Status         *EarningWithTQSStatusEnum `json:"status,omitempty"`
	// The number of translated strings by this translator which was edited by a proofreader.
	StringsEdited *int64 `json:"strings_edited,omitempty"`
	// The number of translated strings by this translator.
	StringsTranslated *int64 `json:"strings_translated,omitempty"`
	Words             *int64 `json:"words,omitempty"`
	WordsApproved     *int64 `json:"words_approved,omitempty"`
	WordsTranslated   *int64 `json:"words_translated,omitempty"`
}
