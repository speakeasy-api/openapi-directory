/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * Account - Success
 */
public class Account {
    
    public EmbeddedResource accountTier;

    public Account withAccountTier(EmbeddedResource accountTier) {
        this.accountTier = accountTier;
        return this;
    }
    
    /**
     * Datetime of when the Account was archived, if archived
     */
    
    public OffsetDateTime archivedAt;

    public Account withArchivedAt(OffsetDateTime archivedAt) {
        this.archivedAt = archivedAt;
        return this;
    }
    
    /**
     * City
     */
    
    public String city;

    public Account withCity(String city) {
        this.city = city;
        return this;
    }
    
    
    public EmbeddedResource companyStage;

    public Account withCompanyStage(EmbeddedResource companyStage) {
        this.companyStage = companyStage;
        return this;
    }
    
    /**
     * Type of the Account's company
     */
    
    public String companyType;

    public Account withCompanyType(String companyType) {
        this.companyType = companyType;
        return this;
    }
    
    /**
     * Conversational name of the Account
     */
    
    public String conversationalName;

    public Account withConversationalName(String conversationalName) {
        this.conversationalName = conversationalName;
        return this;
    }
    
    /**
     * Country
     */
    
    public String country;

    public Account withCountry(String country) {
        this.country = country;
        return this;
    }
    
    
    public EmbeddedAccountCounts counts;

    public Account withCounts(EmbeddedAccountCounts counts) {
        this.counts = counts;
        return this;
    }
    
    /**
     * Datetime of when the Account was created
     */
    
    public OffsetDateTime createdAt;

    public Account withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    
    public EmbeddedResource creator;

    public Account withCreator(EmbeddedResource creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * CRM ID
     */
    
    public String crmId;

    public Account withCrmId(String crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     * CRM object type
     */
    
    public String crmObjectType;

    public Account withCrmObjectType(String crmObjectType) {
        this.crmObjectType = crmObjectType;
        return this;
    }
    
    /**
     * CRM url
     */
    
    public String crmUrl;

    public Account withCrmUrl(String crmUrl) {
        this.crmUrl = crmUrl;
        return this;
    }
    
    /**
     * Custom fields are defined by the user's team. Only fields with values are presented in the API.
     */
    
    public java.util.Map<String, Object> customFields;

    public Account withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Description
     */
    
    public String description;

    public Account withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Whether this company has opted out of communications. Do not contact someone at this company when this is set to true
     */
    
    public Boolean doNotContact;

    public Account withDoNotContact(Boolean doNotContact) {
        this.doNotContact = doNotContact;
        return this;
    }
    
    /**
     * Website domain, not a fully qualified URI
     */
    
    public String domain;

    public Account withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Date or year of founding
     */
    
    public String founded;

    public Account withFounded(String founded) {
        this.founded = founded;
        return this;
    }
    
    /**
     * ID of Account
     */
    
    public Long id;

    public Account withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Industry
     */
    
    public String industry;

    public Account withIndustry(String industry) {
        this.industry = industry;
        return this;
    }
    
    /**
     * Datetime this Account was last contacted
     */
    
    public OffsetDateTime lastContactedAt;

    public Account withLastContactedAt(OffsetDateTime lastContactedAt) {
        this.lastContactedAt = lastContactedAt;
        return this;
    }
    
    
    public EmbeddedResource lastContactedBy;

    public Account withLastContactedBy(EmbeddedResource lastContactedBy) {
        this.lastContactedBy = lastContactedBy;
        return this;
    }
    
    
    public EmbeddedResource lastContactedPerson;

    public Account withLastContactedPerson(EmbeddedResource lastContactedPerson) {
        this.lastContactedPerson = lastContactedPerson;
        return this;
    }
    
    /**
     * The type of the last touch to this Account. Can be call, email, other
     */
    
    public String lastContactedType;

    public Account withLastContactedType(String lastContactedType) {
        this.lastContactedType = lastContactedType;
        return this;
    }
    
    /**
     * Full LinkedIn url
     */
    
    public String linkedinUrl;

    public Account withLinkedinUrl(String linkedinUrl) {
        this.linkedinUrl = linkedinUrl;
        return this;
    }
    
    /**
     * Time locale
     */
    
    public String locale;

    public Account withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * Account Full Name
     */
    
    public String name;

    public Account withName(String name) {
        this.name = name;
        return this;
    }
    
    
    public EmbeddedResource owner;

    public Account withOwner(EmbeddedResource owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Mapped owner field from the CRM
     */
    
    public String ownerCrmId;

    public Account withOwnerCrmId(String ownerCrmId) {
        this.ownerCrmId = ownerCrmId;
        return this;
    }
    
    /**
     * Phone number without formatting
     */
    
    public String phone;

    public Account withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Postal code
     */
    
    public String postalCode;

    public Account withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * Estimated revenue range
     */
    
    public String revenueRange;

    public Account withRevenueRange(String revenueRange) {
        this.revenueRange = revenueRange;
        return this;
    }
    
    /**
     * Estimated number of people in employment
     */
    
    public String size;

    public Account withSize(String size) {
        this.size = size;
        return this;
    }
    
    /**
     * State
     */
    
    public String state;

    public Account withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Street name and number
     */
    
    public String street;

    public Account withStreet(String street) {
        this.street = street;
        return this;
    }
    
    /**
     * All tags applied to this Account
     */
    
    public String[] tags;

    public Account withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Twitter handle, with @
     */
    
    public String twitterHandle;

    public Account withTwitterHandle(String twitterHandle) {
        this.twitterHandle = twitterHandle;
        return this;
    }
    
    /**
     * Datetime of when the Account was last updated
     */
    
    public OffsetDateTime updatedAt;

    public Account withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values
     */
    
    public java.util.Map<String, Object> userRelationships;

    public Account withUserRelationships(java.util.Map<String, Object> userRelationships) {
        this.userRelationships = userRelationships;
        return this;
    }
    
    /**
     * Website
     */
    
    public String website;

    public Account withWebsite(String website) {
        this.website = website;
        return this;
    }
    
    public Account(){}
}
