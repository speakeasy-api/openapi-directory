// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// OrgsListMembershipsForAuthenticatedUserStateEnum - Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
type OrgsListMembershipsForAuthenticatedUserStateEnum string

const (
	OrgsListMembershipsForAuthenticatedUserStateEnumActive  OrgsListMembershipsForAuthenticatedUserStateEnum = "active"
	OrgsListMembershipsForAuthenticatedUserStateEnumPending OrgsListMembershipsForAuthenticatedUserStateEnum = "pending"
)

func (e *OrgsListMembershipsForAuthenticatedUserStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "pending":
		*e = OrgsListMembershipsForAuthenticatedUserStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsListMembershipsForAuthenticatedUserStateEnum: %s", s)
	}
}

type OrgsListMembershipsForAuthenticatedUserRequest struct {
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
	State *OrgsListMembershipsForAuthenticatedUserStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type OrgsListMembershipsForAuthenticatedUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	OrgMemberships []shared.OrgMembership
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
