"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Audit:
    r"""The agency’s monitoring process may detect potential violations through a review of a committee’s reports or through a Commission audit. By law, all enforcement cases must remain confidential until they’re closed.
    
     The Commission is required by law to audit Presidential campaigns that accept public funds. In addition, the Commission audits a committee when it appears not to have met the threshold requirements for substantial compliance with the Federal Election Campaign Act. The audit determines whether the committee complied with limitations, prohibitions and disclosure requirements. 
    
     These endpoints contain Final Audit Reports approved by the Commission since inception.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_audit_case_(self, request: operations.GetAuditCaseRequest) -> operations.GetAuditCaseResponse:
        r"""This endpoint contains Final Audit Reports approved by the Commission since inception.
        The search can be based on information about the audited committee (Name, FEC ID Number, Type, 
        Election Cycle) or the issues covered in the report.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/audit-case/'
        
        query_params = utils.get_query_params(operations.GetAuditCaseRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuditCaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuditCasePage])
                res.audit_case_page = out

        return res

    def get_audit_category_(self, request: operations.GetAuditCategoryRequest) -> operations.GetAuditCategoryResponse:
        r"""This lists the options for the categories and subcategories available in the /audit-search/ endpoint."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/audit-category/'
        
        query_params = utils.get_query_params(operations.GetAuditCategoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuditCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuditCategoryPage])
                res.audit_category_page = out

        return res

    def get_audit_primary_category_(self, request: operations.GetAuditPrimaryCategoryRequest) -> operations.GetAuditPrimaryCategoryResponse:
        r"""This lists the options for the primary categories available in the /audit-search/ endpoint."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/audit-primary-category/'
        
        query_params = utils.get_query_params(operations.GetAuditPrimaryCategoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuditPrimaryCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuditPrimaryCategoryPage])
                res.audit_primary_category_page = out

        return res

    def get_names_audit_candidates_(self, request: operations.GetNamesAuditCandidatesRequest) -> operations.GetNamesAuditCandidatesResponse:
        r"""Search for candidates or committees by name. If you're looking for information on a
        particular person or group, using a name to find the `candidate_id` or `committee_id` on
        this endpoint can be a helpful first step.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/names/audit_candidates/'
        
        query_params = utils.get_query_params(operations.GetNamesAuditCandidatesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamesAuditCandidatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuditCandidateSearchList])
                res.audit_candidate_search_list = out

        return res

    def get_names_audit_committees_(self, request: operations.GetNamesAuditCommitteesRequest) -> operations.GetNamesAuditCommitteesResponse:
        r"""Search for candidates or committees by name. If you're looking for information on a
        particular person or group, using a name to find the `candidate_id` or `committee_id` on
        this endpoint can be a helpful first step.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/names/audit_committees/'
        
        query_params = utils.get_query_params(operations.GetNamesAuditCommitteesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamesAuditCommitteesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuditCommitteeSearchList])
                res.audit_committee_search_list = out

        return res

    