/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Status of the expense proof
 */
export enum GetSpacesSpaceIdFoldersIdExpenseProofsStatusEnum {
  R = "R",
  W = "W",
  V = "V",
}

export class GetSpacesSpaceIdFoldersIdExpenseProofsRequest extends SpeakeasyBase {
  /**
   * date range of the documents
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Date" })
  date?: string;

  /**
   * date range of attachment
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FolderDate",
  })
  folderDate?: string;

  /**
   * To return expense proofs not attached to an expense report
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NoExpenseReport",
  })
  noExpenseReport?: boolean;

  /**
   * index range of the results
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Range" })
  range?: string;

  /**
   * Status of the expense proof
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Status",
  })
  status?: GetSpacesSpaceIdFoldersIdExpenseProofsStatusEnum;

  /**
   * Id of the folder
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * Id of the space
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spaceId",
  })
  spaceId: string;
}

export class GetSpacesSpaceIdFoldersIdExpenseProofsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A list of expense proof of the folder (if the folder is social the PersonId is also returned)
   */
  @SpeakeasyMetadata({ elemType: shared.ExpenseProof })
  getSpacesSpaceIdFoldersIdExpenseProofs200ApplicationJSONAllOfs?: shared.ExpenseProof[];
}
