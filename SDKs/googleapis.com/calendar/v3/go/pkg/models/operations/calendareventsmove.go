// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CalendarEventsMoveSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type CalendarEventsMoveSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type CalendarEventsMoveSecurity struct {
	Option1 *CalendarEventsMoveSecurityOption1 `security:"option"`
	Option2 *CalendarEventsMoveSecurityOption2 `security:"option"`
}

// CalendarEventsMoveSendUpdatesEnum - Guests who should receive notifications about the change of the event's organizer.
type CalendarEventsMoveSendUpdatesEnum string

const (
	CalendarEventsMoveSendUpdatesEnumAll          CalendarEventsMoveSendUpdatesEnum = "all"
	CalendarEventsMoveSendUpdatesEnumExternalOnly CalendarEventsMoveSendUpdatesEnum = "externalOnly"
	CalendarEventsMoveSendUpdatesEnumNone         CalendarEventsMoveSendUpdatesEnum = "none"
)

func (e *CalendarEventsMoveSendUpdatesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "externalOnly":
		fallthrough
	case "none":
		*e = CalendarEventsMoveSendUpdatesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventsMoveSendUpdatesEnum: %s", s)
	}
}

type CalendarEventsMoveRequest struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Calendar identifier of the source calendar where the event currently is on.
	CalendarID string `pathParam:"style=simple,explode=false,name=calendarId"`
	// Calendar identifier of the target calendar where the event is to be moved to.
	Destination string `queryParam:"style=form,explode=true,name=destination"`
	// Event identifier.
	EventID string `pathParam:"style=simple,explode=false,name=eventId"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Deprecated. Please use sendUpdates instead.
	//
	// Whether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.
	SendNotifications *bool `queryParam:"style=form,explode=true,name=sendNotifications"`
	// Guests who should receive notifications about the change of the event's organizer.
	SendUpdates *CalendarEventsMoveSendUpdatesEnum `queryParam:"style=form,explode=true,name=sendUpdates"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type CalendarEventsMoveResponse struct {
	ContentType string
	// Successful response
	Event       *shared.Event
	StatusCode  int
	RawResponse *http.Response
}
