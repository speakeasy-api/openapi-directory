"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcetoindexfieldmapping as shared_datasourcetoindexfieldmapping
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from ..shared import slackentity_enum as shared_slackentity_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SlackConfiguration:
    r"""Provides the configuration information to connect to Slack as your data source."""
    
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    since_crawl_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SinceCrawlDate') }})  
    slack_entity_list: list[shared_slackentity_enum.SlackEntityEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SlackEntityList') }})  
    team_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamId') }})  
    crawl_bot_message: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlBotMessage'), 'exclude': lambda f: f is None }})  
    exclude_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludeArchived'), 'exclude': lambda f: f is None }})  
    exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionPatterns'), 'exclude': lambda f: f is None }})  
    field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldMappings'), 'exclude': lambda f: f is None }})  
    inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionPatterns'), 'exclude': lambda f: f is None }})  
    look_back_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookBackPeriod'), 'exclude': lambda f: f is None }})  
    private_channel_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivateChannelFilter'), 'exclude': lambda f: f is None }})  
    public_channel_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublicChannelFilter'), 'exclude': lambda f: f is None }})  
    use_change_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseChangeLog'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    