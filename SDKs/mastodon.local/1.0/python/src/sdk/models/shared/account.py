"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import emoji as shared_emoji
from ..shared import field as shared_field
from ..shared import source as shared_source
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Represents a user of Mastodon and their associated profile.
    https://docs.joinmastodon.org/entities/account/
    """
    
    acct: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acct'), 'exclude': lambda f: f is None }})
    r"""The Webfinger account URI. Equal to `username` for local users, or `username@domain` for"""  
    avatar: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar'), 'exclude': lambda f: f is None }})
    r"""An image icon that is shown next to statuses and in the profile. The format is URL."""  
    avatar_static: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_static'), 'exclude': lambda f: f is None }})
    r"""A static version of the avatar. Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF. The format is URL."""  
    bot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bot'), 'exclude': lambda f: f is None }})
    r"""A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the account was created."""  
    discoverable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discoverable'), 'exclude': lambda f: f is None }})
    r"""Whether the account has opted into discovery features such as the profile directory."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""The profile's display name."""  
    emojis: Optional[list[shared_emoji.Emoji]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emojis'), 'exclude': lambda f: f is None }})
    r"""Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned."""  
    fields_: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""Additional metadata attached to a profile as name-value pairs."""  
    followers_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_count'), 'exclude': lambda f: f is None }})
    r"""The reported followers of this profile."""  
    following_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_count'), 'exclude': lambda f: f is None }})
    r"""The reported follows of this profile."""  
    header: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})
    r"""An image banner that is shown above the profile and in profile cards. The format is URL."""  
    header_static: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_static'), 'exclude': lambda f: f is None }})
    r"""A static version of the header. Equal to `header` if its value is a static image; different if `header` is an animated GIF. The format is URL."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The account id `header`."""  
    last_status_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_status_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the most recent status was posted."""  
    locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked'), 'exclude': lambda f: f is None }})
    r"""Whether the account manually approves follow requests."""  
    moved: Optional[Account] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moved'), 'exclude': lambda f: f is None }})
    r"""Represents a user of Mastodon and their associated profile.
    https://docs.joinmastodon.org/entities/account/
    """  
    mute_expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mute_expires_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When a timed mute will expire, if applicable. ISO 8601 Datetime."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""The profile's bio / description."""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Represents display or publishing preferences of user's own account. Returned as an additional entity when verifying and updated credentials, as an attribute of Account.
    https://docs.joinmastodon.org/entities/source/
    """  
    statuses_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_count'), 'exclude': lambda f: f is None }})
    r"""How many statuses are attached to this account."""  
    suspended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended'), 'exclude': lambda f: f is None }})
    r"""An extra entity returned when an account is suspended."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The location of the user's profile page. (HTTPS URL)"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""The username of the account, not including domain."""  
    