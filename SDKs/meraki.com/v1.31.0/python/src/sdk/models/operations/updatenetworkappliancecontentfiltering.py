"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum(str, Enum):
    r"""URL category list size which is either 'topSites' or 'fullList'"""
    FULL_LIST = 'fullList'
    TOP_SITES = 'topSites'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceContentFilteringRequestBody:
    
    allowed_url_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedUrlPatterns'), 'exclude': lambda f: f is None }})
    r"""A list of URL patterns that are allowed"""  
    blocked_url_categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockedUrlCategories'), 'exclude': lambda f: f is None }})
    r"""A list of URL categories to block"""  
    blocked_url_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockedUrlPatterns'), 'exclude': lambda f: f is None }})
    r"""A list of URL patterns that are blocked"""  
    url_category_list_size: Optional[UpdateNetworkApplianceContentFilteringRequestBodyURLCategoryListSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlCategoryListSize'), 'exclude': lambda f: f is None }})
    r"""URL category list size which is either 'topSites' or 'fullList'"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceContentFilteringRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkApplianceContentFilteringRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkApplianceContentFilteringResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_content_filtering_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    