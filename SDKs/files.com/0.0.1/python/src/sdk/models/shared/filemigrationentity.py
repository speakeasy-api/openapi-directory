"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FileMigrationEntityOperationEnum(str, Enum):
    r"""The type of operation"""
    DELETE = 'delete'
    MOVE = 'move'
    COPY = 'copy'
    REGIONAL_MIGRATION = 'regional_migration'

class FileMigrationEntityStatusEnum(str, Enum):
    r"""Status"""
    PENDING = 'pending'
    COUNTING = 'counting'
    PROCESSING = 'processing'
    COMPLETED = 'completed'
    PROCESSING_SUBFOLDERS = 'processing_subfolders'
    FINISHING = 'finishing'
    CREATING_DEST_FOLDER = 'creating_dest_folder'
    WAITING_FOR_OTHER_JOBS = 'waiting_for_other_jobs'
    WAITING_FOR_ALL_FILES = 'waiting_for_all_files'
    WAITING_FOR_PENDING_SUBFOLDERS = 'waiting_for_pending_subfolders'
    WAITING_FOR_ALL_SUBFOLDERS = 'waiting_for_all_subfolders'
    FAILED = 'failed'
    WAITING_FOR_ENQUEUED_OPERATIONS = 'waiting_for_enqueued_operations'
    UNUSED = 'unused'
    PROCESSING_RECURSIVELY = 'processing_recursively'
    REMOVING_DEFERRED_FOLDERS = 'removing_deferred_folders'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileMigrationEntity:
    r"""Show File Migration"""
    
    dest_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dest_path'), 'exclude': lambda f: f is None }})
    r"""Destination path"""  
    files_moved: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files_moved'), 'exclude': lambda f: f is None }})
    r"""Number of files processed"""  
    files_total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files_total'), 'exclude': lambda f: f is None }})
    r"""Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""File migration ID"""  
    log_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('log_url'), 'exclude': lambda f: f is None }})
    r"""Link to download the log file for this migration."""  
    operation: Optional[FileMigrationEntityOperationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation'), 'exclude': lambda f: f is None }})
    r"""The type of operation"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Source path"""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Region"""  
    status: Optional[FileMigrationEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status"""  
    