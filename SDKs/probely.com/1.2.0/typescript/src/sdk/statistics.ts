/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Probely has several graphs and tables that it uses to
 *
 * @remarks
 * display statistics of the current state of a target or account.
 *
 */
export class Statistics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Average fix time graph data (all targets)
   */
  getTargetsAllAverageFixTime(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllAverageFixTimeResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/targets/all/average_fix_time/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllAverageFixTimeResponse =
        new operations.GetTargetsAllAverageFixTimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllAverageFixTime200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllAverageFixTime200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Targets with open vulnerabilities pie chart data
   */
  getTargetsAllNeedsAttentionPie(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllNeedsAttentionPieResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/targets/all/needs_attention_pie/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllNeedsAttentionPieResponse =
        new operations.GetTargetsAllNeedsAttentionPieResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllNeedsAttentionPie200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllNeedsAttentionPie200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Targets with open vulnerabilities
   */
  getTargetsAllNeedsAttentionTop(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllNeedsAttentionTopResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/targets/all/needs_attention_top/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllNeedsAttentionTopResponse =
        new operations.GetTargetsAllNeedsAttentionTopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllNeedsAttentionTop200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTargetsAllNeedsAttentionTop200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllNeedsAttentionTop200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Risk trend graph data (all targets)
   */
  getTargetsAllRiskTrend(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllRiskTrendResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/all/risk_trend/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllRiskTrendResponse =
        new operations.GetTargetsAllRiskTrendResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllRiskTrend200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTargetsAllRiskTrend200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllRiskTrend200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Severity trend graph data (all targets)
   */
  getTargetsAllSeverityTrend(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllSeverityTrendResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/targets/all/severity_trend/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllSeverityTrendResponse =
        new operations.GetTargetsAllSeverityTrendResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllSeverityTrend200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllSeverityTrend200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Top 5 vulnerabilities (all targets).
   */
  getTargetsAllTopVulns(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllTopVulnsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/all/top_vulns/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllTopVulnsResponse =
        new operations.GetTargetsAllTopVulnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllTopVulns200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTargetsAllTopVulns200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllTopVulns200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Average vulnerability trend graph data
   */
  getTargetsTargetIdAverageFixTime(
    req: operations.GetTargetsTargetIdAverageFixTimeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdAverageFixTimeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdAverageFixTimeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/average_fix_time/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdAverageFixTimeResponse =
        new operations.GetTargetsTargetIdAverageFixTimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdAverageFixTime200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdAverageFixTime200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Risk trend graph data
   */
  getTargetsTargetIdRiskTrend(
    req: operations.GetTargetsTargetIdRiskTrendRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdRiskTrendResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdRiskTrendRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/risk_trend/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdRiskTrendResponse =
        new operations.GetTargetsTargetIdRiskTrendResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdRiskTrend200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTargetsTargetIdRiskTrend200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdRiskTrend200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Severity trend graph data.
   */
  getTargetsTargetIdSeverityTrend(
    req: operations.GetTargetsTargetIdSeverityTrendRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdSeverityTrendResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdSeverityTrendRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/severity_trend/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdSeverityTrendResponse =
        new operations.GetTargetsTargetIdSeverityTrendResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdSeverityTrend200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdSeverityTrend200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Top 5 vulnerabilities
   */
  getTargetsTargetIdTopVulns(
    req: operations.GetTargetsTargetIdTopVulnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdTopVulnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdTopVulnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/top_vulns/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdTopVulnsResponse =
        new operations.GetTargetsTargetIdTopVulnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdTopVulns200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTargetsTargetIdTopVulns200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdTopVulns200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }
}
