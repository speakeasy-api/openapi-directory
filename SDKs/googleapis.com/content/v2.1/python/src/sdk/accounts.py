"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_accounts_authinfo(self, request: operations.ContentAccountsAuthinfoRequest, security: operations.ContentAccountsAuthinfoSecurity) -> operations.ContentAccountsAuthinfoResponse:
        r"""Returns information about the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts/authinfo'
        
        query_params = utils.get_query_params(operations.ContentAccountsAuthinfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsAuthinfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsAuthInfoResponse])
                res.accounts_auth_info_response = out

        return res

    def content_accounts_claimwebsite(self, request: operations.ContentAccountsClaimwebsiteRequest, security: operations.ContentAccountsClaimwebsiteSecurity) -> operations.ContentAccountsClaimwebsiteResponse:
        r"""Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren't required to claim a website."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsClaimwebsiteRequest, base_url, '/{merchantId}/accounts/{accountId}/claimwebsite', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsClaimwebsiteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsClaimwebsiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsClaimWebsiteResponse])
                res.accounts_claim_website_response = out

        return res

    def content_accounts_credentials_create(self, request: operations.ContentAccountsCredentialsCreateRequest, security: operations.ContentAccountsCredentialsCreateSecurity) -> operations.ContentAccountsCredentialsCreateResponse:
        r"""Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsCredentialsCreateRequest, base_url, '/accounts/{accountId}/credentials', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_credentials", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsCredentialsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsCredentialsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountCredentials])
                res.account_credentials = out

        return res

    def content_accounts_custombatch(self, request: operations.ContentAccountsCustombatchRequest, security: operations.ContentAccountsCustombatchSecurity) -> operations.ContentAccountsCustombatchResponse:
        r"""Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/accounts/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accounts_custom_batch_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsCustomBatchResponse])
                res.accounts_custom_batch_response = out

        return res

    def content_accounts_delete(self, request: operations.ContentAccountsDeleteRequest, security: operations.ContentAccountsDeleteSecurity) -> operations.ContentAccountsDeleteResponse:
        r"""Deletes a Merchant Center sub-account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsDeleteRequest, base_url, '/{merchantId}/accounts/{accountId}', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_accounts_get(self, request: operations.ContentAccountsGetRequest, security: operations.ContentAccountsGetSecurity) -> operations.ContentAccountsGetResponse:
        r"""Retrieves a Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsGetRequest, base_url, '/{merchantId}/accounts/{accountId}', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def content_accounts_insert(self, request: operations.ContentAccountsInsertRequest, security: operations.ContentAccountsInsertSecurity) -> operations.ContentAccountsInsertResponse:
        r"""Creates a Merchant Center sub-account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsInsertRequest, base_url, '/{merchantId}/accounts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def content_accounts_labels_create(self, request: operations.ContentAccountsLabelsCreateRequest, security: operations.ContentAccountsLabelsCreateSecurity) -> operations.ContentAccountsLabelsCreateResponse:
        r"""Creates a new label, not assigned to any account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsLabelsCreateRequest, base_url, '/accounts/{accountId}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_label_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsLabelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsLabelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountLabel])
                res.account_label = out

        return res

    def content_accounts_labels_delete(self, request: operations.ContentAccountsLabelsDeleteRequest, security: operations.ContentAccountsLabelsDeleteSecurity) -> operations.ContentAccountsLabelsDeleteResponse:
        r"""Deletes a label and removes it from all accounts to which it was assigned."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsLabelsDeleteRequest, base_url, '/accounts/{accountId}/labels/{labelId}', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsLabelsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsLabelsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_accounts_labels_list(self, request: operations.ContentAccountsLabelsListRequest, security: operations.ContentAccountsLabelsListSecurity) -> operations.ContentAccountsLabelsListResponse:
        r"""Lists the labels assigned to an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsLabelsListRequest, base_url, '/accounts/{accountId}/labels', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsLabelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsLabelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccountLabelsResponse])
                res.list_account_labels_response = out

        return res

    def content_accounts_labels_patch(self, request: operations.ContentAccountsLabelsPatchRequest, security: operations.ContentAccountsLabelsPatchSecurity) -> operations.ContentAccountsLabelsPatchResponse:
        r"""Updates a label."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsLabelsPatchRequest, base_url, '/accounts/{accountId}/labels/{labelId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_label_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsLabelsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsLabelsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountLabel])
                res.account_label = out

        return res

    def content_accounts_link(self, request: operations.ContentAccountsLinkRequest, security: operations.ContentAccountsLinkSecurity) -> operations.ContentAccountsLinkResponse:
        r"""Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsLinkRequest, base_url, '/{merchantId}/accounts/{accountId}/link', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accounts_link_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsLinkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsLinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsLinkResponse])
                res.accounts_link_response = out

        return res

    def content_accounts_list(self, request: operations.ContentAccountsListRequest, security: operations.ContentAccountsListSecurity) -> operations.ContentAccountsListResponse:
        r"""Lists the sub-accounts in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsListRequest, base_url, '/{merchantId}/accounts', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsListResponse])
                res.accounts_list_response = out

        return res

    def content_accounts_listlinks(self, request: operations.ContentAccountsListlinksRequest, security: operations.ContentAccountsListlinksSecurity) -> operations.ContentAccountsListlinksResponse:
        r"""Returns the list of accounts linked to your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsListlinksRequest, base_url, '/{merchantId}/accounts/{accountId}/listlinks', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsListlinksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsListlinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsListLinksResponse])
                res.accounts_list_links_response = out

        return res

    def content_accounts_requestphoneverification(self, request: operations.ContentAccountsRequestphoneverificationRequest, security: operations.ContentAccountsRequestphoneverificationSecurity) -> operations.ContentAccountsRequestphoneverificationResponse:
        r"""Request verification code to start phone verification."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsRequestphoneverificationRequest, base_url, '/{merchantId}/accounts/{accountId}/requestphoneverification', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_phone_verification_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsRequestphoneverificationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsRequestphoneverificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequestPhoneVerificationResponse])
                res.request_phone_verification_response = out

        return res

    def content_accounts_returncarrier_create(self, request: operations.ContentAccountsReturncarrierCreateRequest, security: operations.ContentAccountsReturncarrierCreateSecurity) -> operations.ContentAccountsReturncarrierCreateResponse:
        r"""Links return carrier to a merchant account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsReturncarrierCreateRequest, base_url, '/accounts/{accountId}/returncarrier', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_return_carrier_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsReturncarrierCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsReturncarrierCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountReturnCarrier])
                res.account_return_carrier = out

        return res

    def content_accounts_returncarrier_delete(self, request: operations.ContentAccountsReturncarrierDeleteRequest, security: operations.ContentAccountsReturncarrierDeleteSecurity) -> operations.ContentAccountsReturncarrierDeleteResponse:
        r"""Delete a return carrier in the merchant account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsReturncarrierDeleteRequest, base_url, '/accounts/{accountId}/returncarrier/{carrierAccountId}', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsReturncarrierDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsReturncarrierDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_accounts_returncarrier_list(self, request: operations.ContentAccountsReturncarrierListRequest, security: operations.ContentAccountsReturncarrierListSecurity) -> operations.ContentAccountsReturncarrierListResponse:
        r"""Lists available return carriers in the merchant account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsReturncarrierListRequest, base_url, '/accounts/{accountId}/returncarrier', request)
        
        query_params = utils.get_query_params(operations.ContentAccountsReturncarrierListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsReturncarrierListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccountReturnCarrierResponse])
                res.list_account_return_carrier_response = out

        return res

    def content_accounts_returncarrier_patch(self, request: operations.ContentAccountsReturncarrierPatchRequest, security: operations.ContentAccountsReturncarrierPatchSecurity) -> operations.ContentAccountsReturncarrierPatchResponse:
        r"""Updates a return carrier in the merchant account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsReturncarrierPatchRequest, base_url, '/accounts/{accountId}/returncarrier/{carrierAccountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_return_carrier_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsReturncarrierPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsReturncarrierPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountReturnCarrier])
                res.account_return_carrier = out

        return res

    def content_accounts_update(self, request: operations.ContentAccountsUpdateRequest, security: operations.ContentAccountsUpdateSecurity) -> operations.ContentAccountsUpdateResponse:
        r"""Updates a Merchant Center account. Any fields that are not provided are deleted from the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsUpdateRequest, base_url, '/{merchantId}/accounts/{accountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def content_accounts_updatelabels(self, request: operations.ContentAccountsUpdatelabelsRequest, security: operations.ContentAccountsUpdatelabelsSecurity) -> operations.ContentAccountsUpdatelabelsResponse:
        r"""Updates labels that are assigned to the Merchant Center account by CSS user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsUpdatelabelsRequest, base_url, '/{merchantId}/accounts/{accountId}/updatelabels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "accounts_update_labels_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsUpdatelabelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsUpdatelabelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountsUpdateLabelsResponse])
                res.accounts_update_labels_response = out

        return res

    def content_accounts_verifyphonenumber(self, request: operations.ContentAccountsVerifyphonenumberRequest, security: operations.ContentAccountsVerifyphonenumberSecurity) -> operations.ContentAccountsVerifyphonenumberResponse:
        r"""Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentAccountsVerifyphonenumberRequest, base_url, '/{merchantId}/accounts/{accountId}/verifyphonenumber', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "verify_phone_number_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentAccountsVerifyphonenumberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentAccountsVerifyphonenumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VerifyPhoneNumberResponse])
                res.verify_phone_number_response = out

        return res

    