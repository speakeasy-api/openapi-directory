"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import video_v1_composition_settings as shared_video_v1_composition_settings
from typing import Optional

CREATE_COMPOSITION_SETTINGS_SERVERS = [
	"https://video.twilio.com",
]


@dataclasses.dataclass
class CreateCompositionSettingsSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateCompositionSettingsCreateCompositionSettingsRequest:
    
    friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the resource and show to the user in the console"""  
    aws_credentials_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AwsCredentialsSid' }})
    r"""The SID of the stored Credential resource."""  
    aws_s3_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AwsS3Url' }})
    r"""The URL of the AWS S3 bucket where the compositions should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>."""  
    aws_storage_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AwsStorageEnabled' }})
    r"""Whether all compositions should be written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud."""  
    encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EncryptionEnabled' }})
    r"""Whether all compositions should be stored in an encrypted form. The default is `false`."""  
    encryption_key_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EncryptionKeySid' }})
    r"""The SID of the Public Key resource to use for encryption."""  
    

@dataclasses.dataclass
class CreateCompositionSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    video_v1_composition_settings: Optional[shared_video_v1_composition_settings.VideoV1CompositionSettings] = dataclasses.field(default=None)
    r"""Created"""  
    