"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import autoscalingtype_enum as shared_autoscalingtype_enum
from ..shared import blockdevicemapping as shared_blockdevicemapping
from ..shared import rootdevicetype_enum as shared_rootdevicetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInstanceRequest:
    
    instance_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType') }})  
    layer_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LayerIds') }})  
    stack_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackId') }})  
    agent_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgentVersion'), 'exclude': lambda f: f is None }})  
    ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmiId'), 'exclude': lambda f: f is None }})  
    architecture: Optional[shared_architecture_enum.ArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Architecture'), 'exclude': lambda f: f is None }})  
    auto_scaling_type: Optional[shared_autoscalingtype_enum.AutoScalingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingType'), 'exclude': lambda f: f is None }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZone'), 'exclude': lambda f: f is None }})  
    block_device_mappings: Optional[list[shared_blockdevicemapping.BlockDeviceMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockDeviceMappings'), 'exclude': lambda f: f is None }})  
    ebs_optimized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsOptimized'), 'exclude': lambda f: f is None }})  
    hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Hostname'), 'exclude': lambda f: f is None }})  
    install_updates_on_boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstallUpdatesOnBoot'), 'exclude': lambda f: f is None }})  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Os'), 'exclude': lambda f: f is None }})  
    root_device_type: Optional[shared_rootdevicetype_enum.RootDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootDeviceType'), 'exclude': lambda f: f is None }})  
    ssh_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SshKeyName'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId'), 'exclude': lambda f: f is None }})  
    tenancy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tenancy'), 'exclude': lambda f: f is None }})  
    virtualization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VirtualizationType'), 'exclude': lambda f: f is None }})  
    