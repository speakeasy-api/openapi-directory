"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channelcolumn as shared_channelcolumn
from typing import Optional


@dataclasses.dataclass
class GetChannelColumnsRequest:
    
    accept_encoding: list[str] = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""Indicates that the client accepts that the response will be compressed to reduce traffic size."""  
    channel_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'channelId', 'style': 'simple', 'explode': False }})
    r"""The channel identifier"""  
    request_body: Optional[list[str]] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Allow you to filter the channel column identifier list your want to get"""  
    

@dataclasses.dataclass
class GetChannelColumnsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    channel_columns: Optional[list[shared_channelcolumn.ChannelColumn]] = dataclasses.field(default=None)
    r"""Channel columns"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    