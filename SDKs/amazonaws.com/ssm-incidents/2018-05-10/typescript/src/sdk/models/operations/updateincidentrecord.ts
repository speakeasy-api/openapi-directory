/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The Chatbot chat channel used for collaboration during an incident.
 */
export class UpdateIncidentRecordRequestBodyChatChannel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "chatbotSns" })
  chatbotSns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "empty" })
  empty?: Record<string, any>;
}

/**
 * The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.
 */
export enum UpdateIncidentRecordRequestBodyStatusEnum {
  Open = "OPEN",
  Resolved = "RESOLVED",
}

export class UpdateIncidentRecordRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the incident record you are updating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  /**
   * The Chatbot chat channel used for collaboration during an incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chatChannel" })
  @Type(() => UpdateIncidentRecordRequestBodyChatChannel)
  chatChannel?: UpdateIncidentRecordRequestBodyChatChannel;

  /**
   * A token that ensures that a client calls the operation only once with the specified details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "impact" })
  impact?: number;

  /**
   * <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p> <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
   */
  @SpeakeasyMetadata({ elemType: shared.NotificationTargetItem })
  @Expose({ name: "notificationTargets" })
  @Type(() => shared.NotificationTargetItem)
  notificationTargets?: shared.NotificationTargetItem[];

  /**
   * The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: UpdateIncidentRecordRequestBodyStatusEnum;

  /**
   * A longer description of what occurred during the incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary?: string;

  /**
   * A brief description of the incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class UpdateIncidentRecordRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateIncidentRecordRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateIncidentRecordResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateIncidentRecordOutput?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
