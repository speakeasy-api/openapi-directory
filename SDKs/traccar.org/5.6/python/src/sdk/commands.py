"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Commands:
    r"""Sending commands to devices and stored command management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_commands_id_(self, request: operations.DeleteCommandsIDRequest) -> operations.DeleteCommandsIDResponse:
        r"""Delete a Saved Command"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCommandsIDRequest, base_url, '/commands/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCommandsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_commands(self, request: operations.GetCommandsRequest) -> operations.GetCommandsResponse:
        r"""Fetch a list of Saved Commands
        Without params, it returns a list of Saved Commands the user has access to
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/commands'
        
        query_params = utils.get_query_params(operations.GetCommandsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommandsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Command]])
                res.commands = out

        return res

    def get_commands_send(self, request: operations.GetCommandsSendRequest) -> operations.GetCommandsSendResponse:
        r"""Fetch a list of Saved Commands supported by Device at the moment
        Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/commands/send'
        
        query_params = utils.get_query_params(operations.GetCommandsSendRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommandsSendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Command]])
                res.commands = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_commands_types(self, request: operations.GetCommandsTypesRequest) -> operations.GetCommandsTypesResponse:
        r"""Fetch a list of available Commands for the Device or all possible Commands if Device ommited"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/commands/types'
        
        query_params = utils.get_query_params(operations.GetCommandsTypesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommandsTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CommandType]])
                res.command_types = out
        elif http_res.status_code == 400:
            pass

        return res

    def post_commands(self, request: shared.Command) -> operations.PostCommandsResponse:
        r"""Create a Saved Command"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/commands'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCommandsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Command])
                res.command = out

        return res

    def post_commands_send(self, request: shared.Command) -> operations.PostCommandsSendResponse:
        r"""Dispatch commands to device
        Dispatch a new command or Saved Command if _body.id_ set
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/commands/send'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCommandsSendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Command])
                res.command = out
        elif http_res.status_code == 400:
            pass

        return res

    def put_commands_id_(self, request: operations.PutCommandsIDRequest) -> operations.PutCommandsIDResponse:
        r"""Update a Saved Command"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCommandsIDRequest, base_url, '/commands/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "command", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCommandsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Command])
                res.command = out

        return res

    