/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * can be "deploy-key" or "github-user-key"
 *
 * @remarks
 *
 */
export enum KeyTypeEnum {
  DeployKey = "deploy-key",
  GithubUserKey = "github-user-key",
}

/**
 * checkout key
 */
export class Key extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "preferred" })
  preferred?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "public_key" })
  publicKey?: string;

  /**
   * when the key was issued
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * can be "deploy-key" or "github-user-key"
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: KeyTypeEnum;
}
