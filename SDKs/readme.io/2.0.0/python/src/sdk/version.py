"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Version:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_version(self, request: shared.Version, security: operations.CreateVersionSecurity) -> operations.CreateVersionResponse:
        r"""Create version
        Create a new version
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/version'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_version(self, request: operations.DeleteVersionRequest, security: operations.DeleteVersionSecurity) -> operations.DeleteVersionResponse:
        r"""Delete version
        Delete a version
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVersionRequest, base_url, '/version/{versionId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_version(self, request: operations.GetVersionRequest, security: operations.GetVersionSecurity) -> operations.GetVersionResponse:
        r"""Get version
        Returns the version with this version ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVersionRequest, base_url, '/version/{versionId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_versions(self) -> operations.GetVersionsResponse:
        r"""Get versions
        Retrieve a list of versions associated with a project API key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/version'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_version(self, request: operations.UpdateVersionRequest, security: operations.UpdateVersionSecurity) -> operations.UpdateVersionResponse:
        r"""Update version
        Update an existing version
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVersionRequest, base_url, '/version/{versionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    