// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreateInOrgRequestBodyMergeCommitMessageEnum - The default value for a merge commit message.
//
// - `PR_TITLE` - default to the pull request's title.
// - `PR_BODY` - default to the pull request's body.
// - `BLANK` - default to a blank commit message.
type ReposCreateInOrgRequestBodyMergeCommitMessageEnum string

const (
	ReposCreateInOrgRequestBodyMergeCommitMessageEnumPrBody  ReposCreateInOrgRequestBodyMergeCommitMessageEnum = "PR_BODY"
	ReposCreateInOrgRequestBodyMergeCommitMessageEnumPrTitle ReposCreateInOrgRequestBodyMergeCommitMessageEnum = "PR_TITLE"
	ReposCreateInOrgRequestBodyMergeCommitMessageEnumBlank   ReposCreateInOrgRequestBodyMergeCommitMessageEnum = "BLANK"
)

func (e *ReposCreateInOrgRequestBodyMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_BODY":
		fallthrough
	case "PR_TITLE":
		fallthrough
	case "BLANK":
		*e = ReposCreateInOrgRequestBodyMergeCommitMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateInOrgRequestBodyMergeCommitMessageEnum: %s", s)
	}
}

// ReposCreateInOrgRequestBodyMergeCommitTitleEnum - The default value for a merge commit title.
//
// - `PR_TITLE` - default to the pull request's title.
// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type ReposCreateInOrgRequestBodyMergeCommitTitleEnum string

const (
	ReposCreateInOrgRequestBodyMergeCommitTitleEnumPrTitle      ReposCreateInOrgRequestBodyMergeCommitTitleEnum = "PR_TITLE"
	ReposCreateInOrgRequestBodyMergeCommitTitleEnumMergeMessage ReposCreateInOrgRequestBodyMergeCommitTitleEnum = "MERGE_MESSAGE"
)

func (e *ReposCreateInOrgRequestBodyMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_TITLE":
		fallthrough
	case "MERGE_MESSAGE":
		*e = ReposCreateInOrgRequestBodyMergeCommitTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateInOrgRequestBodyMergeCommitTitleEnum: %s", s)
	}
}

// ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum - The default value for a squash merge commit message:
//
// - `PR_BODY` - default to the pull request's body.
// - `COMMIT_MESSAGES` - default to the branch's commit messages.
// - `BLANK` - default to a blank commit message.
type ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum string

const (
	ReposCreateInOrgRequestBodySquashMergeCommitMessageEnumPrBody         ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum = "PR_BODY"
	ReposCreateInOrgRequestBodySquashMergeCommitMessageEnumCommitMessages ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum = "COMMIT_MESSAGES"
	ReposCreateInOrgRequestBodySquashMergeCommitMessageEnumBlank          ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum = "BLANK"
)

func (e *ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_BODY":
		fallthrough
	case "COMMIT_MESSAGES":
		fallthrough
	case "BLANK":
		*e = ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum: %s", s)
	}
}

// ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum - The default value for a squash merge commit title:
//
// - `PR_TITLE` - default to the pull request's title.
// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
type ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum string

const (
	ReposCreateInOrgRequestBodySquashMergeCommitTitleEnumPrTitle         ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum = "PR_TITLE"
	ReposCreateInOrgRequestBodySquashMergeCommitTitleEnumCommitOrPrTitle ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum = "COMMIT_OR_PR_TITLE"
)

func (e *ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_TITLE":
		fallthrough
	case "COMMIT_OR_PR_TITLE":
		*e = ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum: %s", s)
	}
}

// ReposCreateInOrgRequestBodyVisibilityEnum - The visibility of the repository. **Note**: For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/enterprise-server@3.3/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
// The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
type ReposCreateInOrgRequestBodyVisibilityEnum string

const (
	ReposCreateInOrgRequestBodyVisibilityEnumPublic   ReposCreateInOrgRequestBodyVisibilityEnum = "public"
	ReposCreateInOrgRequestBodyVisibilityEnumPrivate  ReposCreateInOrgRequestBodyVisibilityEnum = "private"
	ReposCreateInOrgRequestBodyVisibilityEnumInternal ReposCreateInOrgRequestBodyVisibilityEnum = "internal"
)

func (e *ReposCreateInOrgRequestBodyVisibilityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "private":
		fallthrough
	case "internal":
		*e = ReposCreateInOrgRequestBodyVisibilityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateInOrgRequestBodyVisibilityEnum: %s", s)
	}
}

type ReposCreateInOrgRequestBody struct {
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Pass `true` to create an initial commit with empty README.
	AutoInit *bool `json:"auto_init,omitempty"`
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// A short description of the repository.
	Description *string `json:"description,omitempty"`
	// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`
	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`
	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`
	// Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/enterprise-server@3.3/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
	LicenseTemplate *string `json:"license_template,omitempty"`
	// The default value for a merge commit message.
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `PR_BODY` - default to the pull request's body.
	// - `BLANK` - default to a blank commit message.
	MergeCommitMessage *ReposCreateInOrgRequestBodyMergeCommitMessageEnum `json:"merge_commit_message,omitempty"`
	// The default value for a merge commit title.
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *ReposCreateInOrgRequestBodyMergeCommitTitleEnum `json:"merge_commit_title,omitempty"`
	// The name of the repository.
	Name string `json:"name"`
	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`
	// The default value for a squash merge commit message:
	//
	// - `PR_BODY` - default to the pull request's body.
	// - `COMMIT_MESSAGES` - default to the branch's commit messages.
	// - `BLANK` - default to a blank commit message.
	SquashMergeCommitMessage *ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum `json:"squash_merge_commit_message,omitempty"`
	// The default value for a squash merge commit title:
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
	SquashMergeCommitTitle *ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum `json:"squash_merge_commit_title,omitempty"`
	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamID *int64 `json:"team_id,omitempty"`
	// Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	// The visibility of the repository. **Note**: For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/enterprise-server@3.3/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
	// The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
	Visibility *ReposCreateInOrgRequestBodyVisibilityEnum `json:"visibility,omitempty"`
}

type ReposCreateInOrgRequest struct {
	RequestBody ReposCreateInOrgRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

type ReposCreateInOrgResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	Repository *shared.Repository
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
