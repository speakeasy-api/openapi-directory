"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SessionController:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def session_controller_change_password(self, request: operations.SessionControllerChangePasswordRequest) -> operations.SessionControllerChangePasswordResponse:
        r"""Change the password of a customer given their existing and new password."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerChangePasswordRequest, base_url, '/v2/customer/{shortName}/session/password', request)
        
        query_params = utils.get_query_params(operations.SessionControllerChangePasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerChangePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def session_controller_create_landlord_login(self, request: operations.SessionControllerCreateLandlordLoginRequest) -> operations.SessionControllerCreateLandlordLoginResponse:
        r"""Send a request to the in-tray to create a landlord login."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerCreateLandlordLoginRequest, base_url, '/v2/customer/{shortName}/session/createlandlordlogin', request)
        
        query_params = utils.get_query_params(operations.SessionControllerCreateLandlordLoginRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerCreateLandlordLoginResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def session_controller_get_session_info(self, request: operations.SessionControllerGetSessionInfoRequest) -> operations.SessionControllerGetSessionInfoResponse:
        r"""Gets information about the currently logged on customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerGetSessionInfoRequest, base_url, '/v2/customer/{shortName}/session', request)
        
        query_params = utils.get_query_params(operations.SessionControllerGetSessionInfoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerGetSessionInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.session_controller_get_session_info_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.session_controller_get_session_info_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.session_controller_get_session_info_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.session_controller_get_session_info_200_text_xml_string = http_res.content

        return res

    def session_controller_login(self, request: operations.SessionControllerLoginRequest) -> operations.SessionControllerLoginResponse:
        r"""Login as a customer given their username and password."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerLoginRequest, base_url, '/v2/customer/{shortName}/session', request)
        
        query_params = utils.get_query_params(operations.SessionControllerLoginRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerLoginResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.session_controller_login_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.session_controller_login_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.session_controller_login_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.session_controller_login_200_text_xml_string = http_res.content

        return res

    def session_controller_logout(self, request: operations.SessionControllerLogoutRequest) -> operations.SessionControllerLogoutResponse:
        r"""Logout a customer previously logged in via the Login endpoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerLogoutRequest, base_url, '/v2/customer/{shortName}/session', request)
        
        query_params = utils.get_query_params(operations.SessionControllerLogoutRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerLogoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def session_controller_reset_password(self, request: operations.SessionControllerResetPasswordRequest) -> operations.SessionControllerResetPasswordResponse:
        r"""Reset the customer's password. An email will be sent out to reset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SessionControllerResetPasswordRequest, base_url, '/v2/customer/{shortName}/session/resetpassword', request)
        
        query_params = utils.get_query_params(operations.SessionControllerResetPasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SessionControllerResetPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    