// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PulsarRuleResponseRuleTypeEnum string

const (
	PulsarRuleResponseRuleTypeEnumPulsar PulsarRuleResponseRuleTypeEnum = "pulsar"
)

func (e PulsarRuleResponseRuleTypeEnum) ToPointer() *PulsarRuleResponseRuleTypeEnum {
	return &e
}

func (e *PulsarRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pulsar":
		*e = PulsarRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PulsarRuleResponseRuleTypeEnum: %v", v)
	}
}

type PulsarRuleResponseTargetAuthenticationType string

const (
	PulsarRuleResponseTargetAuthenticationTypeToken PulsarRuleResponseTargetAuthenticationType = "token"
)

type PulsarRuleResponseTargetAuthentication struct {
	PulsarTokenAuth *PulsarTokenAuth

	Type PulsarRuleResponseTargetAuthenticationType
}

func CreatePulsarRuleResponseTargetAuthenticationToken(token PulsarTokenAuth) PulsarRuleResponseTargetAuthentication {
	typ := PulsarRuleResponseTargetAuthenticationTypeToken
	typStr := PulsarTokenAuthAuthenticationModeEnum(typ)
	token.AuthenticationMode = typStr

	return PulsarRuleResponseTargetAuthentication{
		PulsarTokenAuth: &token,
		Type:            typ,
	}
}

func (u *PulsarRuleResponseTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "token":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		pulsarTokenAuth := new(PulsarTokenAuth)
		if err := d.Decode(&pulsarTokenAuth); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PulsarTokenAuth = pulsarTokenAuth
		u.Type = PulsarRuleResponseTargetAuthenticationTypeToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PulsarRuleResponseTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.PulsarTokenAuth != nil {
		return json.Marshal(u.PulsarTokenAuth)
	}

	return nil, nil
}

type PulsarRuleResponseTarget struct {
	Authentication *PulsarRuleResponseTargetAuthentication `json:"authentication,omitempty"`
	Enveloped      *bool                                   `json:"enveloped,omitempty"`
	Format         *string                                 `json:"format,omitempty"`
	RoutingKey     *string                                 `json:"routingKey,omitempty"`
	ServiceURL     *string                                 `json:"serviceUrl,omitempty"`
	TLSTrustCerts  []string                                `json:"tlsTrustCerts,omitempty"`
	Topic          *string                                 `json:"topic,omitempty"`
}

type PulsarRuleResponse struct {
	Links       map[string]interface{}         `json:"_links,omitempty"`
	AppID       *string                        `json:"appId,omitempty"`
	Created     *float64                       `json:"created,omitempty"`
	ID          *string                        `json:"id,omitempty"`
	Modified    *float64                       `json:"modified,omitempty"`
	RequestMode string                         `json:"requestMode"`
	RuleType    PulsarRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                     `json:"source"`
	Status      *string                        `json:"status,omitempty"`
	Target      PulsarRuleResponseTarget       `json:"target"`
	Version     *string                        `json:"version,omitempty"`
}
