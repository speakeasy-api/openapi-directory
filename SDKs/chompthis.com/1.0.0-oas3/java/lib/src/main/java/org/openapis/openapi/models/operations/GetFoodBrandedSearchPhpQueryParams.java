/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetFoodBrandedSearchPhpQueryParams {
    /**
     * #### Filter the search to only include branded foods that contain a specific allergen.
     * 
     * **Example**
     * &gt; ```&amp;allergen=Peanuts```
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=allergen")
    public String allergen;
    public GetFoodBrandedSearchPhpQueryParams withAllergen(String allergen) {
        this.allergen = allergen;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that are owned by a specific brand.
     * 
     * **Example**
     * &gt; ```&amp;brand=Starbucks```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=brand")
    public String brand;
    public GetFoodBrandedSearchPhpQueryParams withBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods from a specific category.
     * 
     * **Example**
     * &gt; ```&amp;category=Plant Based Foods```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=category")
    public String category;
    public GetFoodBrandedSearchPhpQueryParams withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that are sold in a specific country.
     * 
     * **Example**
     * &gt; ```&amp;country=United States```
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    public String country;
    public GetFoodBrandedSearchPhpQueryParams withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that are considered compatible with a specific diet.
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=diet")
    public GetFoodBrandedSearchPhpDietEnum diet;
    public GetFoodBrandedSearchPhpQueryParams withDiet(GetFoodBrandedSearchPhpDietEnum diet) {
        this.diet = diet;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that contain a specific ingredient.
     * 
     * **Example**
     * &gt; ```&amp;ingredient=Salt```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ingredient")
    public String ingredient;
    public GetFoodBrandedSearchPhpQueryParams withIngredient(String ingredient) {
        this.ingredient = ingredient;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that are associated with a specific keyword.
     * 
     * **Example**
     * &gt; ```&amp;keyword=Organic```
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=keyword")
    public String keyword;
    public GetFoodBrandedSearchPhpQueryParams withKeyword(String keyword) {
        this.keyword = keyword;
        return this;
    }
    
    /**
     * #### Set maximum number of records you want the API to return. The default value is "**10**."
     * 
     * **Example**
     * &gt; ```&amp;limit=10```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public GetFoodBrandedSearchPhpLimitEnum limit;
    public GetFoodBrandedSearchPhpQueryParams withLimit(GetFoodBrandedSearchPhpLimitEnum limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that contain a specific mineral.
     * 
     * **Example**
     * &gt; ```&amp;mineral=Potassium```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mineral")
    public String mineral;
    public GetFoodBrandedSearchPhpQueryParams withMineral(String mineral) {
        this.mineral = mineral;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that contain a specific nutrient.
     * 
     * **Example**
     * &gt; ```&amp;nutrient=Caffeine```
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nutrient")
    public String nutrient;
    public GetFoodBrandedSearchPhpQueryParams withNutrient(String nutrient) {
        this.nutrient = nutrient;
        return this;
    }
    
    /**
     * #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is "**1**."
     * 
     * **Example**
     * &gt; ```&amp;page=1```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetFoodBrandedSearchPhpQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.
     * 
     * **Example**
     * &gt; ```&amp;palm_oil=E160a Beta Carotene```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=palm_oil")
    public String palmOil;
    public GetFoodBrandedSearchPhpQueryParams withPalmOil(String palmOil) {
        this.palmOil = palmOil;
        return this;
    }
    
    /**
     * ### Filter the search to only include branded foods that contain a specific trace ingredient.
     * 
     * **Example**
     * &gt; ```&amp;trace=Tree Nuts```
     * 
     * **Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=trace")
    public String trace;
    public GetFoodBrandedSearchPhpQueryParams withTrace(String trace) {
        this.trace = trace;
        return this;
    }
    
    /**
     * #### Filter the search to only include branded foods that contain a specific vitamin.
     * 
     * **Example**
     * &gt; ```&amp;vitamin=Biotin```
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vitamin")
    public String vitamin;
    public GetFoodBrandedSearchPhpQueryParams withVitamin(String vitamin) {
        this.vitamin = vitamin;
        return this;
    }
    
}
