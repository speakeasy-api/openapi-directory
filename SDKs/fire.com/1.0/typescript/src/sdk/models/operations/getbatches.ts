/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The status of the batch if internal transfer.
 */
export enum GetBatchesBatchStatusEnum {
  Submitted = "SUBMITTED",
  Removed = "REMOVED",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
}

/**
 * The type of the batch. Can be one of the 3 listed enums.
 */
export enum GetBatchesBatchTypesEnum {
  InternalTransfer = "INTERNAL_TRANSFER",
  BankTransfer = "BANK_TRANSFER",
  NewPayee = "NEW_PAYEE",
}

/**
 * You can order the batches by ascending or descending order.
 */
export enum GetBatchesOrderEnum {
  Desc = "DESC",
  Asc = "ASC",
}

/**
 * You can order the batches by date. No other options at this time
 */
export enum GetBatchesOrderByEnum {
  Date = "DATE",
}

export class GetBatchesRequest extends SpeakeasyBase {
  /**
   * The status of the batch if internal transfer.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=batchStatus",
  })
  batchStatus?: GetBatchesBatchStatusEnum;

  /**
   * The type of the batch. Can be one of the 3 listed enums.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=batchTypes",
  })
  batchTypes?: GetBatchesBatchTypesEnum;

  /**
   * You can order the batches by ascending or descending order.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: GetBatchesOrderEnum;

  /**
   * You can order the batches by date. No other options at this time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: GetBatchesOrderByEnum;
}

/**
 * The outcome of the attempted transaction.
 */
export class GetBatchesBatchItemsBatchItemResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * status of the batch if internal trasnfer
 */
export enum GetBatchesBatchItemsBatchItemStatusEnum {
  Submitted = "SUBMITTED",
  Removed = "REMOVED",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
}

export class GetBatchesBatchItemsBatchItem extends SpeakeasyBase {
  /**
   * The amount of funds to send. In cent or pence
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * The amount of the transfer after fees and taxes. in pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amountAfterCharges" })
  amountAfterCharges?: number;

  /**
   * A UUID for this item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchItemUuid" })
  batchItemUuid?: string;

  /**
   * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * The fee charged by fire.com for the payment. In pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feeAmount" })
  feeAmount?: number;

  /**
   * The Fire account ID of the source account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icanFrom" })
  icanFrom?: number;

  /**
   * The Fire account ID for the fire.com account the funds are sent to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icanTo" })
  icanTo?: number;

  /**
   * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  /**
   * The reference on the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref?: string;

  /**
   * The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refId" })
  refId?: number;

  /**
   * The outcome of the attempted transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  @Type(() => GetBatchesBatchItemsBatchItemResult)
  result?: GetBatchesBatchItemsBatchItemResult;

  /**
   * status of the batch if internal trasnfer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetBatchesBatchItemsBatchItemStatusEnum;

  /**
   * Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxAmount" })
  taxAmount?: number;
}

/**
 * List all batches.
 */
export class GetBatchesBatchItems extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetBatchesBatchItemsBatchItem })
  @Expose({ name: "items" })
  @Type(() => GetBatchesBatchItemsBatchItem)
  items?: GetBatchesBatchItemsBatchItem[];

  /**
   * total number of batches returned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;
}

export class GetBatchesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * List all batches.
   */
  @SpeakeasyMetadata()
  batchItems?: GetBatchesBatchItems;
}
