// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RemoveValidatedUserPathParams struct {
	// Username of an user (unique)
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type RemoveValidatedUserRequest struct {
	PathParams RemoveValidatedUserPathParams
}

// RemoveValidatedUser200ApplicationJSONActionEnum - The id of the action
type RemoveValidatedUser200ApplicationJSONActionEnum string

const (
	RemoveValidatedUser200ApplicationJSONActionEnumListUsers RemoveValidatedUser200ApplicationJSONActionEnum = "listUsers"
)

func (e *RemoveValidatedUser200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "listUsers":
		*e = RemoveValidatedUser200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveValidatedUser200ApplicationJSONActionEnum: %s", s)
	}
}

// RemoveValidatedUser200ApplicationJSONResultEnum - Result of the request
type RemoveValidatedUser200ApplicationJSONResultEnum string

const (
	RemoveValidatedUser200ApplicationJSONResultEnumSuccess RemoveValidatedUser200ApplicationJSONResultEnum = "success"
	RemoveValidatedUser200ApplicationJSONResultEnumError   RemoveValidatedUser200ApplicationJSONResultEnum = "error"
)

func (e *RemoveValidatedUser200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = RemoveValidatedUser200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveValidatedUser200ApplicationJSONResultEnum: %s", s)
	}
}

// RemoveValidatedUser200ApplicationJSON - Removed user
type RemoveValidatedUser200ApplicationJSON struct {
	// The id of the action
	Action RemoveValidatedUser200ApplicationJSONActionEnum `json:"action"`
	// the user removed from validated list
	Data string `json:"data"`
	// Result of the request
	Result RemoveValidatedUser200ApplicationJSONResultEnum `json:"result"`
}

type RemoveValidatedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Removed user
	RemoveValidatedUser200ApplicationJSONObject *RemoveValidatedUser200ApplicationJSON
}
