// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EarningsTypeEnum string

const (
	EarningsTypeEnumFixed                        EarningsTypeEnum = "FIXED"
	EarningsTypeEnumOrdinarytimeearnings         EarningsTypeEnum = "ORDINARYTIMEEARNINGS"
	EarningsTypeEnumOvertimeearnings             EarningsTypeEnum = "OVERTIMEEARNINGS"
	EarningsTypeEnumAllowance                    EarningsTypeEnum = "ALLOWANCE"
	EarningsTypeEnumLumpsumd                     EarningsTypeEnum = "LUMPSUMD"
	EarningsTypeEnumEmploymentterminationpayment EarningsTypeEnum = "EMPLOYMENTTERMINATIONPAYMENT"
	EarningsTypeEnumLumpsuma                     EarningsTypeEnum = "LUMPSUMA"
	EarningsTypeEnumLumpsumb                     EarningsTypeEnum = "LUMPSUMB"
	EarningsTypeEnumBonusesandcommissions        EarningsTypeEnum = "BONUSESANDCOMMISSIONS"
	EarningsTypeEnumLumpsume                     EarningsTypeEnum = "LUMPSUME"
)

func (e EarningsTypeEnum) ToPointer() *EarningsTypeEnum {
	return &e
}

func (e *EarningsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIXED":
		fallthrough
	case "ORDINARYTIMEEARNINGS":
		fallthrough
	case "OVERTIMEEARNINGS":
		fallthrough
	case "ALLOWANCE":
		fallthrough
	case "LUMPSUMD":
		fallthrough
	case "EMPLOYMENTTERMINATIONPAYMENT":
		fallthrough
	case "LUMPSUMA":
		fallthrough
	case "LUMPSUMB":
		fallthrough
	case "BONUSESANDCOMMISSIONS":
		fallthrough
	case "LUMPSUME":
		*e = EarningsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EarningsTypeEnum: %v", v)
	}
}
