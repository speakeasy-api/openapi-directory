<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Limit - You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Limit
{
    /**
     * The Limit identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The interval for the metric. This is required if `metric` is `count` or `volume`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LimitIntervalEnum $interval
     */
	#[\JMS\Serializer\Annotation\SerializedName('interval')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LimitIntervalEnum>')]
    public LimitIntervalEnum $interval;
    
    /**
     * The metric for the Limit.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LimitMetricEnum $metric
     */
	#[\JMS\Serializer\Annotation\SerializedName('metric')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LimitMetricEnum>')]
    public LimitMetricEnum $metric;
    
    /**
     * The identifier of the Account Number, Account, or Card the Limit applies to.
     * 
     * @var string $modelId
     */
	#[\JMS\Serializer\Annotation\SerializedName('model_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $modelId;
    
    /**
     * The type of the model you wish to associate the Limit with.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LimitModelTypeEnum $modelType
     */
	#[\JMS\Serializer\Annotation\SerializedName('model_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LimitModelTypeEnum>')]
    public LimitModelTypeEnum $modelType;
    
    /**
     * The current status of the Limit.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LimitStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LimitStatusEnum>')]
    public LimitStatusEnum $status;
    
    /**
     * A constant representing the object's type. For this resource it will always be `limit`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LimitTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LimitTypeEnum>')]
    public LimitTypeEnum $type;
    
    /**
     * The value to evaluate the Limit against.
     * 
     * @var int $value
     */
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $value;
    
	public function __construct()
	{
		$this->id = "";
		$this->interval = \OpenAPI\OpenAPI\Models\Shared\LimitIntervalEnum::TRANSACTION;
		$this->metric = \OpenAPI\OpenAPI\Models\Shared\LimitMetricEnum::COUNT;
		$this->modelId = "";
		$this->modelType = \OpenAPI\OpenAPI\Models\Shared\LimitModelTypeEnum::ACCOUNT;
		$this->status = \OpenAPI\OpenAPI\Models\Shared\LimitStatusEnum::ACTIVE;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\LimitTypeEnum::LIMIT;
		$this->value = 0;
	}
}
