"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkMqttBrokerRequestBodySecuritySecurity:
    r"""TLS settings of the MQTT broker."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""CA Certificate of the MQTT broker."""  
    verify_hostnames: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyHostnames'), 'exclude': lambda f: f is None }})
    r"""Whether the TLS hostname verification is enabled for the MQTT broker."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkMqttBrokerRequestBodySecurity:
    r"""Security settings of the MQTT broker."""
    
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Security protocol of the MQTT broker."""  
    security: Optional[CreateNetworkMqttBrokerRequestBodySecuritySecurity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security'), 'exclude': lambda f: f is None }})
    r"""TLS settings of the MQTT broker."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkMqttBrokerRequestBody:
    
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    r"""Host name/IP address where the MQTT broker runs."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the MQTT broker."""  
    port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port') }})
    r"""Host port though which the MQTT broker can be reached."""  
    authentication: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})
    r"""Authentication settings of the MQTT broker"""  
    security: Optional[CreateNetworkMqttBrokerRequestBodySecurity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security'), 'exclude': lambda f: f is None }})
    r"""Security settings of the MQTT broker."""  
    

@dataclasses.dataclass
class CreateNetworkMqttBrokerRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkMqttBrokerRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkMqttBrokerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_mqtt_broker_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    