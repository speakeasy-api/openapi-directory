"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSONAdminBadgesTriggers:
    
    none: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('none') }})  
    post_action: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_action') }})  
    post_revision: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_revision') }})  
    trust_level_change: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level_change') }})  
    user_change: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_change') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSONAdminBadges:
    
    badge_grouping_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_grouping_ids') }})  
    badge_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_ids') }})  
    badge_type_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_type_ids') }})  
    protected_system_fields: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protected_system_fields') }})  
    triggers: AdminListBadges200ApplicationJSONAdminBadgesTriggers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggers') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSONBadgeGroupings:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})  
    system: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSONBadgeTypes:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    sort_order: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSONBadges:
    
    allow_title: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_title') }})  
    auto_revoke: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_revoke') }})  
    badge_grouping_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_grouping_id') }})  
    badge_type_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_type_id') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})  
    grant_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_count') }})  
    icon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url') }})  
    listable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listable') }})  
    long_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('long_description') }})  
    manually_grantable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manually_grantable') }})  
    multiple_grant: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiple_grant') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    query: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})  
    show_posts: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_posts') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    system: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    target_posts: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_posts') }})  
    trigger: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger') }})  
    i18n_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i18n_name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminListBadges200ApplicationJSON:
    r"""success response"""
    
    admin_badges: AdminListBadges200ApplicationJSONAdminBadges = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin_badges') }})  
    badge_groupings: list[AdminListBadges200ApplicationJSONBadgeGroupings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_groupings') }})  
    badge_types: list[AdminListBadges200ApplicationJSONBadgeTypes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_types') }})  
    badges: list[AdminListBadges200ApplicationJSONBadges] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badges') }})  
    

@dataclasses.dataclass
class AdminListBadgesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    admin_list_badges_200_application_json_object: Optional[AdminListBadges200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    