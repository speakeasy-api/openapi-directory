"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import definitiondocument as shared_definitiondocument
from ..shared import deploymenttarget_enum as shared_deploymenttarget_enum
from ..shared import metricsconfiguration as shared_metricsconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSystemInstanceRequest:
    
    definition: shared_definitiondocument.DefinitionDocument = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition') }})
    r"""A document that defines an entity."""  
    target: shared_deploymenttarget_enum.DeploymentTargetEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target') }})  
    flow_actions_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowActionsRoleArn'), 'exclude': lambda f: f is None }})  
    greengrass_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('greengrassGroupName'), 'exclude': lambda f: f is None }})  
    metrics_configuration: Optional[shared_metricsconfiguration.MetricsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricsConfiguration'), 'exclude': lambda f: f is None }})
    r"""An object that specifies whether cloud metrics are collected in a deployment and, if so, what role is used to collect metrics."""  
    s3_bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3BucketName'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    