<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Node - Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 12]
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Node
{
    /**
     * This is motivated by informing a management server during canary which version of Envoy is being tested in a heterogeneous fleet. This will be set by Envoy in management server RPCs. This field is deprecated in favor of the user_agent_name and user_agent_version values.
     * 
     * @var ?string $buildVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('buildVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buildVersion = null;
    
    /**
     * Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example `com.acme.feature`. See :ref:`the list of features ` that xDS client may support.
     * 
     * @var ?array<string> $clientFeatures
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientFeatures')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $clientFeatures = null;
    
    /**
     * Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.
     * 
     * @var ?string $cluster
     */
	#[\JMS\Serializer\Annotation\SerializedName('cluster')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cluster = null;
    
    /**
     * List of extensions and their versions supported by the node.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Extension> $extensions
     */
	#[\JMS\Serializer\Annotation\SerializedName('extensions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Extension>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $extensions = null;
    
    /**
     * An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Address> $listeningAddresses
     */
	#[\JMS\Serializer\Annotation\SerializedName('listeningAddresses')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Address>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $listeningAddresses = null;
    
    /**
     * Identifies location of where either Envoy runs or where upstream hosts run.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Locality $locality
     */
	#[\JMS\Serializer\Annotation\SerializedName('locality')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Locality')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Locality $locality = null;
    
    /**
     * Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.
     * 
     * @var ?array<string, mixed> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BuildVersion $userAgentBuildVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('userAgentBuildVersion')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BuildVersion')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BuildVersion $userAgentBuildVersion = null;
    
    /**
     * Free-form string that identifies the entity requesting config. E.g. "envoy" or "grpc"
     * 
     * @var ?string $userAgentName
     */
	#[\JMS\Serializer\Annotation\SerializedName('userAgentName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userAgentName = null;
    
    /**
     * Free-form string that identifies the version of the entity requesting config. E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
     * 
     * @var ?string $userAgentVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('userAgentVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userAgentVersion = null;
    
	public function __construct()
	{
		$this->buildVersion = null;
		$this->clientFeatures = null;
		$this->cluster = null;
		$this->extensions = null;
		$this->id = null;
		$this->listeningAddresses = null;
		$this->locality = null;
		$this->metadata = null;
		$this->userAgentBuildVersion = null;
		$this->userAgentName = null;
		$this->userAgentVersion = null;
	}
}
