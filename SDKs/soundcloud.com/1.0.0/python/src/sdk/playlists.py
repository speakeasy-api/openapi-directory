"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Playlists:
    r"""Playlists Endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_playlists_playlist_id_(self, request: operations.DeletePlaylistsPlaylistIDRequest, security: operations.DeletePlaylistsPlaylistIDSecurity) -> operations.DeletePlaylistsPlaylistIDResponse:
        r"""Deletes a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePlaylistsPlaylistIDRequest, base_url, '/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_playlists_playlist_id_(self, request: operations.GetPlaylistsPlaylistIDRequest, security: operations.GetPlaylistsPlaylistIDSecurity) -> operations.GetPlaylistsPlaylistIDResponse:
        r"""Returns a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlaylistsPlaylistIDRequest, base_url, '/playlists/{playlist_id}', request)
        
        query_params = utils.get_query_params(operations.GetPlaylistsPlaylistIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Playlist])
                res.playlist = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_playlists_playlist_id_reposters(self, request: operations.GetPlaylistsPlaylistIDRepostersRequest, security: operations.GetPlaylistsPlaylistIDRepostersSecurity) -> operations.GetPlaylistsPlaylistIDRepostersResponse:
        r"""Returns a collection of playlist's reposters."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlaylistsPlaylistIDRepostersRequest, base_url, '/playlists/{playlist_id}/reposters', request)
        
        query_params = utils.get_query_params(operations.GetPlaylistsPlaylistIDRepostersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlaylistsPlaylistIDRepostersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MetaUsers])
                res.meta_users = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_playlists_playlist_id_tracks(self, request: operations.GetPlaylistsPlaylistIDTracksRequest, security: operations.GetPlaylistsPlaylistIDTracksSecurity) -> operations.GetPlaylistsPlaylistIDTracksResponse:
        r"""Returns tracks under a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlaylistsPlaylistIDTracksRequest, base_url, '/playlists/{playlist_id}/tracks', request)
        
        query_params = utils.get_query_params(operations.GetPlaylistsPlaylistIDTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlaylistsPlaylistIDTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_playlists_playlist_id_tracks_200_application_json_one_of = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_playlists(self, request: shared.CreateUpdatePlaylistRequest, security: operations.PostPlaylistsSecurity) -> operations.PostPlaylistsResponse:
        r"""Creates a playlist."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/playlists'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPlaylistsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPlaylists201ApplicationJSON])
                res.post_playlists_201_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_playlists_playlist_id_(self, request: operations.PutPlaylistsPlaylistIDRequest, security: operations.PutPlaylistsPlaylistIDSecurity) -> operations.PutPlaylistsPlaylistIDResponse:
        r"""Updates a playlist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPlaylistsPlaylistIDRequest, base_url, '/playlists/{playlist_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_update_playlist_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutPlaylistsPlaylistID200ApplicationJSON])
                res.put_playlists_playlist_id_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    