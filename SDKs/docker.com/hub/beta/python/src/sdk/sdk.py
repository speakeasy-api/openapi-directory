"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .access_tokens import AccessTokens
from .audit_logs import AuditLogs
from .authentication import Authentication
from .images import Images
from .org_settings import OrgSettings
from .repositories import Repositories
from .scim import Scim

SERVERS = [
    "https://hub.docker.com/",
    "https://docker.com/{version}",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Docker Hub is a service provided by Docker for finding and sharing container
    images with your team.
    
    It is the world's largest library and community for container images.
    
    In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),
    
    Docker provides an API that allows you to interact with Docker Hub.
    
    Browse through the Docker Hub API documentation to explore the supported endpoints.
    """
    access_tokens: AccessTokens
    r"""The Personal Access Token endpoints lets you manage personal access tokens. For more
    information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
    
    You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/) 
    or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer 
    token.
    
    ### Scopes
    
    For each scope grouping (in this case \"repo\"), you only need to define 1 scope as any lower 
    scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both 
    `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and* 
    `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
    
    ***Treat your personal access token like your password and keep it secret. You cannot retrieve 
    your token after it is generated.***
    """
    audit_logs: AuditLogs
    r"""The Audit Logs API endpoints allow you to query audit log events across a
    namespace.
    
    For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)
    """
    authentication: Authentication
    r"""Most Docker Hub API endpoints require you to authenticate using your
    Docker credentials before using them.
    
    Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending 
    on your plan (Free, Pro, or Team) and your account's permissions.
    
    To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
    """
    images: Images
    r"""The Advanced Image Management API endpoints allow you to manage Docker
    images across all repositories.
    
    For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).
    """
    org_settings: OrgSettings
    r"""The Org Settings API endpoints allow you to manage your organization's
    settings.
    """
    repositories: Repositories
    r"""The repository endpoints allow you to manage your repository's
    configuration like description.
    """
    scim: Scim
    r"""SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
    For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.access_tokens = AccessTokens(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.audit_logs = AuditLogs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.authentication = Authentication(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.images = Images(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.org_settings = OrgSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.repositories = Repositories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.scim = Scim(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    