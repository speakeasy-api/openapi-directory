"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativeassetid as shared_creativeassetid
from ..shared import creativecustomevent as shared_creativecustomevent
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import offsetposition as shared_offsetposition
from ..shared import size as shared_size
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeAssetAlignmentEnum(str, Enum):
    r"""Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL ."""
    ALIGNMENT_TOP = 'ALIGNMENT_TOP'
    ALIGNMENT_RIGHT = 'ALIGNMENT_RIGHT'
    ALIGNMENT_BOTTOM = 'ALIGNMENT_BOTTOM'
    ALIGNMENT_LEFT = 'ALIGNMENT_LEFT'

class CreativeAssetArtworkTypeEnum(str, Enum):
    r"""Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""
    ARTWORK_TYPE_FLASH = 'ARTWORK_TYPE_FLASH'
    ARTWORK_TYPE_HTML5 = 'ARTWORK_TYPE_HTML5'
    ARTWORK_TYPE_MIXED = 'ARTWORK_TYPE_MIXED'
    ARTWORK_TYPE_IMAGE = 'ARTWORK_TYPE_IMAGE'

class CreativeAssetChildAssetTypeEnum(str, Enum):
    r"""Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID."""
    CHILD_ASSET_TYPE_FLASH = 'CHILD_ASSET_TYPE_FLASH'
    CHILD_ASSET_TYPE_VIDEO = 'CHILD_ASSET_TYPE_VIDEO'
    CHILD_ASSET_TYPE_IMAGE = 'CHILD_ASSET_TYPE_IMAGE'
    CHILD_ASSET_TYPE_DATA = 'CHILD_ASSET_TYPE_DATA'

class CreativeAssetDetectedFeaturesEnum(str, Enum):
    CSS_FONT_FACE = 'CSS_FONT_FACE'
    CSS_BACKGROUND_SIZE = 'CSS_BACKGROUND_SIZE'
    CSS_BORDER_IMAGE = 'CSS_BORDER_IMAGE'
    CSS_BORDER_RADIUS = 'CSS_BORDER_RADIUS'
    CSS_BOX_SHADOW = 'CSS_BOX_SHADOW'
    CSS_FLEX_BOX = 'CSS_FLEX_BOX'
    CSS_HSLA = 'CSS_HSLA'
    CSS_MULTIPLE_BGS = 'CSS_MULTIPLE_BGS'
    CSS_OPACITY = 'CSS_OPACITY'
    CSS_RGBA = 'CSS_RGBA'
    CSS_TEXT_SHADOW = 'CSS_TEXT_SHADOW'
    CSS_ANIMATIONS = 'CSS_ANIMATIONS'
    CSS_COLUMNS = 'CSS_COLUMNS'
    CSS_GENERATED_CONTENT = 'CSS_GENERATED_CONTENT'
    CSS_GRADIENTS = 'CSS_GRADIENTS'
    CSS_REFLECTIONS = 'CSS_REFLECTIONS'
    CSS_TRANSFORMS = 'CSS_TRANSFORMS'
    CSS_TRANSFORMS3_D = 'CSS_TRANSFORMS3D'
    CSS_TRANSITIONS = 'CSS_TRANSITIONS'
    APPLICATION_CACHE = 'APPLICATION_CACHE'
    CANVAS = 'CANVAS'
    CANVAS_TEXT = 'CANVAS_TEXT'
    DRAG_AND_DROP = 'DRAG_AND_DROP'
    HASH_CHANGE = 'HASH_CHANGE'
    HISTORY = 'HISTORY'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    INDEXED_DB = 'INDEXED_DB'
    INPUT_ATTR_AUTOCOMPLETE = 'INPUT_ATTR_AUTOCOMPLETE'
    INPUT_ATTR_AUTOFOCUS = 'INPUT_ATTR_AUTOFOCUS'
    INPUT_ATTR_LIST = 'INPUT_ATTR_LIST'
    INPUT_ATTR_PLACEHOLDER = 'INPUT_ATTR_PLACEHOLDER'
    INPUT_ATTR_MAX = 'INPUT_ATTR_MAX'
    INPUT_ATTR_MIN = 'INPUT_ATTR_MIN'
    INPUT_ATTR_MULTIPLE = 'INPUT_ATTR_MULTIPLE'
    INPUT_ATTR_PATTERN = 'INPUT_ATTR_PATTERN'
    INPUT_ATTR_REQUIRED = 'INPUT_ATTR_REQUIRED'
    INPUT_ATTR_STEP = 'INPUT_ATTR_STEP'
    INPUT_TYPE_SEARCH = 'INPUT_TYPE_SEARCH'
    INPUT_TYPE_TEL = 'INPUT_TYPE_TEL'
    INPUT_TYPE_URL = 'INPUT_TYPE_URL'
    INPUT_TYPE_EMAIL = 'INPUT_TYPE_EMAIL'
    INPUT_TYPE_DATETIME = 'INPUT_TYPE_DATETIME'
    INPUT_TYPE_DATE = 'INPUT_TYPE_DATE'
    INPUT_TYPE_MONTH = 'INPUT_TYPE_MONTH'
    INPUT_TYPE_WEEK = 'INPUT_TYPE_WEEK'
    INPUT_TYPE_TIME = 'INPUT_TYPE_TIME'
    INPUT_TYPE_DATETIME_LOCAL = 'INPUT_TYPE_DATETIME_LOCAL'
    INPUT_TYPE_NUMBER = 'INPUT_TYPE_NUMBER'
    INPUT_TYPE_RANGE = 'INPUT_TYPE_RANGE'
    INPUT_TYPE_COLOR = 'INPUT_TYPE_COLOR'
    LOCAL_STORAGE = 'LOCAL_STORAGE'
    POST_MESSAGE = 'POST_MESSAGE'
    SESSION_STORAGE = 'SESSION_STORAGE'
    WEB_SOCKETS = 'WEB_SOCKETS'
    WEB_SQL_DATABASE = 'WEB_SQL_DATABASE'
    WEB_WORKERS = 'WEB_WORKERS'
    GEO_LOCATION = 'GEO_LOCATION'
    INLINE_SVG = 'INLINE_SVG'
    SMIL = 'SMIL'
    SVG_HREF = 'SVG_HREF'
    SVG_CLIP_PATHS = 'SVG_CLIP_PATHS'
    TOUCH = 'TOUCH'
    WEBGL = 'WEBGL'
    SVG_FILTERS = 'SVG_FILTERS'
    SVG_FE_IMAGE = 'SVG_FE_IMAGE'

class CreativeAssetDisplayTypeEnum(str, Enum):
    r"""Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""
    ASSET_DISPLAY_TYPE_INPAGE = 'ASSET_DISPLAY_TYPE_INPAGE'
    ASSET_DISPLAY_TYPE_FLOATING = 'ASSET_DISPLAY_TYPE_FLOATING'
    ASSET_DISPLAY_TYPE_OVERLAY = 'ASSET_DISPLAY_TYPE_OVERLAY'
    ASSET_DISPLAY_TYPE_EXPANDING = 'ASSET_DISPLAY_TYPE_EXPANDING'
    ASSET_DISPLAY_TYPE_FLASH_IN_FLASH = 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH'
    ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING = 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING'
    ASSET_DISPLAY_TYPE_PEEL_DOWN = 'ASSET_DISPLAY_TYPE_PEEL_DOWN'
    ASSET_DISPLAY_TYPE_VPAID_LINEAR = 'ASSET_DISPLAY_TYPE_VPAID_LINEAR'
    ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR = 'ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR'
    ASSET_DISPLAY_TYPE_BACKDROP = 'ASSET_DISPLAY_TYPE_BACKDROP'

class CreativeAssetDurationTypeEnum(str, Enum):
    r"""Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA."""
    ASSET_DURATION_TYPE_AUTO = 'ASSET_DURATION_TYPE_AUTO'
    ASSET_DURATION_TYPE_NONE = 'ASSET_DURATION_TYPE_NONE'
    ASSET_DURATION_TYPE_CUSTOM = 'ASSET_DURATION_TYPE_CUSTOM'

class CreativeAssetOrientationEnum(str, Enum):
    r"""Orientation of video asset. This is a read-only, auto-generated field."""
    LANDSCAPE = 'LANDSCAPE'
    PORTRAIT = 'PORTRAIT'
    SQUARE = 'SQUARE'

class CreativeAssetPositionLeftUnitEnum(str, Enum):
    r"""Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""
    OFFSET_UNIT_PIXEL = 'OFFSET_UNIT_PIXEL'
    OFFSET_UNIT_PERCENT = 'OFFSET_UNIT_PERCENT'
    OFFSET_UNIT_PIXEL_FROM_CENTER = 'OFFSET_UNIT_PIXEL_FROM_CENTER'

class CreativeAssetPositionTopUnitEnum(str, Enum):
    r"""Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA."""
    OFFSET_UNIT_PIXEL = 'OFFSET_UNIT_PIXEL'
    OFFSET_UNIT_PERCENT = 'OFFSET_UNIT_PERCENT'
    OFFSET_UNIT_PIXEL_FROM_CENTER = 'OFFSET_UNIT_PIXEL_FROM_CENTER'

class CreativeAssetRoleEnum(str, Enum):
    r"""Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives."""
    PRIMARY = 'PRIMARY'
    BACKUP_IMAGE = 'BACKUP_IMAGE'
    ADDITIONAL_IMAGE = 'ADDITIONAL_IMAGE'
    ADDITIONAL_FLASH = 'ADDITIONAL_FLASH'
    PARENT_VIDEO = 'PARENT_VIDEO'
    TRANSCODED_VIDEO = 'TRANSCODED_VIDEO'
    OTHER = 'OTHER'
    ALTERNATE_VIDEO = 'ALTERNATE_VIDEO'
    PARENT_AUDIO = 'PARENT_AUDIO'
    TRANSCODED_AUDIO = 'TRANSCODED_AUDIO'

class CreativeAssetStartTimeTypeEnum(str, Enum):
    r"""Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA."""
    ASSET_START_TIME_TYPE_NONE = 'ASSET_START_TIME_TYPE_NONE'
    ASSET_START_TIME_TYPE_CUSTOM = 'ASSET_START_TIME_TYPE_CUSTOM'

class CreativeAssetWindowModeEnum(str, Enum):
    r"""Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING."""
    OPAQUE = 'OPAQUE'
    WINDOW = 'WINDOW'
    TRANSPARENT = 'TRANSPARENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeAsset:
    r"""Creative Asset."""
    
    action_script3: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionScript3'), 'exclude': lambda f: f is None }})
    r"""Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    additional_sizes: Optional[list[shared_size.Size]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalSizes'), 'exclude': lambda f: f is None }})
    r"""Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render."""  
    alignment: Optional[CreativeAssetAlignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alignment'), 'exclude': lambda f: f is None }})
    r"""Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL ."""  
    artwork_type: Optional[CreativeAssetArtworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artworkType'), 'exclude': lambda f: f is None }})
    r"""Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""  
    asset_identifier: Optional[shared_creativeassetid.CreativeAssetID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetIdentifier'), 'exclude': lambda f: f is None }})
    r"""Creative Asset ID."""  
    audio_bit_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioBitRate'), 'exclude': lambda f: f is None }})
    r"""Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    audio_sample_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioSampleRate'), 'exclude': lambda f: f is None }})
    r"""Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    backup_image_exit: Optional[shared_creativecustomevent.CreativeCustomEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupImageExit'), 'exclude': lambda f: f is None }})
    r"""Creative Custom Event."""  
    bit_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bitRate'), 'exclude': lambda f: f is None }})
    r"""Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    child_asset_type: Optional[CreativeAssetChildAssetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childAssetType'), 'exclude': lambda f: f is None }})
    r"""Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID."""  
    collapsed_size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collapsedSize'), 'exclude': lambda f: f is None }})
    r"""Represents the dimensions of ads, placements, creatives, or creative assets."""  
    companion_creative_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionCreativeIds'), 'exclude': lambda f: f is None }})
    r"""List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true."""  
    custom_start_time_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customStartTimeValue'), 'exclude': lambda f: f is None }})
    r"""Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0."""  
    detected_features: Optional[list[CreativeAssetDetectedFeaturesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedFeatures'), 'exclude': lambda f: f is None }})
    r"""List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."""  
    display_type: Optional[CreativeAssetDisplayTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayType'), 'exclude': lambda f: f is None }})
    r"""Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1."""  
    duration_type: Optional[CreativeAssetDurationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationType'), 'exclude': lambda f: f is None }})
    r"""Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA."""  
    expanded_dimension: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expandedDimension'), 'exclude': lambda f: f is None }})
    r"""Represents the dimensions of ads, placements, creatives, or creative assets."""  
    file_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileSize'), 'exclude': lambda f: f is None }})
    r"""File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."""  
    flash_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flashVersion'), 'exclude': lambda f: f is None }})
    r"""Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."""  
    frame_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameRate'), 'exclude': lambda f: f is None }})
    r"""Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."""  
    hide_flash_objects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideFlashObjects'), 'exclude': lambda f: f is None }})
    r"""Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA."""  
    hide_selection_boxes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideSelectionBoxes'), 'exclude': lambda f: f is None }})
    r"""Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA."""  
    horizontally_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontallyLocked'), 'exclude': lambda f: f is None }})
    r"""Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    media_duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaDuration'), 'exclude': lambda f: f is None }})
    r"""Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})
    r"""Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."""  
    offset: Optional[shared_offsetposition.OffsetPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Offset Position."""  
    orientation: Optional[CreativeAssetOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Orientation of video asset. This is a read-only, auto-generated field."""  
    original_backup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalBackup'), 'exclude': lambda f: f is None }})
    r"""Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA."""  
    polite_load: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('politeLoad'), 'exclude': lambda f: f is None }})
    r"""Whether this asset is used as a polite load asset."""  
    position: Optional[shared_offsetposition.OffsetPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Offset Position."""  
    position_left_unit: Optional[CreativeAssetPositionLeftUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionLeftUnit'), 'exclude': lambda f: f is None }})
    r"""Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""  
    position_top_unit: Optional[CreativeAssetPositionTopUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionTopUnit'), 'exclude': lambda f: f is None }})
    r"""Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA."""  
    progressive_serving_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progressiveServingUrl'), 'exclude': lambda f: f is None }})
    r"""Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."""  
    pushdown: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pushdown'), 'exclude': lambda f: f is None }})
    r"""Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height."""  
    pushdown_duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pushdownDuration'), 'exclude': lambda f: f is None }})
    r"""Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive."""  
    role: Optional[CreativeAssetRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives."""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Represents the dimensions of ads, placements, creatives, or creative assets."""  
    ssl_compliant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslCompliant'), 'exclude': lambda f: f is None }})
    r"""Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."""  
    start_time_type: Optional[CreativeAssetStartTimeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTimeType'), 'exclude': lambda f: f is None }})
    r"""Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA."""  
    streaming_serving_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingServingUrl'), 'exclude': lambda f: f is None }})
    r"""Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."""  
    transparency: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transparency'), 'exclude': lambda f: f is None }})
    r"""Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets."""  
    vertically_locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verticallyLocked'), 'exclude': lambda f: f is None }})
    r"""Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."""  
    window_mode: Optional[CreativeAssetWindowModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windowMode'), 'exclude': lambda f: f is None }})
    r"""Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING."""  
    z_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zIndex'), 'exclude': lambda f: f is None }})
    r"""zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive."""  
    zip_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipFilename'), 'exclude': lambda f: f is None }})
    r"""File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER."""  
    zip_filesize: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipFilesize'), 'exclude': lambda f: f is None }})
    r"""Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER."""  
    