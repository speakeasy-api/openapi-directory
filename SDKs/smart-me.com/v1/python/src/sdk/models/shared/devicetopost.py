"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DeviceToPostDeviceEnergyTypeEnum(str, Enum):
    r"""The Energy Type of this device"""
    METER_TYPE_UNKNOWN = 'MeterTypeUnknown'
    METER_TYPE_ELECTRICITY = 'MeterTypeElectricity'
    METER_TYPE_WATER = 'MeterTypeWater'
    METER_TYPE_GAS = 'MeterTypeGas'
    METER_TYPE_HEAT = 'MeterTypeHeat'
    METER_TYPE_HCA = 'MeterTypeHCA'
    METER_TYPE_ALL_METERS = 'MeterTypeAllMeters'
    METER_TYPE_TEMPERATURE = 'MeterTypeTemperature'
    METER_TYPE_M_BUS_GATEWAY = 'MeterTypeMBusGateway'
    METER_TYPE_RS485_GATEWAY = 'MeterTypeRS485Gateway'
    METER_TYPE_CUSTOM_DEVICE = 'MeterTypeCustomDevice'
    METER_TYPE_COMPRESSED_AIR = 'MeterTypeCompressedAir'
    METER_TYPE_SOLAR_LOG = 'MeterTypeSolarLog'
    METER_TYPE_VIRTUAL_METER = 'MeterTypeVirtualMeter'
    METER_TYPE_WM_BUS_GATEWAY = 'MeterTypeWMBusGateway'

class DeviceToPostMeterSubTypeEnum(str, Enum):
    r"""The Sub Type of this Meter."""
    METER_SUB_TYPE_UNKNOWN = 'MeterSubTypeUnknown'
    METER_SUB_TYPE_COLD = 'MeterSubTypeCold'
    METER_SUB_TYPE_HEAT = 'MeterSubTypeHeat'
    METER_SUB_TYPE_CHARGING_STATION = 'MeterSubTypeChargingStation'
    METER_SUB_TYPE_ELECTRICITY = 'MeterSubTypeElectricity'
    METER_SUB_TYPE_WATER = 'MeterSubTypeWater'
    METER_SUB_TYPE_GAS = 'MeterSubTypeGas'
    METER_SUB_TYPE_ELECTRICITY_HEAT = 'MeterSubTypeElectricityHeat'
    METER_SUB_TYPE_TEMPERATURE = 'MeterSubTypeTemperature'
    METER_SUB_TYPE_VIRTUAL_BATTERY = 'MeterSubTypeVirtualBattery'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceToPost:
    r"""Container Class for the Web API"""
    
    active_power: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePower'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ActivePower' }})
    r"""The Active Power or current flow rate. In kW or m3/h"""  
    counter_reading: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReading'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReading' }})
    r"""The Meter Counter Reading (Total Energy used) in kWh or m3."""  
    counter_reading_export: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingExport'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReadingExport' }})
    r"""The Meter Counter Reading only export"""  
    counter_reading_export_t1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingExportT1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReadingExportT1' }})
    r"""The Meter Counter Reading only export (Tariff 1)"""  
    counter_reading_export_t2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingExportT2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReadingExportT2' }})
    r"""The Meter Counter Reading only export (Tariff 2)"""  
    counter_reading_t1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReadingT1' }})
    r"""The Meter Counter Reading Tariff 1 in kWh or m3."""  
    counter_reading_t2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CounterReadingT2' }})
    r"""The Meter Counter Reading Tariff 2 in kWh or m3."""  
    current: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Current'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Current' }})
    r"""The Current (in A)"""  
    current_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CurrentL1' }})
    r"""The Current Phase L1 (in A)"""  
    current_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CurrentL2' }})
    r"""The Current Phase L2 (in A)"""  
    current_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL3'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CurrentL3' }})
    r"""The Current Phase L3 (in A)"""  
    device_energy_type: Optional[DeviceToPostDeviceEnergyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceEnergyType'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DeviceEnergyType' }})
    r"""The Energy Type of this device"""  
    digital_input1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalInput1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DigitalInput1' }})
    r"""The digital input number 1"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Id' }})
    r"""The ID of the device"""  
    meter_sub_type: Optional[DeviceToPostMeterSubTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeterSubType'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'MeterSubType' }})
    r"""The Sub Type of this Meter."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Name' }})
    r"""The Name of the Device"""  
    power_factor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactor'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PowerFactor' }})
    r"""The Power Factor (cos phi). Range: 0 - 1"""  
    power_factor_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PowerFactorL1' }})
    r"""The Power Factor (cos phi) Phase L1. Range: 0 - 1"""  
    power_factor_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PowerFactorL2' }})
    r"""The Power Factor (cos phi) Phase L2. Range: 0 - 1"""  
    power_factor_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL3'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PowerFactorL3' }})
    r"""The Power Factor (cos phi) Phase L3. Range: 0 - 1"""  
    serial: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Serial'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Serial' }})
    r"""The Serial number"""  
    temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Temperature' }})
    r"""The Temperature (in degree celsius)"""  
    value_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValueDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ValueDate' }})
    r"""The Date of the Value (in UTC). If this is null the Server Time is used."""  
    voltage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Voltage'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Voltage' }})
    r"""The Voltage (in V)"""  
    voltage_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VoltageL1' }})
    r"""The Voltage Phase L1 (in V)"""  
    voltage_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VoltageL2' }})
    r"""The Voltage Phase L2 (in V)"""  
    voltage_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL3'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'VoltageL3' }})
    r"""The Voltage Phase L3 (in V)"""  
    