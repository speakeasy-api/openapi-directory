// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PhoneNumberResponseCodeEnum string

const (
	PhoneNumberResponseCodeEnumTwoThousand PhoneNumberResponseCodeEnum = "2000"
)

func (e *PhoneNumberResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = PhoneNumberResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PhoneNumberResponseCodeEnum: %s", s)
	}
}

type PhoneNumberResponseMessageEnum string

const (
	PhoneNumberResponseMessageEnumSuccess PhoneNumberResponseMessageEnum = "Success"
)

func (e *PhoneNumberResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = PhoneNumberResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PhoneNumberResponseMessageEnum: %s", s)
	}
}

type PhoneNumberResponseResultType string

const (
	PhoneNumberResponseResultTypePhoneNumber        PhoneNumberResponseResultType = "PhoneNumber"
	PhoneNumberResponseResultTypeInvalidPhoneNumber PhoneNumberResponseResultType = "InvalidPhoneNumber"
)

type PhoneNumberResponseResult struct {
	PhoneNumber        *PhoneNumber
	InvalidPhoneNumber *InvalidPhoneNumber

	Type PhoneNumberResponseResultType
}

func CreatePhoneNumberResponseResultPhoneNumber(phoneNumber PhoneNumber) PhoneNumberResponseResult {
	typ := PhoneNumberResponseResultTypePhoneNumber

	return PhoneNumberResponseResult{
		PhoneNumber: &phoneNumber,
		Type:        typ,
	}
}

func CreatePhoneNumberResponseResultInvalidPhoneNumber(invalidPhoneNumber InvalidPhoneNumber) PhoneNumberResponseResult {
	typ := PhoneNumberResponseResultTypeInvalidPhoneNumber

	return PhoneNumberResponseResult{
		InvalidPhoneNumber: &invalidPhoneNumber,
		Type:               typ,
	}
}

func (u *PhoneNumberResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	phoneNumber := new(PhoneNumber)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&phoneNumber); err == nil {
		u.PhoneNumber = phoneNumber
		u.Type = PhoneNumberResponseResultTypePhoneNumber
		return nil
	}

	invalidPhoneNumber := new(InvalidPhoneNumber)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&invalidPhoneNumber); err == nil {
		u.InvalidPhoneNumber = invalidPhoneNumber
		u.Type = PhoneNumberResponseResultTypeInvalidPhoneNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PhoneNumberResponseResult) MarshalJSON() ([]byte, error) {
	if u.PhoneNumber != nil {
		return json.Marshal(u.PhoneNumber)
	}

	if u.InvalidPhoneNumber != nil {
		return json.Marshal(u.InvalidPhoneNumber)
	}

	return nil, nil
}

// PhoneNumberResponse - Success
type PhoneNumberResponse struct {
	Code    PhoneNumberResponseCodeEnum    `json:"code"`
	Message PhoneNumberResponseMessageEnum `json:"message"`
	Result  PhoneNumberResponseResult      `json:"result"`
}
