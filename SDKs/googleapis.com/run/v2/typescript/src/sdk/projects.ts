/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a Job.
   */
  runProjectsLocationsJobsCreate(
    req: operations.RunProjectsLocationsJobsCreateRequest,
    security: operations.RunProjectsLocationsJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/jobs", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRunV2JobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsJobsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsJobsCreateResponse =
        new operations.RunProjectsLocationsJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Executions from a Job.
   */
  runProjectsLocationsJobsExecutionsList(
    req: operations.RunProjectsLocationsJobsExecutionsListRequest,
    security: operations.RunProjectsLocationsJobsExecutionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsJobsExecutionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsJobsExecutionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/executions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsJobsExecutionsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsJobsExecutionsListResponse =
        new operations.RunProjectsLocationsJobsExecutionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2ListExecutionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2ListExecutionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Tasks from an Execution of a Job.
   */
  runProjectsLocationsJobsExecutionsTasksList(
    req: operations.RunProjectsLocationsJobsExecutionsTasksListRequest,
    security: operations.RunProjectsLocationsJobsExecutionsTasksListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsJobsExecutionsTasksListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsJobsExecutionsTasksListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/tasks", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsJobsExecutionsTasksListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsJobsExecutionsTasksListResponse =
        new operations.RunProjectsLocationsJobsExecutionsTasksListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2ListTasksResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2ListTasksResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Jobs.
   */
  runProjectsLocationsJobsList(
    req: operations.RunProjectsLocationsJobsListRequest,
    security: operations.RunProjectsLocationsJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/jobs", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsJobsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsJobsListResponse =
        new operations.RunProjectsLocationsJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2ListJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Triggers creation of a new Execution of this Job.
   */
  runProjectsLocationsJobsRun(
    req: operations.RunProjectsLocationsJobsRunRequest,
    security: operations.RunProjectsLocationsJobsRunSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsJobsRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsJobsRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}:run", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRunV2RunJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsJobsRunSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsJobsRunResponse =
        new operations.RunProjectsLocationsJobsRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  runProjectsLocationsOperationsList(
    req: operations.RunProjectsLocationsOperationsListRequest,
    security: operations.RunProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsOperationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsOperationsListResponse =
        new operations.RunProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
   */
  runProjectsLocationsOperationsWait(
    req: operations.RunProjectsLocationsOperationsWaitRequest,
    security: operations.RunProjectsLocationsOperationsWaitSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsOperationsWaitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsOperationsWaitRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}:wait", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleLongrunningWaitOperationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsOperationsWaitSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsOperationsWaitResponse =
        new operations.RunProjectsLocationsOperationsWaitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Service in a given project and location.
   */
  runProjectsLocationsServicesCreate(
    req: operations.RunProjectsLocationsServicesCreateRequest,
    security: operations.RunProjectsLocationsServicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/services",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRunV2ServiceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsServicesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesCreateResponse =
        new operations.RunProjectsLocationsServicesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies.
   */
  runProjectsLocationsServicesGetIamPolicy(
    req: operations.RunProjectsLocationsServicesGetIamPolicyRequest,
    security: operations.RunProjectsLocationsServicesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesGetIamPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesGetIamPolicyResponse =
        new operations.RunProjectsLocationsServicesGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Services.
   */
  runProjectsLocationsServicesList(
    req: operations.RunProjectsLocationsServicesListRequest,
    security: operations.RunProjectsLocationsServicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/services",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsServicesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesListResponse =
        new operations.RunProjectsLocationsServicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2ListServicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2ListServicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a Service.
   */
  runProjectsLocationsServicesPatch(
    req: operations.RunProjectsLocationsServicesPatchRequest,
    security: operations.RunProjectsLocationsServicesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRunV2ServiceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RunProjectsLocationsServicesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesPatchResponse =
        new operations.RunProjectsLocationsServicesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Revision.
   */
  runProjectsLocationsServicesRevisionsDelete(
    req: operations.RunProjectsLocationsServicesRevisionsDeleteRequest,
    security: operations.RunProjectsLocationsServicesRevisionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesRevisionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesRevisionsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesRevisionsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesRevisionsDeleteResponse =
        new operations.RunProjectsLocationsServicesRevisionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a Revision.
   */
  runProjectsLocationsServicesRevisionsGet(
    req: operations.RunProjectsLocationsServicesRevisionsGetRequest,
    security: operations.RunProjectsLocationsServicesRevisionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesRevisionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesRevisionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesRevisionsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesRevisionsGetResponse =
        new operations.RunProjectsLocationsServicesRevisionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2Revision = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2Revision
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Revisions from a given Service, or from a given location.
   */
  runProjectsLocationsServicesRevisionsList(
    req: operations.RunProjectsLocationsServicesRevisionsListRequest,
    security: operations.RunProjectsLocationsServicesRevisionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesRevisionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesRevisionsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/revisions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesRevisionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesRevisionsListResponse =
        new operations.RunProjectsLocationsServicesRevisionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRunV2ListRevisionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRunV2ListRevisionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.
   */
  runProjectsLocationsServicesSetIamPolicy(
    req: operations.RunProjectsLocationsServicesSetIamPolicyRequest,
    security: operations.RunProjectsLocationsServicesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunProjectsLocationsServicesSetIamPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1SetIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesSetIamPolicyResponse =
        new operations.RunProjectsLocationsServicesSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
   */
  runProjectsLocationsServicesTestIamPermissions(
    req: operations.RunProjectsLocationsServicesTestIamPermissionsRequest,
    security: operations.RunProjectsLocationsServicesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RunProjectsLocationsServicesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RunProjectsLocationsServicesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1TestIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RunProjectsLocationsServicesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunProjectsLocationsServicesTestIamPermissionsResponse =
        new operations.RunProjectsLocationsServicesTestIamPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1TestIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
