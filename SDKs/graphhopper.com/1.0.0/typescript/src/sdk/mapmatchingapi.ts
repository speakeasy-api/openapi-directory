/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about map matching aka "snap to road"
 */
export class MapMatchingAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Map-match a GPX file
   *
   * @remarks
   * ### Example
   * You get an example response for a GPX via:
   *
   * ```
   * curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]" --data @/path/to/some.gpx
   * ```
   *
   * A minimal working GPX file looks like
   * ```gpx
   * <gpx>
   *  <trk>
   *   <trkseg>
   *    <trkpt lat="51.343657" lon="12.360708"></trkpt>
   *    <trkpt lat="51.343796" lon="12.361337"></trkpt>
   *    <trkpt lat="51.342784" lon="12.361882"></trkpt>
   *   </trkseg>
   *  </trk>
   * </gpx>
   * ```
   *
   * ### Introduction
   * ![Map Matching screenshot](./img/map-matching-example.gif)
   *
   * The Map Matching API is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital
   * road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.
   *
   * In the example screenshot above and demo you see the Map Matching API in action where the black line is the GPS track and the green one is matched result.
   *
   * Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing API](#tag/Routing-API) apply here, too.
   *
   * ### API Clients and Examples
   * See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).
   *
   * ### Limits and Counts
   * The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).
   *
   * One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
   *
   */
  postGPX(
    req: operations.PostGPXRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostGPXResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostGPXRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/match";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostGPXResponse = new operations.PostGPXResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.routeResponse = utils.objectToClass(
              httpRes?.data,
              shared.RouteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ghError = utils.objectToClass(httpRes?.data, shared.GHError);
          }
          break;
      }

      return res;
    });
  }
}
