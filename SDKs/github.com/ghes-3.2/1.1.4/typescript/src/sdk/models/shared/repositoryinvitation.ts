/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MinimalRepository } from "./minimalrepository";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The permission associated with the invitation.
 */
export enum RepositoryInvitationPermissionsEnum {
  Read = "read",
  Write = "write",
  Admin = "admin",
  Triage = "triage",
  Maintain = "maintain",
}

/**
 * Repository invitations let you manage who you collaborate with.
 */
export class RepositoryInvitation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Whether or not the invitation has expired
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  expired?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * Unique identifier of the repository invitation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invitee" })
  @Type(() => NullableSimpleUser)
  invitee: NullableSimpleUser;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inviter" })
  @Type(() => NullableSimpleUser)
  inviter: NullableSimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  /**
   * The permission associated with the invitation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  permissions: RepositoryInvitationPermissionsEnum;

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => MinimalRepository)
  repository: MinimalRepository;

  /**
   * URL for the repository invitation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
