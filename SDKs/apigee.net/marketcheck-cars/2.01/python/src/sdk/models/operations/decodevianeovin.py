"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import neovin as shared_neovin
from typing import Optional


@dataclasses.dataclass
class DecodeViaNeoVINRequest:
    
    vin: str = dataclasses.field(metadata={'path_param': { 'field_name': 'vin', 'style': 'simple', 'explode': False }})
    r"""The VIN to identify the car. Must be a valid 17 char VIN"""  
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""The API Authentication Key. Mandatory with all API calls."""  
    force_decode: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'force_decode', 'style': 'form', 'explode': True }})
    r"""Decode VIN on the fly instead of cached response"""  
    include_generic: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_generic', 'style': 'form', 'explode': True }})
    r"""Boolean variable to indicate wheather to include generic data as well in response"""  
    

@dataclasses.dataclass
class DecodeViaNeoVINResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    neo_vin: Optional[shared_neovin.NeoVIN] = dataclasses.field(default=None)
    r"""Basic sepcifications details about the car"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    