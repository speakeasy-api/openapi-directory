// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HangupCallResponseMessageEnum - Response message
type HangupCallResponseMessageEnum string

const (
	HangupCallResponseMessageEnumHangupCallExecuted                                  HangupCallResponseMessageEnum = "Hangup Call Executed"
	HangupCallResponseMessageEnumCallUUIDOrRequestUUIDParameterMustBePresent         HangupCallResponseMessageEnum = "CallUUID or RequestUUID Parameter must be present"
	HangupCallResponseMessageEnumBothCallUUIDAndRequestUUIDParametersCannotBePresent HangupCallResponseMessageEnum = "Both CallUUID and RequestUUID Parameters cannot be present"
	HangupCallResponseMessageEnumHangupCallFailed                                    HangupCallResponseMessageEnum = "Hangup Call Failed"
)

func (e HangupCallResponseMessageEnum) ToPointer() *HangupCallResponseMessageEnum {
	return &e
}

func (e *HangupCallResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Hangup Call Executed":
		fallthrough
	case "CallUUID or RequestUUID Parameter must be present":
		fallthrough
	case "Both CallUUID and RequestUUID Parameters cannot be present":
		fallthrough
	case "Hangup Call Failed":
		*e = HangupCallResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HangupCallResponseMessageEnum: %v", v)
	}
}

// HangupCallResponse - Response
type HangupCallResponse struct {
	// Response message
	Message HangupCallResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
