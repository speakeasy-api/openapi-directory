<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Buyers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateResponse
     */
	public function realtimebiddingBuyersCreativesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/creatives', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists creatives as they are at the time of the initial request. This call may take multiple hours to complete. For large, paginated requests, this method returns a snapshot of creatives at the time of request for the first page. `lastStatusUpdate` and `creativeServingDecision` may be outdated for creatives on sequential pages. We recommend [Google Cloud Pub/Sub](//cloud.google.com/pubsub/docs/overview) to view the latest status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListResponse
     */
	public function realtimebiddingBuyersCreativesList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/creatives', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCreativesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCreativesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchResponse
     */
	public function realtimebiddingBuyersCreativesPatch(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersCreativesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all buyer account information the calling buyer user or service account is permissioned to manage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListResponse
     */
	public function realtimebiddingBuyersList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/buyers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBuyersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBuyersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the status of a user list to CLOSED. This prevents new users from being added to the user list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseResponse
     */
	public function realtimebiddingBuyersUserListsClose(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:close', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCloseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateResponse
     */
	public function realtimebiddingBuyersUserListsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/userLists', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a user list by its name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetResponse
     */
	public function realtimebiddingBuyersUserListsGet(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google adds the user to a user list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagResponse
     */
	public function realtimebiddingBuyersUserListsGetRemarketingTag(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getRemarketingTag', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsGetRemarketingTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRemarketingTagResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetRemarketingTagResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the user lists visible to the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListResponse
     */
	public function realtimebiddingBuyersUserListsList(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/userLists', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserListsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUserListsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the status of a user list to OPEN. This allows new users to be added to the user list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenResponse
     */
	public function realtimebiddingBuyersUserListsOpen(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:open', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsOpenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given user list. Only user lists with URLRestrictions can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateResponse
     */
	public function realtimebiddingBuyersUserListsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userListInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RealtimebiddingBuyersUserListsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
}