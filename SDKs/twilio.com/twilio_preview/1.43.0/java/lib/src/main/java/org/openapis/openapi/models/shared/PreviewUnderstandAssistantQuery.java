/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PreviewUnderstandAssistantQuery - Created
 */
public class PreviewUnderstandAssistantQuery {
    /**
     * The unique ID of the Account that created this Query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public PreviewUnderstandAssistantQuery withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The unique ID of the parent Assistant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistant_sid")
    public String assistantSid;

    public PreviewUnderstandAssistantQuery withAssistantSid(String assistantSid) {
        this.assistantSid = assistantSid;
        return this;
    }
    
    /**
     * The date that this resource was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public PreviewUnderstandAssistantQuery withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date that this resource was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public PreviewUnderstandAssistantQuery withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * An ISO language-country string of the sample.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public PreviewUnderstandAssistantQuery withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The unique ID of the Model Build queried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model_build_sid")
    public String modelBuildSid;

    public PreviewUnderstandAssistantQuery withModelBuildSid(String modelBuildSid) {
        this.modelBuildSid = modelBuildSid;
        return this;
    }
    
    /**
     * The end-user's natural language input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;

    public PreviewUnderstandAssistantQuery withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * The natural language analysis results which include the Task recognized, the confidence score and a list of identified Fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    public Object results;

    public PreviewUnderstandAssistantQuery withResults(Object results) {
        this.results = results;
        return this;
    }
    
    /**
     * An optional reference to the Sample created from this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sample_sid")
    public String sampleSid;

    public PreviewUnderstandAssistantQuery withSampleSid(String sampleSid) {
        this.sampleSid = sampleSid;
        return this;
    }
    
    /**
     * A 34 character string that uniquely identifies this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public PreviewUnderstandAssistantQuery withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * The communication channel where this end-user input came from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_channel")
    public String sourceChannel;

    public PreviewUnderstandAssistantQuery withSourceChannel(String sourceChannel) {
        this.sourceChannel = sourceChannel;
        return this;
    }
    
    /**
     * A string that described the query status. The values can be: pending_review, reviewed, discarded
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public PreviewUnderstandAssistantQuery withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public PreviewUnderstandAssistantQuery withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public PreviewUnderstandAssistantQuery(){}
}
