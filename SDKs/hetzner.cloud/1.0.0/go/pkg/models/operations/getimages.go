// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetImagesSortEnum - Can be used multiple times.
type GetImagesSortEnum string

const (
	GetImagesSortEnumID          GetImagesSortEnum = "id"
	GetImagesSortEnumIDAsc       GetImagesSortEnum = "id:asc"
	GetImagesSortEnumIDDesc      GetImagesSortEnum = "id:desc"
	GetImagesSortEnumName        GetImagesSortEnum = "name"
	GetImagesSortEnumNameAsc     GetImagesSortEnum = "name:asc"
	GetImagesSortEnumNameDesc    GetImagesSortEnum = "name:desc"
	GetImagesSortEnumCreated     GetImagesSortEnum = "created"
	GetImagesSortEnumCreatedAsc  GetImagesSortEnum = "created:asc"
	GetImagesSortEnumCreatedDesc GetImagesSortEnum = "created:desc"
)

func (e *GetImagesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetImagesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImagesSortEnum: %s", s)
	}
}

// GetImagesStatusEnum - Can be used multiple times. The response will only contain Images matching the status.
type GetImagesStatusEnum string

const (
	GetImagesStatusEnumAvailable GetImagesStatusEnum = "available"
	GetImagesStatusEnumCreating  GetImagesStatusEnum = "creating"
)

func (e *GetImagesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "creating":
		*e = GetImagesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImagesStatusEnum: %s", s)
	}
}

// GetImagesTypeEnum - Can be used multiple times.
type GetImagesTypeEnum string

const (
	GetImagesTypeEnumSystem   GetImagesTypeEnum = "system"
	GetImagesTypeEnumSnapshot GetImagesTypeEnum = "snapshot"
	GetImagesTypeEnumBackup   GetImagesTypeEnum = "backup"
	GetImagesTypeEnumApp      GetImagesTypeEnum = "app"
)

func (e *GetImagesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "system":
		fallthrough
	case "snapshot":
		fallthrough
	case "backup":
		fallthrough
	case "app":
		*e = GetImagesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImagesTypeEnum: %s", s)
	}
}

type GetImagesRequest struct {
	// Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`
	BoundTo *string `queryParam:"style=form,explode=true,name=bound_to"`
	// Can be used multiple times.
	IncludeDeprecated *bool `queryParam:"style=form,explode=true,name=include_deprecated"`
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetImagesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times. The response will only contain Images matching the status.
	Status *GetImagesStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Can be used multiple times.
	Type *GetImagesTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

// GetImages200ApplicationJSONImagesCreatedFrom - Information about the Server the Image was created from
type GetImages200ApplicationJSONImagesCreatedFrom struct {
	// ID of the Server the Image was created from
	ID int64 `json:"id"`
	// Server name at the time the Image was created
	Name string `json:"name"`
}

// GetImages200ApplicationJSONImagesOsFlavorEnum - Flavor of operating system contained in the Image
type GetImages200ApplicationJSONImagesOsFlavorEnum string

const (
	GetImages200ApplicationJSONImagesOsFlavorEnumUbuntu  GetImages200ApplicationJSONImagesOsFlavorEnum = "ubuntu"
	GetImages200ApplicationJSONImagesOsFlavorEnumCentos  GetImages200ApplicationJSONImagesOsFlavorEnum = "centos"
	GetImages200ApplicationJSONImagesOsFlavorEnumDebian  GetImages200ApplicationJSONImagesOsFlavorEnum = "debian"
	GetImages200ApplicationJSONImagesOsFlavorEnumFedora  GetImages200ApplicationJSONImagesOsFlavorEnum = "fedora"
	GetImages200ApplicationJSONImagesOsFlavorEnumUnknown GetImages200ApplicationJSONImagesOsFlavorEnum = "unknown"
)

func (e *GetImages200ApplicationJSONImagesOsFlavorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ubuntu":
		fallthrough
	case "centos":
		fallthrough
	case "debian":
		fallthrough
	case "fedora":
		fallthrough
	case "unknown":
		*e = GetImages200ApplicationJSONImagesOsFlavorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImages200ApplicationJSONImagesOsFlavorEnum: %s", s)
	}
}

// GetImages200ApplicationJSONImagesProtection - Protection configuration for the Resource
type GetImages200ApplicationJSONImagesProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetImages200ApplicationJSONImagesStatusEnum - Whether the Image can be used or if it's still being created or unavailable
type GetImages200ApplicationJSONImagesStatusEnum string

const (
	GetImages200ApplicationJSONImagesStatusEnumAvailable   GetImages200ApplicationJSONImagesStatusEnum = "available"
	GetImages200ApplicationJSONImagesStatusEnumCreating    GetImages200ApplicationJSONImagesStatusEnum = "creating"
	GetImages200ApplicationJSONImagesStatusEnumUnavailable GetImages200ApplicationJSONImagesStatusEnum = "unavailable"
)

func (e *GetImages200ApplicationJSONImagesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "creating":
		fallthrough
	case "unavailable":
		*e = GetImages200ApplicationJSONImagesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImages200ApplicationJSONImagesStatusEnum: %s", s)
	}
}

// GetImages200ApplicationJSONImagesTypeEnum - Type of the Image
type GetImages200ApplicationJSONImagesTypeEnum string

const (
	GetImages200ApplicationJSONImagesTypeEnumSystem    GetImages200ApplicationJSONImagesTypeEnum = "system"
	GetImages200ApplicationJSONImagesTypeEnumApp       GetImages200ApplicationJSONImagesTypeEnum = "app"
	GetImages200ApplicationJSONImagesTypeEnumSnapshot  GetImages200ApplicationJSONImagesTypeEnum = "snapshot"
	GetImages200ApplicationJSONImagesTypeEnumBackup    GetImages200ApplicationJSONImagesTypeEnum = "backup"
	GetImages200ApplicationJSONImagesTypeEnumTemporary GetImages200ApplicationJSONImagesTypeEnum = "temporary"
)

func (e *GetImages200ApplicationJSONImagesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "system":
		fallthrough
	case "app":
		fallthrough
	case "snapshot":
		fallthrough
	case "backup":
		fallthrough
	case "temporary":
		*e = GetImages200ApplicationJSONImagesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetImages200ApplicationJSONImagesTypeEnum: %s", s)
	}
}

type GetImages200ApplicationJSONImages struct {
	// ID of Server the Image is bound to. Only set for Images of type `backup`.
	BoundTo int64 `json:"bound_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Information about the Server the Image was created from
	CreatedFrom GetImages200ApplicationJSONImagesCreatedFrom `json:"created_from"`
	// Point in time where the Image was deleted (in ISO-8601 format)
	Deleted string `json:"deleted"`
	// Point in time when the Image is considered to be deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Image
	Description string `json:"description"`
	// Size of the disk contained in the Image in GB
	DiskSize float64 `json:"disk_size"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
	ImageSize float64 `json:"image_size"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Unique identifier of the Image. This value is only set for system Images.
	Name string `json:"name"`
	// Flavor of operating system contained in the Image
	OsFlavor GetImages200ApplicationJSONImagesOsFlavorEnum `json:"os_flavor"`
	// Operating system version
	OsVersion string `json:"os_version"`
	// Protection configuration for the Resource
	Protection GetImages200ApplicationJSONImagesProtection `json:"protection"`
	// Indicates that rapid deploy of the Image is available
	RapidDeploy *bool `json:"rapid_deploy,omitempty"`
	// Whether the Image can be used or if it's still being created or unavailable
	Status GetImages200ApplicationJSONImagesStatusEnum `json:"status"`
	// Type of the Image
	Type GetImages200ApplicationJSONImagesTypeEnum `json:"type"`
}

type GetImages200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetImages200ApplicationJSONMeta struct {
	Pagination GetImages200ApplicationJSONMetaPagination `json:"pagination"`
}

// GetImages200ApplicationJSON - The `images` key in the reply contains an array of Image objects with this structure
type GetImages200ApplicationJSON struct {
	Images []GetImages200ApplicationJSONImages `json:"images"`
	Meta   *GetImages200ApplicationJSONMeta    `json:"meta,omitempty"`
}

type GetImagesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `images` key in the reply contains an array of Image objects with this structure
	GetImages200ApplicationJSONObject *GetImages200ApplicationJSON
}
