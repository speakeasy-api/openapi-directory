// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetNetworkFirmwareUpgradesRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCamera - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCamera struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensor - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensor struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion - Details of the current version on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion - Details of the version the device upgraded from
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion - Details of the version the device upgraded to
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade - Details of the last firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade struct {
	// Details of the version the device upgraded from
	FromVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion `json:"fromVersion,omitempty"`
	// Timestamp of the last successful firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device upgraded to
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion - Details of the version the device will upgrade to if it exists
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion struct {
	// Name of the firmware version
	Firmware *string `json:"firmware,omitempty"`
	// Firmware version identifier
	ID *string `json:"id,omitempty"`
	// Release date of the firmware version
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	// Release type of the firmware version
	ReleaseType *string `json:"releaseType,omitempty"`
	// Firmware version short name
	ShortName *string `json:"shortName,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade - Details of the next firmware upgrade on the device
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade struct {
	// Timestamp of the next scheduled firmware upgrade
	Time *time.Time `json:"time,omitempty"`
	// Details of the version the device will upgrade to if it exists
	ToVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProductsWireless - The network device to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProductsWireless struct {
	// Firmware versions available for upgrade
	AvailableVersions []GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions `json:"availableVersions,omitempty"`
	// Details of the current version on the device
	CurrentVersion *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion `json:"currentVersion,omitempty"`
	// Details of the last firmware upgrade on the device
	LastUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade `json:"lastUpgrade,omitempty"`
	// Details of the next firmware upgrade on the device
	NextUpgrade *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`
	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease *bool `json:"participateInNextBetaRelease,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONProducts - The network devices to be updated
type GetNetworkFirmwareUpgrades200ApplicationJSONProducts struct {
	// The network device to be updated
	Appliance *GetNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance `json:"appliance,omitempty"`
	// The network device to be updated
	Camera *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCamera `json:"camera,omitempty"`
	// The network device to be updated
	CellularGateway *GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway `json:"cellularGateway,omitempty"`
	// The network device to be updated
	Sensor *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensor `json:"sensor,omitempty"`
	// The network device to be updated
	Switch *GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch `json:"switch,omitempty"`
	// The network device to be updated
	Wireless *GetNetworkFirmwareUpgrades200ApplicationJSONProductsWireless `json:"wireless,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum - Day of the week
type GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum string

const (
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumFri       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "fri"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumFriday    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "friday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumMon       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "mon"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumMonday    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "monday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSat       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sat"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSaturday  GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "saturday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSun       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sun"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumSunday    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "sunday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumThu       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "thu"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumThursday  GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "thursday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumTue       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "tue"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumTuesday   GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "tuesday"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumWed       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "wed"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnumWednesday GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum = "wednesday"
)

func (e GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum) ToPointer() *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum {
	return &e
}

func (e *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fri":
		fallthrough
	case "friday":
		fallthrough
	case "mon":
		fallthrough
	case "monday":
		fallthrough
	case "sat":
		fallthrough
	case "saturday":
		fallthrough
	case "sun":
		fallthrough
	case "sunday":
		fallthrough
	case "thu":
		fallthrough
	case "thursday":
		fallthrough
	case "tue":
		fallthrough
	case "tuesday":
		fallthrough
	case "wed":
		fallthrough
	case "wednesday":
		*e = GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum: %v", v)
	}
}

// GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum - Hour of the day
type GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum string

const (
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumZero00        GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "0:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTen00         GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "10:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEleven00      GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "11:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwelve00      GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "12:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumThirteen00    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "13:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFourteen00    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "14:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFifteen00     GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "15:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSixteen00     GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "16:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSeventeen00   GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "17:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEighteen00    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "18:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumNineteen00    GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "19:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumOne00         GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "1:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwenty00      GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "20:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyOne00   GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "21:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyTwo00   GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "22:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwentyThree00 GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "23:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumTwo00         GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "2:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumThree00       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "3:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFour00        GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "4:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumFive00        GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "5:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSix00         GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "6:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumSeven00       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "7:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumEight00       GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "8:00"
	GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnumNine00        GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum = "9:00"
)

func (e GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum) ToPointer() *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum {
	return &e
}

func (e *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0:00":
		fallthrough
	case "10:00":
		fallthrough
	case "11:00":
		fallthrough
	case "12:00":
		fallthrough
	case "13:00":
		fallthrough
	case "14:00":
		fallthrough
	case "15:00":
		fallthrough
	case "16:00":
		fallthrough
	case "17:00":
		fallthrough
	case "18:00":
		fallthrough
	case "19:00":
		fallthrough
	case "1:00":
		fallthrough
	case "20:00":
		fallthrough
	case "21:00":
		fallthrough
	case "22:00":
		fallthrough
	case "23:00":
		fallthrough
	case "2:00":
		fallthrough
	case "3:00":
		fallthrough
	case "4:00":
		fallthrough
	case "5:00":
		fallthrough
	case "6:00":
		fallthrough
	case "7:00":
		fallthrough
	case "8:00":
		fallthrough
	case "9:00":
		*e = GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum: %v", v)
	}
}

// GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow - Upgrade window for devices in network
type GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow struct {
	// Day of the week
	DayOfWeek *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Hour of the day
	HourOfDay *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum `json:"hourOfDay,omitempty"`
}

// GetNetworkFirmwareUpgrades200ApplicationJSON - Successful operation
type GetNetworkFirmwareUpgrades200ApplicationJSON struct {
	// The network devices to be updated
	Products *GetNetworkFirmwareUpgrades200ApplicationJSONProducts `json:"products,omitempty"`
	// The timezone for the network
	Timezone *string `json:"timezone,omitempty"`
	// Upgrade window for devices in network
	UpgradeWindow *GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow `json:"upgradeWindow,omitempty"`
}

type GetNetworkFirmwareUpgradesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkFirmwareUpgrades200ApplicationJSONObject *GetNetworkFirmwareUpgrades200ApplicationJSON
}
