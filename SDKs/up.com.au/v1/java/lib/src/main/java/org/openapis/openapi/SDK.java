/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * The Up API gives you programmatic access to your balances and
 * transaction data. You can request past transactions or set up
 * webhooks to receive real-time events when new transactions hit your
 * account. It\u2019s new, it\u2019s exciting and it\u2019s just the beginning.
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.up.com.au/api/v1",
	};
  	
    /**
     * Accounts represent the underlying store used to track balances
     * and the transactions that have occurred to modify those balances
     * over time. Up currently has two types of account: `SAVER`\u2014used to
     * earn interest and to hit savings goals, and `TRANSACTIONAL`\u2014used
     * for everyday spending.
     * 
     */
    public Accounts accounts;
    /**
     * Categories enable understanding where your money goes by driving
     * powerful insights in Up. All categories in Up are pre-defined
     * and are automatically assigned to new purchases in most cases. A
     * parent-child relationship is used to represent categories,
     * however parent categories cannot be directly assigned to
     * transactions.
     * 
     */
    public Categories categories;
    /**
     * Tags are custom labels that can be associated with transactions
     * on Up. Within the Up application, tags provide additional insight
     * into spending. For example, you could have a "Take Away" tag that
     * you apply to purchases from food delivery services. The Up API
     * allows you to manage the tags associated with transactions. Each
     * transaction may have up to 6 tags.
     * 
     * Tags are identified by their labels, which are unique strings,
     * so the tag "Holiday" has also the `id` `"Holiday"`.
     * 
     */
    public Tags tags;
    /**
     * Transactions represent the movement of money into and out of an
     * account. They have many characteristics that vary depending on
     * the kind of transaction. Transactions may be temporarily `HELD`
     * (pending) or `SETTLED`, typically depending on which payment
     * method was used at the point of sale.
     * 
     */
    public Transactions transactions;
    /**
     * Some endpoints exist not to expose data, but to test the API
     * itself. Currently there is only one endpoint in this group: ping!
     * 
     */
    public UtilityEndpoints utilityEndpoints;
    /**
     * Webhooks provide a mechanism for a configured URL to receive
     * events when transaction activity occurs on Up. You can think of
     * webhooks as being like push notifications for your server-side
     * application.
     * 
     */
    public Webhooks webhooks;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.accounts = new Accounts(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.categories = new Categories(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tags = new Tags(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transactions = new Transactions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.utilityEndpoints = new UtilityEndpoints(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.webhooks = new Webhooks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}