"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import forwardsshtunnelconnectivity as shared_forwardsshtunnelconnectivity
from ..shared import gcsprofile as shared_gcsprofile
from ..shared import mysqlprofile as shared_mysqlprofile
from ..shared import oracleprofile as shared_oracleprofile
from ..shared import postgresqlprofile as shared_postgresqlprofile
from ..shared import privateconnectivity as shared_privateconnectivity
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionProfile:
    r"""A set of reusable connection configurations to be used as a source or destination for a stream."""
    
    bigquery_profile: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigqueryProfile'), 'exclude': lambda f: f is None }})
    r"""BigQuery warehouse profile."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The create time of the resource."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    forward_ssh_connectivity: Optional[shared_forwardsshtunnelconnectivity.ForwardSSHTunnelConnectivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardSshConnectivity'), 'exclude': lambda f: f is None }})
    r"""Forward SSH Tunnel connectivity."""  
    gcs_profile: Optional[shared_gcsprofile.GcsProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcsProfile'), 'exclude': lambda f: f is None }})
    r"""Cloud Storage bucket profile."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    mysql_profile: Optional[shared_mysqlprofile.MysqlProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mysqlProfile'), 'exclude': lambda f: f is None }})
    r"""MySQL database profile."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource's name."""  
    oracle_profile: Optional[shared_oracleprofile.OracleProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oracleProfile'), 'exclude': lambda f: f is None }})
    r"""Oracle database profile."""  
    postgresql_profile: Optional[shared_postgresqlprofile.PostgresqlProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postgresqlProfile'), 'exclude': lambda f: f is None }})
    r"""PostgreSQL database profile."""  
    private_connectivity: Optional[shared_privateconnectivity.PrivateConnectivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateConnectivity'), 'exclude': lambda f: f is None }})
    r"""Private Connectivity"""  
    static_service_ip_connectivity: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticServiceIpConnectivity'), 'exclude': lambda f: f is None }})
    r"""Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The update time of the resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionProfileInput:
    r"""A set of reusable connection configurations to be used as a source or destination for a stream."""
    
    bigquery_profile: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigqueryProfile'), 'exclude': lambda f: f is None }})
    r"""BigQuery warehouse profile."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name."""  
    forward_ssh_connectivity: Optional[shared_forwardsshtunnelconnectivity.ForwardSSHTunnelConnectivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardSshConnectivity'), 'exclude': lambda f: f is None }})
    r"""Forward SSH Tunnel connectivity."""  
    gcs_profile: Optional[shared_gcsprofile.GcsProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcsProfile'), 'exclude': lambda f: f is None }})
    r"""Cloud Storage bucket profile."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels."""  
    mysql_profile: Optional[shared_mysqlprofile.MysqlProfileInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mysqlProfile'), 'exclude': lambda f: f is None }})
    r"""MySQL database profile."""  
    oracle_profile: Optional[shared_oracleprofile.OracleProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oracleProfile'), 'exclude': lambda f: f is None }})
    r"""Oracle database profile."""  
    postgresql_profile: Optional[shared_postgresqlprofile.PostgresqlProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postgresqlProfile'), 'exclude': lambda f: f is None }})
    r"""PostgreSQL database profile."""  
    private_connectivity: Optional[shared_privateconnectivity.PrivateConnectivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateConnectivity'), 'exclude': lambda f: f is None }})
    r"""Private Connectivity"""  
    static_service_ip_connectivity: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticServiceIpConnectivity'), 'exclude': lambda f: f is None }})
    r"""Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile."""  
    