<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The API to manage the GameSparks game details
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'//config2.gamesparks.net',
	];
  	
    /**
     * Analytics Restv 2 Controller
     * 
     * @var Analytics $$analytics
     */
	public Analytics $analytics;
	
    /**
     * Billing Details Rest V 2 Controller
     * 
     * @var BillingDetails $$billingDetails
     */
	public BillingDetails $billingDetails;
	
    /**
     * Game Credentials Rest V 2 Controller
     * 
     * @var Credentials $$credentials
     */
	public Credentials $credentials;
	
    /**
     * Experiment Rest Controller
     * 
     * @var Experiments $$experiments
     */
	public Experiments $experiments;
	
    /**
     * Games Admin Restv 2 Controller
     * 
     * @var GamesAdmin $$gamesAdmin
     */
	public GamesAdmin $gamesAdmin;
	
    /**
     * Manage Restv 2 Controller
     * 
     * @var Manage $$manage
     */
	public Manage $manage;
	
    /**
     * Log Summary Restv 2 Controller
     * 
     * @var Notifications $$notifications
     */
	public Notifications $notifications;
	
    /**
     * Push Notification Test Controller
     * 
     * @var PushNotificationTest $$pushNotificationTest
     */
	public PushNotificationTest $pushNotificationTest;
	
    /**
     * Region Restv 2 Controller
     * 
     * @var Region $$region
     */
	public Region $region;
	
    /**
     * Scripts Restv 2 Controller
     * 
     * @var Scripts $$scripts
     */
	public Scripts $scripts;
	
    /**
     * Segment Query Filter Restv 2 Controller
     * 
     * @var SegmentQueryFilters $$segmentQueryFilters
     */
	public SegmentQueryFilters $segmentQueryFilters;
	
	public Snapshots $snapshots;
	
    /**
     * Test Harness Restv 2 Controller
     * 
     * @var TestHarness $$testHarness
     */
	public TestHarness $testHarness;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->analytics = new Analytics(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->billingDetails = new BillingDetails(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->credentials = new Credentials(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->experiments = new Experiments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->gamesAdmin = new GamesAdmin(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->manage = new Manage(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->notifications = new Notifications(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->pushNotificationTest = new PushNotificationTest(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->region = new Region(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->scripts = new Scripts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->segmentQueryFilters = new SegmentQueryFilters(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->snapshots = new Snapshots(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->testHarness = new TestHarness(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}