/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ItemVariationLocationOverrides - Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
 */
public class ItemVariationLocationOverrides {
    /**
     * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
     * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
     * 
     * This value is always an integer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_alert_threshold")
    public Long inventoryAlertThreshold;
    public ItemVariationLocationOverrides withInventoryAlertThreshold(Long inventoryAlertThreshold) {
        this.inventoryAlertThreshold = inventoryAlertThreshold;
        return this;
    }
    
    /**
     * Indicates whether the `CatalogItemVariation` displays an alert when its inventory
     * quantity is less than or equal to its `inventory_alert_threshold`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_alert_type")
    public String inventoryAlertType;
    public ItemVariationLocationOverrides withInventoryAlertType(String inventoryAlertType) {
        this.inventoryAlertType = inventoryAlertType;
        return this;
    }
    
    /**
     * The ID of the `Location`. This can include locations that are deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;
    public ItemVariationLocationOverrides withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_money")
    public Money priceMoney;
    public ItemVariationLocationOverrides withPriceMoney(Money priceMoney) {
        this.priceMoney = priceMoney;
        return this;
    }
    
    /**
     * The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    public String pricingType;
    public ItemVariationLocationOverrides withPricingType(String pricingType) {
        this.pricingType = pricingType;
        return this;
    }
    
    /**
     * If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("track_inventory")
    public Boolean trackInventory;
    public ItemVariationLocationOverrides withTrackInventory(Boolean trackInventory) {
        this.trackInventory = trackInventory;
        return this;
    }
    
}
