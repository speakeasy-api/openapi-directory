"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DriveGroups:
    r"""Drive Groups resource represents the groups of drives in the cloud storage service. It provides methods for managing and accessing the drive groups, such as creating, deleting, and listing drive groups. A drive group is a logical grouping of drives, which can be used to manage the drives in the cloud storage service."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_groups_add(self, request: operations.DriveGroupsAddRequest, security: operations.DriveGroupsAddSecurity) -> operations.DriveGroupsAddResponse:
        r"""Create DriveGroup
        Create DriveGroup
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-storage/drive-groups'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "drive_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.DriveGroupsAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveGroupsAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateDriveGroupResponse])
                res.create_drive_group_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    def drive_groups_all(self, request: operations.DriveGroupsAllRequest, security: operations.DriveGroupsAllSecurity) -> operations.DriveGroupsAllResponse:
        r"""List DriveGroups
        List DriveGroups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/file-storage/drive-groups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DriveGroupsAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveGroupsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDriveGroupsResponse])
                res.get_drive_groups_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    def drive_groups_delete(self, request: operations.DriveGroupsDeleteRequest, security: operations.DriveGroupsDeleteSecurity) -> operations.DriveGroupsDeleteResponse:
        r"""Delete DriveGroup
        Delete DriveGroup
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveGroupsDeleteRequest, base_url, '/file-storage/drive-groups/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DriveGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteDriveGroupResponse])
                res.delete_drive_group_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    def drive_groups_one(self, request: operations.DriveGroupsOneRequest, security: operations.DriveGroupsOneSecurity) -> operations.DriveGroupsOneResponse:
        r"""Get DriveGroup
        Get DriveGroup
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveGroupsOneRequest, base_url, '/file-storage/drive-groups/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DriveGroupsOneRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveGroupsOneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDriveGroupResponse])
                res.get_drive_group_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    def drive_groups_update(self, request: operations.DriveGroupsUpdateRequest, security: operations.DriveGroupsUpdateSecurity) -> operations.DriveGroupsUpdateResponse:
        r"""Update DriveGroup
        Update DriveGroup
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveGroupsUpdateRequest, base_url, '/file-storage/drive-groups/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "drive_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.DriveGroupsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateDriveGroupResponse])
                res.update_drive_group_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    