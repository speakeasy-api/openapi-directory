"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'
    PUBLIC = 'public'

class PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum(str, Enum):
    MONTHLY = 'monthly'
    QUARTERLY = 'quarterly'
    HALF_YEARLY = 'half-yearly'
    ANNUAL = 'annual'
    NULL = 'null'

class PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum(str, Enum):
    MANDATORY = 'mandatory'
    OPTIONAL = 'optional'
    NULL = 'null'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBody:
    r"""Social Regime to modify (except name, class and archivaldate)"""
    
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('About'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Designation'), 'exclude': lambda f: f is None }})  
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('End'), 'exclude': lambda f: f is None }})  
    home: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Home'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    level: Optional[PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    periodicity: Optional[PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyPeriodicityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Periodicity'), 'exclude': lambda f: f is None }})  
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Start'), 'exclude': lambda f: f is None }})  
    type: Optional[PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBodyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDSocialRegimesRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    request_body: PatchSpacesSpaceIDFoldersIDSocialRegimesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Social Regime to modify (except name, class and archivaldate)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersIDSocialRegimesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    