/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetV2TasksJsonRequest extends SpeakeasyBase {
  /**
   * Filters tasks by the account to which they are associated.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=account_id",
  })
  accountId?: number[];

  /**
   * Filters tasks by their current state. Valid current_states include: ['scheduled', 'completed'].
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=current_state",
  })
  currentState?: string[];

  /**
   * Filters tasks by idempotency key.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=idempotency_key",
  })
  idempotencyKey?: string;

  /**
   * IDs of tasks to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=ids" })
  ids?: number[];

  /**
   * Whether to include total_pages and total_count in the metadata. Defaults to false
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_paging_counts",
  })
  includePagingCounts?: boolean;

  /**
   * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=limit_paging_counts",
  })
  limitPagingCounts?: boolean;

  /**
   * Filters tasks by locale of the person to which they are associated.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=locale",
  })
  locale?: string[];

  /**
   * The current page to fetch results from. Defaults to 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * How many records to show per page in the range [1, 100]. Defaults to 25
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Filters tasks by the person to which they are associated.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=person_id",
  })
  personId?: number[];

  /**
   * Key to sort on, must be one of: due_date, due_at. Defaults to due_date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: string;

  /**
   * Direction to sort in, must be one of: ASC, DESC. Defaults to ASC
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_direction",
  })
  sortDirection?: string;

  /**
   * Filters tasks by their task type. Valid task_types include: ['call', 'email', 'general'].
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=task_type",
  })
  taskType?: string[];

  /**
   * Filters tasks by time interval. Valid time_intervals include: ['overdue', 'today', 'tomorrow', 'this_week', 'next_week'].
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=time_interval_filter",
  })
  timeIntervalFilter?: string;

  /**
   * Filters tasks by the user to which they are assigned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=user_id",
  })
  userId?: number[];
}

export class GetV2TasksJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
