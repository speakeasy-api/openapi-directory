/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Card - Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account\u2019s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.
 */
public class Card {
    /**
     * The identifier for the account this card belongs to.
     */
    @JsonProperty("account_id")
    public String accountId;
    public Card withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The Card's billing address.
     */
    @JsonProperty("billing_address")
    public CardBillingAddress billingAddress;
    public Card withBillingAddress(CardBillingAddress billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Card withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The card's description for display purposes.
     */
    @JsonProperty("description")
    public String description;
    public Card withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
     */
    @JsonProperty("digital_wallet")
    public CardDigitalWallet digitalWallet;
    public Card withDigitalWallet(CardDigitalWallet digitalWallet) {
        this.digitalWallet = digitalWallet;
        return this;
    }
    
    /**
     * The month the card expires in M format (e.g., August is 8).
     */
    @JsonProperty("expiration_month")
    public Long expirationMonth;
    public Card withExpirationMonth(Long expirationMonth) {
        this.expirationMonth = expirationMonth;
        return this;
    }
    
    /**
     * The year the card expires in YYYY format (e.g., 2025).
     */
    @JsonProperty("expiration_year")
    public Long expirationYear;
    public Card withExpirationYear(Long expirationYear) {
        this.expirationYear = expirationYear;
        return this;
    }
    
    /**
     * The card identifier.
     */
    @JsonProperty("id")
    public String id;
    public Card withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The last 4 digits of the Card's Primary Account Number.
     */
    @JsonProperty("last4")
    public String last4;
    public Card withLast4(String last4) {
        this.last4 = last4;
        return this;
    }
    
    /**
     * This indicates if payments can be made with the card.
     */
    @JsonProperty("status")
    public CardStatusEnum status;
    public Card withStatus(CardStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `card`.
     */
    @JsonProperty("type")
    public CardTypeEnum type;
    public Card withType(CardTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
