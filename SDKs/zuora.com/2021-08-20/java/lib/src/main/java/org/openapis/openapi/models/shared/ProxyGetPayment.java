/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProxyGetPayment - Container for custom fields of a Payment object.
 * 
 */
public class ProxyGetPayment {
    /**
     * The unique account ID for the customer that the payment is for.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyGetPayment withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountingCode")
    public String accountingCode;
    public ProxyGetPayment withAccountingCode(String accountingCode) {
        this.accountingCode = accountingCode;
        return this;
    }
    
    /**
     * The amount of the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Amount")
    public Double amount;
    public ProxyGetPayment withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The applied amount of the payment.
     * 
     * **Note**: This field is only available if you have the Invoice Settlement feature enabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedAmount")
    public Double appliedAmount;
    public ProxyGetPayment withAppliedAmount(Double appliedAmount) {
        this.appliedAmount = appliedAmount;
        return this;
    }
    
    /**
     * If you have the Invoice Settlement feature disabled, the value of this field is the amount of the payment to apply to a credit balance.
     * 
     * If you have the Invoice Settlement feature enabled, the value of this field returned in the response is `0` for the payments that are created after the enablement.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedCreditBalanceAmount")
    public Double appliedCreditBalanceAmount;
    public ProxyGetPayment withAppliedCreditBalanceAmount(Double appliedCreditBalanceAmount) {
        this.appliedCreditBalanceAmount = appliedCreditBalanceAmount;
        return this;
    }
    
    /**
     * The authorization transaction ID from the payment gateway. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AuthTransactionId")
    public String authTransactionId;
    public ProxyGetPayment withAuthTransactionId(String authTransactionId) {
        this.authTransactionId = authTransactionId;
        return this;
    }
    
    /**
     * The first six digits of the credit card or debit card used for the payment, when applicable. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankIdentificationNumber")
    public String bankIdentificationNumber;
    public ProxyGetPayment withBankIdentificationNumber(String bankIdentificationNumber) {
        this.bankIdentificationNumber = bankIdentificationNumber;
        return this;
    }
    
    /**
     * The date and time when the payment was canceled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CancelledOn")
    public OffsetDateTime cancelledOn;
    public ProxyGetPayment withCancelledOn(OffsetDateTime cancelledOn) {
        this.cancelledOn = cancelledOn;
        return this;
    }
    
    /**
     * Additional information related to the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;
    public ProxyGetPayment withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetPayment withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the payment was created.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetPayment withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The date when the payment takes effect.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveDate")
    public LocalDate effectiveDate;
    public ProxyGetPayment withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * The name of the gateway instance that processes the payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Gateway")
    public String gateway;
    public ProxyGetPayment withGateway(String gateway) {
        this.gateway = gateway;
        return this;
    }
    
    /**
     * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayOrderId")
    public String gatewayOrderId;
    public ProxyGetPayment withGatewayOrderId(String gatewayOrderId) {
        this.gatewayOrderId = gatewayOrderId;
        return this;
    }
    
    /**
     * The message returned from the payment gateway for the payment. This message is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponse")
    public String gatewayResponse;
    public ProxyGetPayment withGatewayResponse(String gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
        return this;
    }
    
    /**
     * The code returned from the payment gateway for the payment. This code is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponseCode")
    public String gatewayResponseCode;
    public ProxyGetPayment withGatewayResponseCode(String gatewayResponseCode) {
        this.gatewayResponseCode = gatewayResponseCode;
        return this;
    }
    
    /**
     * The status of the payment in the gateway; use for reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayState")
    public ProxyGetPaymentGatewayStateEnum gatewayState;
    public ProxyGetPayment withGatewayState(ProxyGetPaymentGatewayStateEnum gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * The unique ID of a payment. For example, 2c92c095592623ea01596621ada84352.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetPayment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyGetPayment withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyGetPayment withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * The date and time when a payment was marked and waiting for batch submission to the payment process. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("MarkedForSubmissionOn")
    public OffsetDateTime markedForSubmissionOn;
    public ProxyGetPayment withMarkedForSubmissionOn(OffsetDateTime markedForSubmissionOn) {
        this.markedForSubmissionOn = markedForSubmissionOn;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public ProxyGetPayment withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     * The ID of the payment method used for the payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodId")
    public String paymentMethodId;
    public ProxyGetPayment withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodSnapshotId")
    public String paymentMethodSnapshotId;
    public ProxyGetPayment withPaymentMethodSnapshotId(String paymentMethodSnapshotId) {
        this.paymentMethodSnapshotId = paymentMethodSnapshotId;
        return this;
    }
    
    /**
     * The unique identification number of the payment. For example, P-00000028.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentNumber")
    public String paymentNumber;
    public ProxyGetPayment withPaymentNumber(String paymentNumber) {
        this.paymentNumber = paymentNumber;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferenceId")
    public String referenceId;
    public ProxyGetPayment withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * The amount of the payment that is refunded. The value of this field is `0` if no refund is made against the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RefundAmount")
    public Double refundAmount;
    public ProxyGetPayment withRefundAmount(Double refundAmount) {
        this.refundAmount = refundAmount;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondPaymentReferenceId")
    public String secondPaymentReferenceId;
    public ProxyGetPayment withSecondPaymentReferenceId(String secondPaymentReferenceId) {
        this.secondPaymentReferenceId = secondPaymentReferenceId;
        return this;
    }
    
    /**
     * The date and time when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("SettledOn")
    public OffsetDateTime settledOn;
    public ProxyGetPayment withSettledOn(OffsetDateTime settledOn) {
        this.settledOn = settledOn;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptor")
    public String softDescriptor;
    public ProxyGetPayment withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptorPhone")
    public String softDescriptorPhone;
    public ProxyGetPayment withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * How the payment was created, whether through the API, manually, import, or payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Source")
    public ProxyGetPaymentSourceEnum source;
    public ProxyGetPayment withSource(ProxyGetPaymentSourceEnum source) {
        this.source = source;
        return this;
    }
    
    /**
     * The name of the source. The value is a Payment Run number or a file name.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceName")
    public String sourceName;
    public ProxyGetPayment withSourceName(String sourceName) {
        this.sourceName = sourceName;
        return this;
    }
    
    /**
     * The status of the payment in Zuora. The value depends on the type of payments.
     * 
     * - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
     * - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public ProxyGetPaymentStatusEnum status;
    public ProxyGetPayment withStatus(ProxyGetPaymentStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The date and time when the payment was submitted.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("SubmittedOn")
    public OffsetDateTime submittedOn;
    public ProxyGetPayment withSubmittedOn(OffsetDateTime submittedOn) {
        this.submittedOn = submittedOn;
        return this;
    }
    
    /**
     * Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyGetPayment withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Transaction__NS")
    public String transactionNS;
    public ProxyGetPayment withTransactionNS(String transactionNS) {
        this.transactionNS = transactionNS;
        return this;
    }
    
    /**
     * Indicates if the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransferredToAccounting")
    public ProxyGetPaymentTransferredToAccountingEnum transferredToAccounting;
    public ProxyGetPayment withTransferredToAccounting(ProxyGetPaymentTransferredToAccountingEnum transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
    /**
     * The type of the payment, whether the payment is external or electronic.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public ProxyGetPaymentTypeEnum type;
    public ProxyGetPayment withType(ProxyGetPaymentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The unapplied amount of the payment.
     * 
     * **Note**: This field is only available if you have the Invoice Settlement feature enabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UnappliedAmount")
    public Double unappliedAmount;
    public ProxyGetPayment withUnappliedAmount(Double unappliedAmount) {
        this.unappliedAmount = unappliedAmount;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetPayment withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the payment was last updated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetPayment withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
