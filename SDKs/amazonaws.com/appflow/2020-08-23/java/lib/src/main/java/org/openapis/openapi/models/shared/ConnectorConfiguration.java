/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ConnectorConfiguration -  The configuration settings related to a given connector. 
 */
public class ConnectorConfiguration {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authenticationConfig")
    public AuthenticationConfig authenticationConfig;
    public ConnectorConfiguration withAuthenticationConfig(AuthenticationConfig authenticationConfig) {
        this.authenticationConfig = authenticationConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canUseAsDestination")
    public Boolean canUseAsDestination;
    public ConnectorConfiguration withCanUseAsDestination(Boolean canUseAsDestination) {
        this.canUseAsDestination = canUseAsDestination;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canUseAsSource")
    public Boolean canUseAsSource;
    public ConnectorConfiguration withCanUseAsSource(Boolean canUseAsSource) {
        this.canUseAsSource = canUseAsSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorArn")
    public String connectorArn;
    public ConnectorConfiguration withConnectorArn(String connectorArn) {
        this.connectorArn = connectorArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorDescription")
    public String connectorDescription;
    public ConnectorConfiguration withConnectorDescription(String connectorDescription) {
        this.connectorDescription = connectorDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorLabel")
    public String connectorLabel;
    public ConnectorConfiguration withConnectorLabel(String connectorLabel) {
        this.connectorLabel = connectorLabel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorMetadata")
    public ConnectorMetadata connectorMetadata;
    public ConnectorConfiguration withConnectorMetadata(ConnectorMetadata connectorMetadata) {
        this.connectorMetadata = connectorMetadata;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorModes")
    public String[] connectorModes;
    public ConnectorConfiguration withConnectorModes(String[] connectorModes) {
        this.connectorModes = connectorModes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorName")
    public String connectorName;
    public ConnectorConfiguration withConnectorName(String connectorName) {
        this.connectorName = connectorName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorOwner")
    public String connectorOwner;
    public ConnectorConfiguration withConnectorOwner(String connectorOwner) {
        this.connectorOwner = connectorOwner;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorProvisioningConfig")
    public ConnectorProvisioningConfig connectorProvisioningConfig;
    public ConnectorConfiguration withConnectorProvisioningConfig(ConnectorProvisioningConfig connectorProvisioningConfig) {
        this.connectorProvisioningConfig = connectorProvisioningConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorProvisioningType")
    public ConnectorProvisioningTypeEnum connectorProvisioningType;
    public ConnectorConfiguration withConnectorProvisioningType(ConnectorProvisioningTypeEnum connectorProvisioningType) {
        this.connectorProvisioningType = connectorProvisioningType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorRuntimeSettings")
    public ConnectorRuntimeSetting[] connectorRuntimeSettings;
    public ConnectorConfiguration withConnectorRuntimeSettings(ConnectorRuntimeSetting[] connectorRuntimeSettings) {
        this.connectorRuntimeSettings = connectorRuntimeSettings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorType")
    public ConnectorTypeEnum connectorType;
    public ConnectorConfiguration withConnectorType(ConnectorTypeEnum connectorType) {
        this.connectorType = connectorType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorVersion")
    public String connectorVersion;
    public ConnectorConfiguration withConnectorVersion(String connectorVersion) {
        this.connectorVersion = connectorVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPrivateLinkEnabled")
    public Boolean isPrivateLinkEnabled;
    public ConnectorConfiguration withIsPrivateLinkEnabled(Boolean isPrivateLinkEnabled) {
        this.isPrivateLinkEnabled = isPrivateLinkEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPrivateLinkEndpointUrlRequired")
    public Boolean isPrivateLinkEndpointUrlRequired;
    public ConnectorConfiguration withIsPrivateLinkEndpointUrlRequired(Boolean isPrivateLinkEndpointUrlRequired) {
        this.isPrivateLinkEndpointUrlRequired = isPrivateLinkEndpointUrlRequired;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoURL")
    public String logoURL;
    public ConnectorConfiguration withLogoURL(String logoURL) {
        this.logoURL = logoURL;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("registeredAt")
    public OffsetDateTime registeredAt;
    public ConnectorConfiguration withRegisteredAt(OffsetDateTime registeredAt) {
        this.registeredAt = registeredAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registeredBy")
    public String registeredBy;
    public ConnectorConfiguration withRegisteredBy(String registeredBy) {
        this.registeredBy = registeredBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedApiVersions")
    public String[] supportedApiVersions;
    public ConnectorConfiguration withSupportedApiVersions(String[] supportedApiVersions) {
        this.supportedApiVersions = supportedApiVersions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedDestinationConnectors")
    public ConnectorTypeEnum[] supportedDestinationConnectors;
    public ConnectorConfiguration withSupportedDestinationConnectors(ConnectorTypeEnum[] supportedDestinationConnectors) {
        this.supportedDestinationConnectors = supportedDestinationConnectors;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedOperators")
    public OperatorsEnum[] supportedOperators;
    public ConnectorConfiguration withSupportedOperators(OperatorsEnum[] supportedOperators) {
        this.supportedOperators = supportedOperators;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedSchedulingFrequencies")
    public ScheduleFrequencyTypeEnum[] supportedSchedulingFrequencies;
    public ConnectorConfiguration withSupportedSchedulingFrequencies(ScheduleFrequencyTypeEnum[] supportedSchedulingFrequencies) {
        this.supportedSchedulingFrequencies = supportedSchedulingFrequencies;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedTriggerTypes")
    public TriggerTypeEnum[] supportedTriggerTypes;
    public ConnectorConfiguration withSupportedTriggerTypes(TriggerTypeEnum[] supportedTriggerTypes) {
        this.supportedTriggerTypes = supportedTriggerTypes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportedWriteOperations")
    public WriteOperationTypeEnum[] supportedWriteOperations;
    public ConnectorConfiguration withSupportedWriteOperations(WriteOperationTypeEnum[] supportedWriteOperations) {
        this.supportedWriteOperations = supportedWriteOperations;
        return this;
    }
    
}
