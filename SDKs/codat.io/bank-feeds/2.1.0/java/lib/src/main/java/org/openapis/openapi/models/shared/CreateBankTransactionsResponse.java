/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateBankTransactionsResponse - Success
 */
public class CreateBankTransactionsResponse {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changes")
    public PushOperationChange[] changes;

    public CreateBankTransactionsResponse withChanges(PushOperationChange[] changes) {
        this.changes = changes;
        return this;
    }
    
    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonProperty("companyId")
    public String companyId;

    public CreateBankTransactionsResponse withCompanyId(String companyId) {
        this.companyId = companyId;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedOnUtc")
    public String completedOnUtc;

    public CreateBankTransactionsResponse withCompletedOnUtc(String completedOnUtc) {
        this.completedOnUtc = completedOnUtc;
        return this;
    }
    
    /**
     * &gt; **Accessing Bank Accounts through Banking API**
     * &gt; 
     * &gt; This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators. 
     * &gt;
     * &gt; To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
     * 
     * &gt; View the coverage for bank transactions in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=bankTransactions" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
     * 
     * ## Overview
     * 
     * Transactional banking data for a specific company and account.
     * 
     * Bank transactions include the:
     * * Amount of the transaction.
     * * Current account balance.
     * * Transaction type, for example, credit, debit, or transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public BankTransactions data;

    public CreateBankTransactionsResponse withData(BankTransactions data) {
        this.data = data;
        return this;
    }
    
    /**
     * Unique identifier for a company's data connection.
     */
    @JsonProperty("dataConnectionKey")
    public String dataConnectionKey;

    public CreateBankTransactionsResponse withDataConnectionKey(String dataConnectionKey) {
        this.dataConnectionKey = dataConnectionKey;
        return this;
    }
    
    /**
     * Available Data types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    public DataTypeEnum dataType;

    public CreateBankTransactionsResponse withDataType(DataTypeEnum dataType) {
        this.dataType = dataType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public String errorMessage;

    public CreateBankTransactionsResponse withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    @JsonProperty("pushOperationKey")
    public String pushOperationKey;

    public CreateBankTransactionsResponse withPushOperationKey(String pushOperationKey) {
        this.pushOperationKey = pushOperationKey;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonProperty("requestedOnUtc")
    public String requestedOnUtc;

    public CreateBankTransactionsResponse withRequestedOnUtc(String requestedOnUtc) {
        this.requestedOnUtc = requestedOnUtc;
        return this;
    }
    
    /**
     * The status of the push operation.
     */
    @JsonProperty("status")
    public PushOperationStatusEnum status;

    public CreateBankTransactionsResponse withStatus(PushOperationStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonProperty("statusCode")
    public Long statusCode;

    public CreateBankTransactionsResponse withStatusCode(Long statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutInMinutes")
    public Integer timeoutInMinutes;

    public CreateBankTransactionsResponse withTimeoutInMinutes(Integer timeoutInMinutes) {
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutInSeconds")
    public Integer timeoutInSeconds;

    public CreateBankTransactionsResponse withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }
    
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation")
    public Validation validation;

    public CreateBankTransactionsResponse withValidation(Validation validation) {
        this.validation = validation;
        return this;
    }
    
    public CreateBankTransactionsResponse(@JsonProperty("companyId") String companyId, @JsonProperty("dataConnectionKey") String dataConnectionKey, @JsonProperty("pushOperationKey") String pushOperationKey, @JsonProperty("requestedOnUtc") String requestedOnUtc, @JsonProperty("status") PushOperationStatusEnum status, @JsonProperty("statusCode") Long statusCode) {
        this.companyId = companyId;
        this.dataConnectionKey = dataConnectionKey;
        this.pushOperationKey = pushOperationKey;
        this.requestedOnUtc = requestedOnUtc;
        this.status = status;
        this.statusCode = statusCode;
  }
}
