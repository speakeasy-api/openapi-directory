// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RegisterEmailResponseProviderEnum - Enum identifer of provider type.
type RegisterEmailResponseProviderEnum string

const (
	RegisterEmailResponseProviderEnumEmail RegisterEmailResponseProviderEnum = "email"
)

func (e *RegisterEmailResponseProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "email":
		*e = RegisterEmailResponseProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterEmailResponseProviderEnum: %s", s)
	}
}

// RegisterEmailResponse - OK
type RegisterEmailResponse struct {
	// An array of ApplicationID strings attached to the value provided.
	ApplicationIds []string `json:"application_ids,omitempty"`
	// An optional name to be attached to this binding
	Name *string `json:"name,omitempty"`
	// Enum identifer of provider type.
	Provider *RegisterEmailResponseProviderEnum `json:"provider,omitempty"`
	// Value given to the provider to attach to the Application IDs.
	Value *string `json:"value,omitempty"`
}
