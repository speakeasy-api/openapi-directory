// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// IndividualGenderEnum - The individual's gender.
type IndividualGenderEnum string

const (
	IndividualGenderEnumFemale        IndividualGenderEnum = "Female"
	IndividualGenderEnumMale          IndividualGenderEnum = "Male"
	IndividualGenderEnumNotApplicable IndividualGenderEnum = "Not Applicable"
	IndividualGenderEnumNotKnown      IndividualGenderEnum = "Not Known"
)

func (e IndividualGenderEnum) ToPointer() *IndividualGenderEnum {
	return &e
}

func (e *IndividualGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Female":
		fallthrough
	case "Male":
		fallthrough
	case "Not Applicable":
		fallthrough
	case "Not Known":
		*e = IndividualGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndividualGenderEnum: %v", v)
	}
}

// IndividualInput - The Individual resource.
type IndividualInput struct {
	Addresses []IndividualAddressInput `json:"addresses,omitempty"`
	// The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	DateOfBirth         types.Date               `json:"dateOfBirth"`
	ElectronicAddresses []ElectronicAddressInput `json:"electronicAddresses,omitempty"`
	// The individual's gender.
	Gender *IndividualGenderEnum `json:"gender,omitempty"`
	Names  []IndividualNameInput `json:"names,omitempty"`
	// The individual's place of birth, for example, `Tamworth`.
	PlaceOfBirth string `json:"placeOfBirth"`
}

// Individual - The Individual resource.
type Individual struct {
	Addresses []IndividualAddress `json:"addresses,omitempty"`
	// The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	DateOfBirth         types.Date          `json:"dateOfBirth"`
	ElectronicAddresses []ElectronicAddress `json:"electronicAddresses,omitempty"`
	// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	FromDate *time.Time `json:"fromDate,omitempty"`
	// The individual's gender.
	Gender *IndividualGenderEnum `json:"gender,omitempty"`
	// The party's unique identifier.
	ID    *string          `json:"id,omitempty"`
	Names []IndividualName `json:"names,omitempty"`
	// The individual's place of birth, for example, `Tamworth`.
	PlaceOfBirth string `json:"placeOfBirth"`
	// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	ToDate *time.Time `json:"toDate,omitempty"`
}
