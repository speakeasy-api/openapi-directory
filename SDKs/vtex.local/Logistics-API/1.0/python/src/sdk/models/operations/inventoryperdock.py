"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class InventoryperdockRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    dock_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'dockId', 'style': 'simple', 'explode': False }})  
    sku_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'skuId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Inventoryperdock200ApplicationJSON:
    
    available_quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableQuantity'), 'exclude': lambda f: f is None }})
    r"""Amount of items available for sale. Difference between total quantity and reserved quantity."""  
    date_of_supply_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfSupplyUtc'), 'exclude': lambda f: f is None }})
    r"""Date of supply lot in UTC."""  
    delivery_channel: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannel'), 'exclude': lambda f: f is None }})
    r"""List of delivery channels available."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Dock ID."""  
    is_unlimited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUnlimited'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the SKU's availability is unlimited (\\"infinite inventory\\")."""  
    keep_selling_after_expiration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepSellingAfterExpiration'), 'exclude': lambda f: f is None }})
    r"""Indicates whether SKU can continue to be sold after the available quantity gets to 0."""  
    reserved_quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservedQuantity'), 'exclude': lambda f: f is None }})
    r"""Reserved quantity of the SKU."""  
    sales_channel: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel'), 'exclude': lambda f: f is None }})
    r"""List of sales channels associated."""  
    sku_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuId'), 'exclude': lambda f: f is None }})
    r"""SKU ID."""  
    time_to_refill: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToRefill'), 'exclude': lambda f: f is None }})
    r"""Time to refill (deprecated)."""  
    total_quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalQuantity'), 'exclude': lambda f: f is None }})
    r"""Total quantity of SKU."""  
    transfer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfer'), 'exclude': lambda f: f is None }})
    r"""Transfer."""  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouseId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    

@dataclasses.dataclass
class InventoryperdockResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    inventoryperdock_200_application_json_objects: Optional[list[Inventoryperdock200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    