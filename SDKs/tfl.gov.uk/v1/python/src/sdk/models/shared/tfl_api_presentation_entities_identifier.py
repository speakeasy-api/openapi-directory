"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_crowding as shared_tfl_api_presentation_entities_crowding
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TflAPIPresentationEntitiesIdentifierRouteTypeEnum(str, Enum):
    UNKNOWN = 'Unknown'
    ALL = 'All'
    CYCLE_SUPERHIGHWAYS = 'Cycle Superhighways'
    QUIETWAYS = 'Quietways'
    CYCLEWAYS = 'Cycleways'
    MINI_HOLLANDS = 'Mini-Hollands'
    CENTRAL_LONDON_GRID = 'Central London Grid'
    STREETSPACE_ROUTE = 'Streetspace Route'

class TflAPIPresentationEntitiesIdentifierStatusEnum(str, Enum):
    UNKNOWN = 'Unknown'
    ALL = 'All'
    OPEN = 'Open'
    IN_PROGRESS = 'In Progress'
    PLANNED = 'Planned'
    PLANNED_SUBJECT_TO_FEASIBILITY_AND_CONSULTATION_ = 'Planned - Subject to feasibility and consultation.'
    NOT_OPEN = 'Not Open'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesIdentifier:
    
    crowding: Optional[shared_tfl_api_presentation_entities_crowding.TflAPIPresentationEntitiesCrowding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crowding'), 'exclude': lambda f: f is None }})  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    mot_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motType'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})  
    route_type: Optional[TflAPIPresentationEntitiesIdentifierRouteTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeType'), 'exclude': lambda f: f is None }})  
    status: Optional[TflAPIPresentationEntitiesIdentifierStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})  
    