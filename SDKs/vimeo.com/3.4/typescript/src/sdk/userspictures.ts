/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class UsersPictures {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a user picture
   */
  createPicture(
    req: operations.CreatePictureRequest,
    security: operations.CreatePictureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePictureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePictureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/pictures",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreatePictureSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePictureResponse =
        new operations.CreatePictureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a user picture
   */
  createPictureAlt1(
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePictureAlt1Response> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/pictures";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePictureAlt1Response =
        new operations.CreatePictureAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a user picture
   */
  deletePicture(
    req: operations.DeletePictureRequest,
    security: operations.DeletePictureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePictureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePictureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/pictures/{portraitset_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeletePictureSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePictureResponse =
        new operations.DeletePictureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a user picture
   */
  deletePictureAlt1(
    req: operations.DeletePictureAlt1Request,
    security: operations.DeletePictureAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePictureAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePictureAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/pictures/{portraitset_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeletePictureAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePictureAlt1Response =
        new operations.DeletePictureAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Edit a user picture
   */
  editPicture(
    req: operations.EditPictureRequest,
    security: operations.EditPictureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EditPictureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditPictureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/pictures/{portraitset_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditPictureSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditPictureResponse =
        new operations.EditPictureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit a user picture
   */
  editPictureAlt1(
    req: operations.EditPictureAlt1Request,
    security: operations.EditPictureAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.EditPictureAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditPictureAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/pictures/{portraitset_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditPictureAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditPictureAlt1Response =
        new operations.EditPictureAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific user picture
   */
  getPicture(
    req: operations.GetPictureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPictureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPictureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/pictures/{portraitset_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPictureResponse =
        new operations.GetPictureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific user picture
   */
  getPictureAlt1(
    req: operations.GetPictureAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPictureAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPictureAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/pictures/{portraitset_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPictureAlt1Response =
        new operations.GetPictureAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.picture = utils.objectToClass(httpRes?.data, shared.Picture);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the pictures that belong to a user
   */
  getPictures(
    req: operations.GetPicturesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPicturesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPicturesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/pictures",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPicturesResponse =
        new operations.GetPicturesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.pictures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.pictures = utils.objectToClass(
              httpRes?.data,
              shared.Picture,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the pictures that belong to a user
   */
  getPicturesAlt1(
    req: operations.GetPicturesAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPicturesAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPicturesAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/pictures";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPicturesAlt1Response =
        new operations.GetPicturesAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.picture+json`
            )
          ) {
            res.pictures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.pictures = utils.objectToClass(
              httpRes?.data,
              shared.Picture,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
