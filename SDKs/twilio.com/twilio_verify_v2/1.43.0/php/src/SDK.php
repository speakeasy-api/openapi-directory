<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_ACCESS_TOKEN_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_BUCKET_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_CHALLENGE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_ENTITY_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_MESSAGING_CONFIGURATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_NEW_FACTOR_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_NOTIFICATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_RATE_LIMIT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_SAFELIST_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_VERIFICATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_VERIFICATION_CHECK_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const CREATE_WEBHOOK_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_BUCKET_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_ENTITY_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_FACTOR_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_MESSAGING_CONFIGURATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_RATE_LIMIT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_SAFELIST_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const DELETE_WEBHOOK_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_ACCESS_TOKEN_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_BUCKET_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_CHALLENGE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_ENTITY_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_FACTOR_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_FORM_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_MESSAGING_CONFIGURATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_RATE_LIMIT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_SAFELIST_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_VERIFICATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_VERIFICATION_ATTEMPT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_VERIFICATION_ATTEMPTS_SUMMARY_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const FETCH_WEBHOOK_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_BUCKET_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_CHALLENGE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_ENTITY_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_FACTOR_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_MESSAGING_CONFIGURATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_RATE_LIMIT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_VERIFICATION_ATTEMPT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_VERIFICATION_TEMPLATE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const LIST_WEBHOOK_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_BUCKET_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_CHALLENGE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_FACTOR_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_MESSAGING_CONFIGURATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_RATE_LIMIT_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_VERIFICATION_SERVERS = [
		'https://verify.twilio.com',
	];
	
	public const UPDATE_WEBHOOK_SERVERS = [
		'https://verify.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new enrollment Access Token for the Entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenResponse
     */
	public function createAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenResponse
    {
        $baseUrl = SDK::CREATE_ACCESS_TOKEN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/AccessTokens', \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceAccessToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceAccessToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Bucket for a Rate Limit
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBucketSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBucketResponse
     */
	public function createBucket(
        \OpenAPI\OpenAPI\Models\Operations\CreateBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBucketSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBucketResponse
    {
        $baseUrl = SDK::CREATE_BUCKET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets', \OpenAPI\OpenAPI\Models\Operations\CreateBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimitBucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimitBucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Challenge for the Factor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChallengeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChallengeResponse
     */
	public function createChallenge(
        \OpenAPI\OpenAPI\Models\Operations\CreateChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateChallengeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChallengeResponse
    {
        $baseUrl = SDK::CREATE_CHALLENGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges', \OpenAPI\OpenAPI\Models\Operations\CreateChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityChallenge = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityChallenge', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Entity for the Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEntityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEntitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEntityResponse
     */
	public function createEntity(
        \OpenAPI\OpenAPI\Models\Operations\CreateEntityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEntitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEntityResponse
    {
        $baseUrl = SDK::CREATE_ENTITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities', \OpenAPI\OpenAPI\Models\Operations\CreateEntityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new MessagingConfiguration for a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationResponse
     */
	public function createMessagingConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationResponse
    {
        $baseUrl = SDK::CREATE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/MessagingConfigurations', \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMessagingConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceMessagingConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceMessagingConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Factor for the Entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorResponse
     */
	public function createNewFactor(
        \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorResponse
    {
        $baseUrl = SDK::CREATE_NEW_FACTOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors', \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNewFactorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityNewFactor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityNewFactor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Notification for the corresponding Challenge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse
     */
	public function createNotification(
        \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNotificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse
    {
        $baseUrl = SDK::CREATE_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications', \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityChallengeNotification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityChallengeNotification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Rate Limit for a Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitResponse
     */
	public function createRateLimit(
        \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitResponse
    {
        $baseUrl = SDK::CREATE_RATE_LIMIT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits', \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRateLimitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new phone number to SafeList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSafelistCreateSafelistRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSafelistSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSafelistResponse
     */
	public function createSafelist(
        \OpenAPI\OpenAPI\Models\Operations\CreateSafelistCreateSafelistRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSafelistSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSafelistResponse
    {
        $baseUrl = SDK::CREATE_SAFELIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/SafeList/Numbers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSafelistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Safelist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Safelist', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Verification Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Verification using a Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVerificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVerificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVerificationResponse
     */
	public function createVerification(
        \OpenAPI\OpenAPI\Models\Operations\CreateVerificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVerificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVerificationResponse
    {
        $baseUrl = SDK::CREATE_VERIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Verifications', \OpenAPI\OpenAPI\Models\Operations\CreateVerificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVerificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceVerification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceVerification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * challenge a specific Verification Check.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckResponse
     */
	public function createVerificationCheck(
        \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckResponse
    {
        $baseUrl = SDK::CREATE_VERIFICATION_CHECK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/VerificationCheck', \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVerificationCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceVerificationCheck = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceVerificationCheck', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Webhook for the Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
     */
	public function createWebhook(
        \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse
    {
        $baseUrl = SDK::CREATE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\CreateWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific Bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBucketSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBucketResponse
     */
	public function deleteBucket(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBucketSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBucketResponse
    {
        $baseUrl = SDK::DELETE_BUCKET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEntityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEntitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEntityResponse
     */
	public function deleteEntity(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEntityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEntitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEntityResponse
    {
        $baseUrl = SDK::DELETE_ENTITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteEntityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Factor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFactorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFactorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFactorResponse
     */
	public function deleteFactor(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFactorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFactorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFactorResponse
    {
        $baseUrl = SDK::DELETE_FACTOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFactorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFactorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific MessagingConfiguration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationResponse
     */
	public function deleteMessagingConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationResponse
    {
        $baseUrl = SDK::DELETE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMessagingConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Rate Limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitResponse
     */
	public function deleteRateLimit(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitResponse
    {
        $baseUrl = SDK::DELETE_RATE_LIMIT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRateLimitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a phone number from SafeList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistResponse
     */
	public function deleteSafelist(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistResponse
    {
        $baseUrl = SDK::DELETE_SAFELIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/SafeList/Numbers/{PhoneNumber}', \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSafelistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Verification Service Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Webhook.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
     */
	public function deleteWebhook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse
    {
        $baseUrl = SDK::DELETE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch an Access Token for the Entity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenResponse
     */
	public function fetchAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenResponse
    {
        $baseUrl = SDK::FETCH_ACCESS_TOKEN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/AccessTokens/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceAccessToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceAccessToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBucketSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBucketResponse
     */
	public function fetchBucket(
        \OpenAPI\OpenAPI\Models\Operations\FetchBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBucketSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBucketResponse
    {
        $baseUrl = SDK::FETCH_BUCKET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimitBucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimitBucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Challenge.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChallengeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchChallengeResponse
     */
	public function fetchChallenge(
        \OpenAPI\OpenAPI\Models\Operations\FetchChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchChallengeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchChallengeResponse
    {
        $baseUrl = SDK::FETCH_CHALLENGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityChallenge = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityChallenge', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEntityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEntitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEntityResponse
     */
	public function fetchEntity(
        \OpenAPI\OpenAPI\Models\Operations\FetchEntityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEntitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEntityResponse
    {
        $baseUrl = SDK::FETCH_ENTITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchEntityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Factor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFactorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFactorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFactorResponse
     */
	public function fetchFactor(
        \OpenAPI\OpenAPI\Models\Operations\FetchFactorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFactorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFactorResponse
    {
        $baseUrl = SDK::FETCH_FACTOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFactorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFactorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityFactor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityFactor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the forms for a specific Form Type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFormRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFormSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFormResponse
     */
	public function fetchForm(
        \OpenAPI\OpenAPI\Models\Operations\FetchFormRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFormSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFormResponse
    {
        $baseUrl = SDK::FETCH_FORM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Forms/{FormType}', \OpenAPI\OpenAPI\Models\Operations\FetchFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Form = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Form', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific MessagingConfiguration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationResponse
     */
	public function fetchMessagingConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationResponse
    {
        $baseUrl = SDK::FETCH_MESSAGING_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMessagingConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceMessagingConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceMessagingConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Rate Limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitResponse
     */
	public function fetchRateLimit(
        \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitResponse
    {
        $baseUrl = SDK::FETCH_RATE_LIMIT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRateLimitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a phone number exists in SafeList.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSafelistRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSafelistSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSafelistResponse
     */
	public function fetchSafelist(
        \OpenAPI\OpenAPI\Models\Operations\FetchSafelistRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSafelistSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSafelistResponse
    {
        $baseUrl = SDK::FETCH_SAFELIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/SafeList/Numbers/{PhoneNumber}', \OpenAPI\OpenAPI\Models\Operations\FetchSafelistRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSafelistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Safelist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Safelist', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Verification Service Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Verification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVerificationResponse
     */
	public function fetchVerification(
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVerificationResponse
    {
        $baseUrl = SDK::FETCH_VERIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Verifications/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchVerificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVerificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceVerification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceVerification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific verification attempt.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptResponse
     */
	public function fetchVerificationAttempt(
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptResponse
    {
        $baseUrl = SDK::FETCH_VERIFICATION_ATTEMPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Attempts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2VerificationAttempt = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2VerificationAttempt', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a summary of how many attempts were made and how many were converted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryResponse
     */
	public function fetchVerificationAttemptsSummary(
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryResponse
    {
        $baseUrl = SDK::FETCH_VERIFICATION_ATTEMPTS_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Attempts/Summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVerificationAttemptsSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2VerificationAttemptsSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2VerificationAttemptsSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Webhook.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse
     */
	public function fetchWebhook(
        \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse
    {
        $baseUrl = SDK::FETCH_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceWebhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Buckets for a Rate Limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBucketSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBucketResponse
     */
	public function listBucket(
        \OpenAPI\OpenAPI\Models\Operations\ListBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBucketSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBucketResponse
    {
        $baseUrl = SDK::LIST_BUCKET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets', \OpenAPI\OpenAPI\Models\Operations\ListBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBucketRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBucketResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBucketListBucketResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Challenges for a Factor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChallengeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListChallengeResponse
     */
	public function listChallenge(
        \OpenAPI\OpenAPI\Models\Operations\ListChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListChallengeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListChallengeResponse
    {
        $baseUrl = SDK::LIST_CHALLENGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges', \OpenAPI\OpenAPI\Models\Operations\ListChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListChallengeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChallengeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListChallengeListChallengeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Entities for a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEntityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEntitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEntityResponse
     */
	public function listEntity(
        \OpenAPI\OpenAPI\Models\Operations\ListEntityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEntitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEntityResponse
    {
        $baseUrl = SDK::LIST_ENTITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities', \OpenAPI\OpenAPI\Models\Operations\ListEntityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEntityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEntityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEntityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEntityListEntityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Factors for an Entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFactorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFactorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFactorResponse
     */
	public function listFactor(
        \OpenAPI\OpenAPI\Models\Operations\ListFactorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFactorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFactorResponse
    {
        $baseUrl = SDK::LIST_FACTOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors', \OpenAPI\OpenAPI\Models\Operations\ListFactorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFactorRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFactorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFactorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFactorListFactorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Messaging Configurations for a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationResponse
     */
	public function listMessagingConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationResponse
    {
        $baseUrl = SDK::LIST_MESSAGING_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/MessagingConfigurations', \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessagingConfigurationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMessagingConfigurationListMessagingConfigurationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Rate Limits for a service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRateLimitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRateLimitSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRateLimitResponse
     */
	public function listRateLimit(
        \OpenAPI\OpenAPI\Models\Operations\ListRateLimitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRateLimitSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRateLimitResponse
    {
        $baseUrl = SDK::LIST_RATE_LIMIT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits', \OpenAPI\OpenAPI\Models\Operations\ListRateLimitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRateLimitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRateLimitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRateLimitResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRateLimitListRateLimitResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Verification Services for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the verification attempts for a given Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptResponse
     */
	public function listVerificationAttempt(
        \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptResponse
    {
        $baseUrl = SDK::LIST_VERIFICATION_ATTEMPT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Attempts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVerificationAttemptResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVerificationAttemptListVerificationAttemptResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the available templates for a given Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateResponse
     */
	public function listVerificationTemplate(
        \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateResponse
    {
        $baseUrl = SDK::LIST_VERIFICATION_TEMPLATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVerificationTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVerificationTemplateListVerificationTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Webhooks for a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse
     */
	public function listWebhook(
        \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse
    {
        $baseUrl = SDK::LIST_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Webhooks', \OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWebhookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWebhookListWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBucketRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBucketSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBucketResponse
     */
	public function updateBucket(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBucketRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBucketSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBucketResponse
    {
        $baseUrl = SDK::UPDATE_BUCKET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateBucketRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBucketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimitBucket = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimitBucket', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verify a specific Challenge.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeResponse
     */
	public function updateChallenge(
        \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeResponse
    {
        $baseUrl = SDK::UPDATE_CHALLENGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityChallenge = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityChallenge', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Factor. This endpoint can be used to Verify a Factor if passed an `AuthPayload` param.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFactorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFactorSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFactorResponse
     */
	public function updateFactor(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFactorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFactorSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFactorResponse
    {
        $baseUrl = SDK::UPDATE_FACTOR_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateFactorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFactorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceEntityFactor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceEntityFactor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific MessagingConfiguration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationResponse
     */
	public function updateMessagingConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationResponse
    {
        $baseUrl = SDK::UPDATE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMessagingConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceMessagingConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceMessagingConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Rate Limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitResponse
     */
	public function updateRateLimit(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitResponse
    {
        $baseUrl = SDK::UPDATE_RATE_LIMIT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/RateLimits/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRateLimitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceRateLimit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceRateLimit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Verification Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Verification status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationResponse
     */
	public function updateVerification(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationResponse
    {
        $baseUrl = SDK::UPDATE_VERIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Verifications/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVerificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceVerification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceVerification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWebhook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
     */
	public function updateWebhook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse
    {
        $baseUrl = SDK::UPDATE_WEBHOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Services/{ServiceSid}/Webhooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyV2ServiceWebhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyV2ServiceWebhook', 'json');
            }
        }

        return $response;
    }
}