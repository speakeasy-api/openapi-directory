"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import interregionegress as shared_interregionegress
from ..shared import intraregionegress as shared_intraregionegress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VMToVMEgressWorkload:
    r"""Specify VM to VM egress."""
    
    inter_region_egress: Optional[shared_interregionegress.InterRegionEgress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interRegionEgress'), 'exclude': lambda f: f is None }})
    r"""Egress traffic between two regions."""  
    intra_region_egress: Optional[shared_intraregionegress.IntraRegionEgress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intraRegionEgress'), 'exclude': lambda f: f is None }})
    r"""Egress traffic within the same region. When source region and destination region are in the same zone, using the internal IP addresses, there isn't any egress charge."""  
    