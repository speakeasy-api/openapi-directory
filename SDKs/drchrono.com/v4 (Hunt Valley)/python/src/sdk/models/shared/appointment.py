"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentClaimBillingNotes:
    r"""Structure of a billing note"""
    
    appointment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointment'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the billing note"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Content of the note"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentClinicalNote:
    r"""Associated clinical note object"""
    
    locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked'), 'exclude': lambda f: f is None }})  
    pdf: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentCustomAppointmentFieldValue:
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    field_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_type'), 'exclude': lambda f: f is None }})  
    field_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_value'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentCustomVitalValue:
    
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    vital_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vital_type'), 'exclude': lambda f: f is None }})  
    
class AppointmentIns1StatusEnum(str, Enum):
    r"""Billing status of primary insurer"""
    UNKNOWN = ''
    INCOMPLETE_INFORMATION = 'Incomplete Information'
    IN_PROCESS_EMDEON = 'In Process Emdeon'
    REJECTED_EMDEON = 'Rejected Emdeon'
    REJECTED_JOPARI = 'Rejected Jopari'
    IN_PROCESS_PAYOR = 'In Process Payor'
    REJECTED_WAYSTAR_PROFESSIONAL = 'Rejected Waystar Professional'
    REJECTED_WAYSTAR_INSTITUTIONAL = 'Rejected Waystar Institutional'
    IN_PROCESS_PAYER = 'In Process Payer'
    PAYER_ACKNOWLEDGED = 'Payer Acknowledged'
    REJECTED_PAYOR = 'Rejected Payor'
    REJECTED_PAYER = 'Rejected Payer'
    PAID_IN_FULL = 'Paid in Full'
    PARTIALLY_PAID = 'Partially Paid'
    COORDINATION_OF_BENEFITS = 'Coordination of Benefits'
    ERA_RECEIVED = 'ERA Received'
    ERA_DENIED = 'ERA Denied'
    HCFA_FORM_FAXED = 'HCFA Form Faxed'

class AppointmentIns2StatusEnum(str, Enum):
    r"""Billing status of secondary insurer"""
    UNKNOWN = ''
    INCOMPLETE_INFORMATION = 'Incomplete Information'
    IN_PROCESS_EMDEON = 'In Process Emdeon'
    REJECTED_EMDEON = 'Rejected Emdeon'
    REJECTED_JOPARI = 'Rejected Jopari'
    IN_PROCESS_PAYOR = 'In Process Payor'
    REJECTED_WAYSTAR_PROFESSIONAL = 'Rejected Waystar Professional'
    REJECTED_WAYSTAR_INSTITUTIONAL = 'Rejected Waystar Institutional'
    IN_PROCESS_PAYER = 'In Process Payer'
    PAYER_ACKNOWLEDGED = 'Payer Acknowledged'
    REJECTED_PAYOR = 'Rejected Payor'
    REJECTED_PAYER = 'Rejected Payer'
    PAID_IN_FULL = 'Paid in Full'
    PARTIALLY_PAID = 'Partially Paid'
    COORDINATION_OF_BENEFITS = 'Coordination of Benefits'
    ERA_RECEIVED = 'ERA Received'
    ERA_DENIED = 'ERA Denied'
    HCFA_FORM_FAXED = 'HCFA Form Faxed'

class AppointmentSimpleReminderTypeEnum(str, Enum):
    EMAIL = 'email'
    SMS = 'sms'
    PHONE = 'phone'
    AUTO_CALL = 'auto_call'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentSimpleReminder:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    scheduled_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduled_time'), 'exclude': lambda f: f is None }})  
    type: Optional[AppointmentSimpleReminderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    
class AppointmentStatusEnum(str, Enum):
    r"""One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses."""
    UNKNOWN = ''
    ARRIVED = 'Arrived'
    CHECKED_IN = 'Checked In'
    CHECKED_IN_ONLINE = 'Checked In Online'
    IN_ROOM = 'In Room'
    IN_SESSION = 'In Session'
    COMPLETE = 'Complete'
    CONFIRMED = 'Confirmed'
    NOT_CONFIRMED = 'Not Confirmed'
    RESCHEDULED = 'Rescheduled'
    CANCELLED = 'Cancelled'
    NO_SHOW = 'No Show'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentAppointmentStatusTransition:
    
    appointment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointment'), 'exclude': lambda f: f is None }})  
    datetime_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datetime'), 'exclude': lambda f: f is None }})  
    from_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from_status'), 'exclude': lambda f: f is None }})  
    to_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to_status'), 'exclude': lambda f: f is None }})  
    
class AppointmentSystemVitalsSmokingStatusEnum(str, Enum):
    BLANK = 'blank'
    FOUR_HUNDRED_AND_FORTY_NINE_MILLION_EIGHT_HUNDRED_AND_SIXTY_EIGHT_THOUSAND_AND_TWO = '449868002'
    FOUR_HUNDRED_AND_TWENTY_EIGHT_TRILLION_FORTY_ONE_BILLION_ONE_HUNDRED_AND_TWENTY_FOUR_THOUSAND_ONE_HUNDRED_AND_SIX = '428041000124106'
    EIGHT_MILLION_FIVE_HUNDRED_AND_SEVENTEEN_THOUSAND_AND_SIX = '8517006'
    TWO_HUNDRED_AND_SIXTY_SIX_MILLION_NINE_HUNDRED_AND_NINETEEN_THOUSAND_AND_FIVE = '266919005'
    SEVENTY_SEVEN_MILLION_ONE_HUNDRED_AND_SEVENTY_SIX_THOUSAND_AND_TWO = '77176002'
    TWO_HUNDRED_AND_SIXTY_SIX_MILLION_NINE_HUNDRED_AND_TWENTY_SEVEN_THOUSAND_AND_ONE = '266927001'
    FOUR_HUNDRED_AND_TWENTY_EIGHT_TRILLION_SEVENTY_ONE_BILLION_ONE_HUNDRED_AND_TWENTY_FOUR_THOUSAND_ONE_HUNDRED_AND_THREE = '428071000124103'
    FOUR_HUNDRED_AND_TWENTY_EIGHT_TRILLION_SIXTY_ONE_BILLION_ONE_HUNDRED_AND_TWENTY_FOUR_THOUSAND_ONE_HUNDRED_AND_FIVE = '428061000124105'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentSystemVitals:
    r"""Clinical vitals associated with the appointment"""
    
    blood_pressure_1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blood_pressure_1'), 'exclude': lambda f: f is None }})  
    blood_pressure_2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blood_pressure_2'), 'exclude': lambda f: f is None }})  
    bmi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bmi'), 'exclude': lambda f: f is None }})  
    head_circumference: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_circumference'), 'exclude': lambda f: f is None }})  
    head_circumference_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_circumference_units'), 'exclude': lambda f: f is None }})  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})  
    height_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height_units'), 'exclude': lambda f: f is None }})  
    oxygen_saturation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oxygen_saturation'), 'exclude': lambda f: f is None }})  
    pain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pain'), 'exclude': lambda f: f is None }})
    r"""1-10 pain scale."""  
    pulse: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulse'), 'exclude': lambda f: f is None }})
    r"""Beats per minute."""  
    respiratory_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respiratory_rate'), 'exclude': lambda f: f is None }})
    r"""Breathes per minute."""  
    smoking_status: Optional[AppointmentSystemVitalsSmokingStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smoking_status'), 'exclude': lambda f: f is None }})  
    temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})  
    temperature_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature_units'), 'exclude': lambda f: f is None }})  
    weight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight'), 'exclude': lambda f: f is None }})  
    weight_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight_units'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Appointment:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})
    r"""Doctor ID"""  
    exam_room: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exam_room') }})
    r"""Index of the exam room that this appointment occurs in. See `/api/offices`"""  
    office: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office') }})
    r"""Office ID"""  
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})
    r"""ID of this appointment's patient. Breaks have a null patient field."""  
    scheduled_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduled_time') }})
    r"""The starting time of the appointment"""  
    allow_overlapping: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_overlapping'), 'exclude': lambda f: f is None }})
    r"""Bypass overlap check."""  
    appt_is_break: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appt_is_break'), 'exclude': lambda f: f is None }})  
    base_recurring_appointment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_recurring_appointment'), 'exclude': lambda f: f is None }})
    r"""ID of base appointment of a recurrign series"""  
    billing_notes: Optional[list[AppointmentClaimBillingNotes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_notes'), 'exclude': lambda f: f is None }})
    r"""Billing notes of the appointment. For writing, check `/api/claim_billing_notes`"""  
    billing_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_provider'), 'exclude': lambda f: f is None }})  
    billing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_status'), 'exclude': lambda f: f is None }})
    r"""Should be one of `Auto Accident Claim`, `Balance Due`, `Bill Insurance`, `Bill Secondary Insurance`, `Durable Medical Equipment Claim`, `Internal Review`, `Paid In Full`, `Settled`, `Worker's Comp Claim` or one of the custom billing status"""  
    clinical_note: Optional[AppointmentClinicalNote] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clinical_note'), 'exclude': lambda f: f is None }})
    r"""Associated clinical note object"""  
    cloned_from: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloned_from'), 'exclude': lambda f: f is None }})
    r"""ID of the original appointment which this appointment cloned from. Will be null if the appointment is not cloned."""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[list[AppointmentCustomAppointmentFieldValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})
    r"""Custom appointment fields"""  
    custom_vitals: Optional[list[AppointmentCustomVitalValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_vitals'), 'exclude': lambda f: f is None }})
    r"""Custom vitals associated with this appointment."""  
    deleted_flag: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_flag'), 'exclude': lambda f: f is None }})
    r"""Whether the appointmetn is deleted."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Length of the appointment in minutes. Optional if `profile` is provided."""  
    extended_updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extended_updated_at'), 'exclude': lambda f: f is None }})
    r"""The most recent update time among appointment itself, its vitals and its custom vitals"""  
    first_billed_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_billed_date'), 'exclude': lambda f: f is None }})  
    icd10_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd10_codes'), 'exclude': lambda f: f is None }})  
    icd9_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd9_codes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier. Usually numeric, but not always"""  
    ins1_status: Optional[AppointmentIns1StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins1_status'), 'exclude': lambda f: f is None }})
    r"""Billing status of primary insurer"""  
    ins2_status: Optional[AppointmentIns2StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins2_status'), 'exclude': lambda f: f is None }})
    r"""Billing status of secondary insurer"""  
    is_virtual_base: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_virtual_base'), 'exclude': lambda f: f is None }})  
    is_walk_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_walk_in'), 'exclude': lambda f: f is None }})
    r"""Whether the appointment is a walk-in appointment"""  
    last_billed_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_billed_date'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})  
    primary_insurance_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_insurance_id_number'), 'exclude': lambda f: f is None }})  
    primary_insurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_insurer_name'), 'exclude': lambda f: f is None }})  
    primary_insurer_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_insurer_payer_id'), 'exclude': lambda f: f is None }})  
    profile: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile'), 'exclude': lambda f: f is None }})
    r"""ID of an `/api/appointment_profiles` instance. The profile sets default values for `color`, `duration`, and `reason` on creation, which can be overriden by setting these values explicitly."""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Default to `\\"\\"`"""  
    recurring_appointment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurring_appointment'), 'exclude': lambda f: f is None }})
    r"""Whether the appointment is a recurring appointment or not"""  
    reminder_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminder_profile'), 'exclude': lambda f: f is None }})
    r"""Write-only. ID of an `/api/reminder_profiles` instance. Set this to apply a reminder profile to the appointment. Cannot be applied to an appointment with reminders."""  
    reminders: Optional[list[AppointmentSimpleReminder]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminders'), 'exclude': lambda f: f is None }})
    r"""Scheduled reminders of the appointment"""  
    secondary_insurance_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_insurance_id_number'), 'exclude': lambda f: f is None }})  
    secondary_insurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_insurer_name'), 'exclude': lambda f: f is None }})  
    secondary_insurer_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_insurer_payer_id'), 'exclude': lambda f: f is None }})  
    status: Optional[AppointmentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""One of ``, `Arrived`, `Checked In`, `In Room`, `Cancelled`, `Complete`, `Confirmed`, `In Session`, `No Show`, `Not Confirmed`, or `Rescheduled`. Or one of the custom statuses."""  
    status_transitions: Optional[list[AppointmentAppointmentStatusTransition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_transitions'), 'exclude': lambda f: f is None }})  
    supervising_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supervising_provider'), 'exclude': lambda f: f is None }})
    r"""Supervising provider of appointment if set."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    vitals: Optional[AppointmentSystemVitals] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitals'), 'exclude': lambda f: f is None }})
    r"""Clinical vitals associated with the appointment"""  
    