// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScalarFunctionsEnum string

const (
	ScalarFunctionsEnumTrunc    ScalarFunctionsEnum = "TRUNC"
	ScalarFunctionsEnumAbs      ScalarFunctionsEnum = "ABS"
	ScalarFunctionsEnumCeiling  ScalarFunctionsEnum = "CEILING"
	ScalarFunctionsEnumFloor    ScalarFunctionsEnum = "FLOOR"
	ScalarFunctionsEnumLn       ScalarFunctionsEnum = "LN"
	ScalarFunctionsEnumLog      ScalarFunctionsEnum = "LOG"
	ScalarFunctionsEnumRound    ScalarFunctionsEnum = "ROUND"
	ScalarFunctionsEnumSqrt     ScalarFunctionsEnum = "SQRT"
	ScalarFunctionsEnumCast     ScalarFunctionsEnum = "CAST"
	ScalarFunctionsEnumLower    ScalarFunctionsEnum = "LOWER"
	ScalarFunctionsEnumRtrim    ScalarFunctionsEnum = "RTRIM"
	ScalarFunctionsEnumUpper    ScalarFunctionsEnum = "UPPER"
	ScalarFunctionsEnumCoalesce ScalarFunctionsEnum = "COALESCE"
)

func (e *ScalarFunctionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRUNC":
		fallthrough
	case "ABS":
		fallthrough
	case "CEILING":
		fallthrough
	case "FLOOR":
		fallthrough
	case "LN":
		fallthrough
	case "LOG":
		fallthrough
	case "ROUND":
		fallthrough
	case "SQRT":
		fallthrough
	case "CAST":
		fallthrough
	case "LOWER":
		fallthrough
	case "RTRIM":
		fallthrough
	case "UPPER":
		fallthrough
	case "COALESCE":
		*e = ScalarFunctionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScalarFunctionsEnum: %s", s)
	}
}
