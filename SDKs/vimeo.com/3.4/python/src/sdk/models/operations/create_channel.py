"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channel as shared_channel
from ..shared import legacy_error as shared_legacy_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CreateChannelSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class CreateChannelRequestBodyPrivacyEnum(str, Enum):
    r"""The privacy level of the channel."""
    ANYBODY = 'anybody'
    MODERATORS = 'moderators'
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChannelRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the channel."""  
    privacy: CreateChannelRequestBodyPrivacyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy') }})
    r"""The privacy level of the channel."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the channel."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`."""  
    

@dataclasses.dataclass
class CreateChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None)
    r"""The channel was created."""  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""A parameter is invalid."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    