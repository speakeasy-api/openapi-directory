"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cpuutilization as shared_cpuutilization
from ..shared import diskutilization as shared_diskutilization
from ..shared import networkutilization as shared_networkutilization
from ..shared import requestutilization as shared_requestutilization
from ..shared import standardschedulersettings as shared_standardschedulersettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutomaticScaling:
    r"""Automatic scaling is based on request rate, response latencies, and other application metrics."""
    
    cool_down_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coolDownPeriod'), 'exclude': lambda f: f is None }})
    r"""The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment."""  
    cpu_utilization: Optional[shared_cpuutilization.CPUUtilization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuUtilization'), 'exclude': lambda f: f is None }})
    r"""Target scaling by CPU usage."""  
    disk_utilization: Optional[shared_diskutilization.DiskUtilization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskUtilization'), 'exclude': lambda f: f is None }})
    r"""Target scaling by disk usage. Only applicable in the App Engine flexible environment."""  
    max_concurrent_requests: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxConcurrentRequests'), 'exclude': lambda f: f is None }})
    r"""Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value."""  
    max_idle_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxIdleInstances'), 'exclude': lambda f: f is None }})
    r"""Maximum number of idle instances that should be maintained for this version."""  
    max_pending_latency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPendingLatency'), 'exclude': lambda f: f is None }})
    r"""Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it."""  
    max_total_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTotalInstances'), 'exclude': lambda f: f is None }})
    r"""Maximum number of instances that should be started to handle requests for this version."""  
    min_idle_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minIdleInstances'), 'exclude': lambda f: f is None }})
    r"""Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service."""  
    min_pending_latency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPendingLatency'), 'exclude': lambda f: f is None }})
    r"""Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it."""  
    min_total_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minTotalInstances'), 'exclude': lambda f: f is None }})
    r"""Minimum number of running instances that should be maintained for this version."""  
    network_utilization: Optional[shared_networkutilization.NetworkUtilization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkUtilization'), 'exclude': lambda f: f is None }})
    r"""Target scaling by network usage. Only applicable in the App Engine flexible environment."""  
    request_utilization: Optional[shared_requestutilization.RequestUtilization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestUtilization'), 'exclude': lambda f: f is None }})
    r"""Target scaling by request utilization. Only applicable in the App Engine flexible environment."""  
    standard_scheduler_settings: Optional[shared_standardschedulersettings.StandardSchedulerSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standardSchedulerSettings'), 'exclude': lambda f: f is None }})
    r"""Scheduler settings for standard environment."""  
    