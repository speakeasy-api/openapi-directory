// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETVpnConnectionDeviceTypesActionEnum
type GETGETVpnConnectionDeviceTypesActionEnum string

const (
	GETGETVpnConnectionDeviceTypesActionEnumGetVpnConnectionDeviceTypes GETGETVpnConnectionDeviceTypesActionEnum = "GetVpnConnectionDeviceTypes"
)

func (e GETGETVpnConnectionDeviceTypesActionEnum) ToPointer() *GETGETVpnConnectionDeviceTypesActionEnum {
	return &e
}

func (e *GETGETVpnConnectionDeviceTypesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetVpnConnectionDeviceTypes":
		*e = GETGETVpnConnectionDeviceTypesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVpnConnectionDeviceTypesActionEnum: %v", v)
	}
}

// GETGETVpnConnectionDeviceTypesVersionEnum
type GETGETVpnConnectionDeviceTypesVersionEnum string

const (
	GETGETVpnConnectionDeviceTypesVersionEnumTwoThousandAndSixteen1115 GETGETVpnConnectionDeviceTypesVersionEnum = "2016-11-15"
)

func (e GETGETVpnConnectionDeviceTypesVersionEnum) ToPointer() *GETGETVpnConnectionDeviceTypesVersionEnum {
	return &e
}

func (e *GETGETVpnConnectionDeviceTypesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETGETVpnConnectionDeviceTypesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVpnConnectionDeviceTypesVersionEnum: %v", v)
	}
}

type GETGETVpnConnectionDeviceTypesRequest struct {
	Action GETGETVpnConnectionDeviceTypesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The maximum number of results returned by <code>GetVpnConnectionDeviceTypes</code> in paginated output. When this parameter is used, <code>GetVpnConnectionDeviceTypes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>GetVpnConnectionDeviceTypes</code> request with the returned <code>NextToken</code> value. This value can be between 200 and 1000. If this parameter is not used, then <code>GetVpnConnectionDeviceTypes</code> returns all results.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// The <code>NextToken</code> value returned from a previous paginated <code>GetVpnConnectionDeviceTypes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is null when there are no more results to return.
	NextToken         *string                                   `queryParam:"style=form,explode=true,name=NextToken"`
	Version           GETGETVpnConnectionDeviceTypesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETVpnConnectionDeviceTypesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
