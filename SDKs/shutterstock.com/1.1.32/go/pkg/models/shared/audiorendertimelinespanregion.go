// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AudioRenderTimelineSpanRegionEndTypeEventEnum - The type of event
type AudioRenderTimelineSpanRegionEndTypeEventEnum string

const (
	AudioRenderTimelineSpanRegionEndTypeEventEnumEnding     AudioRenderTimelineSpanRegionEndTypeEventEnum = "ending"
	AudioRenderTimelineSpanRegionEndTypeEventEnumTransition AudioRenderTimelineSpanRegionEndTypeEventEnum = "transition"
)

func (e AudioRenderTimelineSpanRegionEndTypeEventEnum) ToPointer() *AudioRenderTimelineSpanRegionEndTypeEventEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionEndTypeEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ending":
		fallthrough
	case "transition":
		*e = AudioRenderTimelineSpanRegionEndTypeEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionEndTypeEventEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegionEndTypeTypeEnum - The specific action to perform; if the event type is "ending" then this must be "ringout" and if event type is "transition" this must be "cut"
type AudioRenderTimelineSpanRegionEndTypeTypeEnum string

const (
	AudioRenderTimelineSpanRegionEndTypeTypeEnumRingout AudioRenderTimelineSpanRegionEndTypeTypeEnum = "ringout"
	AudioRenderTimelineSpanRegionEndTypeTypeEnumCut     AudioRenderTimelineSpanRegionEndTypeTypeEnum = "cut"
)

func (e AudioRenderTimelineSpanRegionEndTypeTypeEnum) ToPointer() *AudioRenderTimelineSpanRegionEndTypeTypeEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionEndTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ringout":
		fallthrough
	case "cut":
		*e = AudioRenderTimelineSpanRegionEndTypeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionEndTypeTypeEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegionEndType - A high-level description of how a region ends
type AudioRenderTimelineSpanRegionEndType struct {
	// The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region
	Beat float64 `json:"beat"`
	// The type of event
	Event AudioRenderTimelineSpanRegionEndTypeEventEnum `json:"event"`
	// The specific action to perform; if the event type is "ending" then this must be "ringout" and if event type is "transition" this must be "cut"
	Type AudioRenderTimelineSpanRegionEndTypeTypeEnum `json:"type"`
}

// AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum - A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
type AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum string

const (
	AudioRenderTimelineSpanRegionKeyTonicAccidentalEnumDoubleFlat  AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum = "double flat"
	AudioRenderTimelineSpanRegionKeyTonicAccidentalEnumFlat        AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum = "flat"
	AudioRenderTimelineSpanRegionKeyTonicAccidentalEnumNatural     AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum = "natural"
	AudioRenderTimelineSpanRegionKeyTonicAccidentalEnumSharp       AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum = "sharp"
	AudioRenderTimelineSpanRegionKeyTonicAccidentalEnumDoubleSharp AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum = "double sharp"
)

func (e AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum) ToPointer() *AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "double flat":
		fallthrough
	case "flat":
		fallthrough
	case "natural":
		fallthrough
	case "sharp":
		fallthrough
	case "double sharp":
		*e = AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegionKeyTonicNoteEnum - A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
type AudioRenderTimelineSpanRegionKeyTonicNoteEnum string

const (
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumC AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "c"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumD AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "d"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumE AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "e"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumF AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "f"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumG AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "g"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumA AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "a"
	AudioRenderTimelineSpanRegionKeyTonicNoteEnumB AudioRenderTimelineSpanRegionKeyTonicNoteEnum = "b"
)

func (e AudioRenderTimelineSpanRegionKeyTonicNoteEnum) ToPointer() *AudioRenderTimelineSpanRegionKeyTonicNoteEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionKeyTonicNoteEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "c":
		fallthrough
	case "d":
		fallthrough
	case "e":
		fallthrough
	case "f":
		fallthrough
	case "g":
		fallthrough
	case "a":
		fallthrough
	case "b":
		*e = AudioRenderTimelineSpanRegionKeyTonicNoteEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionKeyTonicNoteEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegionKeyTonicQualityEnum - The scale quality; if this field is not specified, the API selects the quality automatically
type AudioRenderTimelineSpanRegionKeyTonicQualityEnum string

const (
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumMajor         AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "major"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumNaturalMinor  AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "natural_minor"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumHarmonicMinor AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "harmonic_minor"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumMelodicMinor  AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "melodic_minor"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumIonian        AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "ionian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumDorian        AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "dorian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumPhrygian      AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "phrygian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumLydian        AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "lydian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumMixolydian    AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "mixolydian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumAeolian       AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "aeolian"
	AudioRenderTimelineSpanRegionKeyTonicQualityEnumLocrian       AudioRenderTimelineSpanRegionKeyTonicQualityEnum = "locrian"
)

func (e AudioRenderTimelineSpanRegionKeyTonicQualityEnum) ToPointer() *AudioRenderTimelineSpanRegionKeyTonicQualityEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionKeyTonicQualityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "major":
		fallthrough
	case "natural_minor":
		fallthrough
	case "harmonic_minor":
		fallthrough
	case "melodic_minor":
		fallthrough
	case "ionian":
		fallthrough
	case "dorian":
		fallthrough
	case "phrygian":
		fallthrough
	case "lydian":
		fallthrough
	case "mixolydian":
		fallthrough
	case "aeolian":
		fallthrough
	case "locrian":
		*e = AudioRenderTimelineSpanRegionKeyTonicQualityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionKeyTonicQualityEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegionKey - The key signature active at the beginning of the region
type AudioRenderTimelineSpanRegionKey struct {
	// A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
	TonicAccidental *AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum `json:"tonic_accidental,omitempty"`
	// A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
	TonicNote *AudioRenderTimelineSpanRegionKeyTonicNoteEnum `json:"tonic_note,omitempty"`
	// The scale quality; if this field is not specified, the API selects the quality automatically
	TonicQuality *AudioRenderTimelineSpanRegionKeyTonicQualityEnum `json:"tonic_quality,omitempty"`
}

// AudioRenderTimelineSpanRegionRegionEnum - The type of region
type AudioRenderTimelineSpanRegionRegionEnum string

const (
	AudioRenderTimelineSpanRegionRegionEnumMusic   AudioRenderTimelineSpanRegionRegionEnum = "music"
	AudioRenderTimelineSpanRegionRegionEnumSilence AudioRenderTimelineSpanRegionRegionEnum = "silence"
)

func (e AudioRenderTimelineSpanRegionRegionEnum) ToPointer() *AudioRenderTimelineSpanRegionRegionEnum {
	return &e
}

func (e *AudioRenderTimelineSpanRegionRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "music":
		fallthrough
	case "silence":
		*e = AudioRenderTimelineSpanRegionRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanRegionRegionEnum: %v", v)
	}
}

// AudioRenderTimelineSpanRegion - A period of music or silence, measured in beats
type AudioRenderTimelineSpanRegion struct {
	// The beat, relative to the span, at which the region object's music begins
	Beat int64 `json:"beat"`
	// The descriptor ID needed to compose the music
	Descriptor string `json:"descriptor"`
	// A high-level description of how a region ends
	EndType *AudioRenderTimelineSpanRegionEndType `json:"end_type,omitempty"`
	// An identifier which must be unique within the parent span
	ID float64 `json:"id"`
	// The key signature active at the beginning of the region
	Key *AudioRenderTimelineSpanRegionKey `json:"key,omitempty"`
	// The type of region
	Region AudioRenderTimelineSpanRegionRegionEnum `json:"region"`
}
