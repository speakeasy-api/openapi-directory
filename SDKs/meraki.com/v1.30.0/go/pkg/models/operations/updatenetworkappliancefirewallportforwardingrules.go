// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkApplianceFirewallPortForwardingRulesPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum - TCP or UDP
type UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum string

const (
	UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnumTCP UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum = "tcp"
	UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnumUDP UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum: %s", s)
	}
}

// UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum - The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
type UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum string

const (
	UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnumBoth      UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum = "both"
	UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnumInternet1 UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum = "internet1"
	UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnumInternet2 UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum = "internet2"
)

func (e *UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "internet1":
		fallthrough
	case "internet2":
		*e = UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum: %s", s)
	}
}

type UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules struct {
	// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
	AllowedIps []string `json:"allowedIps"`
	// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
	LanIP string `json:"lanIp"`
	// A port or port ranges that will receive the forwarded traffic from the WAN
	LocalPort string `json:"localPort"`
	// A descriptive name for the rule
	Name *string `json:"name,omitempty"`
	// TCP or UDP
	Protocol UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesProtocolEnum `json:"protocol"`
	// A port or port ranges that will be forwarded to the host on the LAN
	PublicPort string `json:"publicPort"`
	// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
	Uplink *UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRulesUplinkEnum `json:"uplink,omitempty"`
}

type UpdateNetworkApplianceFirewallPortForwardingRulesRequestBody struct {
	// An array of port forwarding params
	Rules []UpdateNetworkApplianceFirewallPortForwardingRulesRequestBodyRules `json:"rules"`
}

type UpdateNetworkApplianceFirewallPortForwardingRulesRequest struct {
	PathParams UpdateNetworkApplianceFirewallPortForwardingRulesPathParams
	Request    UpdateNetworkApplianceFirewallPortForwardingRulesRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkApplianceFirewallPortForwardingRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject map[string]interface{}
}
