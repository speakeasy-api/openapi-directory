"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var Search = /** @class */ (function () {
    function Search(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Search for Products
     *
     * @remarks
     * Retrieves general information about the products related to the term searched.
     * This is the main search used by the store. The user can type anything to be searched.
     *
     * For example, if they search for a "decanter", this is the URL: `https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter`.
     *
     * Note that maybe the response can be HTTP 200 or 206, 206 means that it's a partial content response.
     *
     * If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     */
    Search.prototype.productSearch = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ProductSearchRequest(req);
        }
        var baseURL = operations.ProductSearchServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/api/catalog_system/pub/products/search/{search}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProductSearchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.productSearch200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.productSearch200ApplicationJSONObjects = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ProductSearch200ApplicationJSON, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Search for Products with Filter, Order and Pagination
     *
     * @remarks
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered.
     *
     * ## Filters
     *
     * - **Filter by full text** - `ft={searchWord}`
     * E.g.: `ft=television`
     *
     * - **Filter by category** - `fq=C:/{a}/{b}`
     * `{a}` and `{b}` are Category IDs
     * E.g.: `fq=C:/1000041/1000049/`
     *
     * - **Filter by brand** - `fq=B:/{a}/{b}`
     * `{a}` and `{b}` are Brand IDs
     * E.g.: `fq=B:/189385/189387/`
     *
     * - **Filter by specification** - `fq=specificationFilter_{a}:{b}`
     * `{a}` is the specification ID
     * `{b}` is the specification value
     * E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: `fq=specificationFilter_123:Blue`
     *
     * - **Filter by price range** - `fq=P:[{a} TO {b}]`
     * `{a}`  is the minimum price "from"
     * `{b}` is the highest price "to"
     * E.g.: `fq=P:[0 TO 20]` will search products between 0.00 and 20.00.
     *
     * - **Filter by collection** - `fq=productClusterIds:{{productClusterId}}`
     * `productClusterId` is the same as `collectionId`
     * For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).
     *
     * - **Filter by product ID** - `fq=productId:{{productId}}`
     *
     * - **Filter by SKU ID** - `fq=skuId:{{skuId}}`
     *
     * - **Filter by referenceId** - `fq=alternateIds_RefId:{{referenceId}}`
     *
     * - **Filter by EAN13** - `fq=alternateIds_Ean:{{ean13}}`
     *
     * - **Filter by availability at a specific sales channel** - `fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`
     * `{{sc}}` is the desired sales channel
     * `{{bool}}` is true ou false, 1 or 0.
     * E.g.: seaching available products for the sales channel 4 would be `fq=isAvailablePerSalesChannel_4:1`
     *
     * - **Filter by available at a specific seller** - `fq=sellerId:{{sellerId}}`
     * The search does not include White Label Sellers.
     *
     * ## Pagination
     *
     * - **Initial item number** - `_from={{first}}`
     * - **Final item number** - `_to={{last}}`
     *
     * >⚠️ This endpoint returns a maximum of 50 items per response, so the difference between `_from` and `_to` should not exceed this number. The result order is descending, from the highest product ID to the lowest.
     *
     * ## Sorting
     *
     * - **Price**
     * `O=OrderByPriceDESC`
     * `O=OrderByPriceASC`
     *
     * - **Top Selling Products**
     * `O=OrderByTopSaleDESC`
     *
     * - **Best Reviews**
     * `O=OrderByReviewRateDESC`
     *
     * - **Name**
     * `O=OrderByNameASC`
     * `O=OrderByNameDESC`
     *
     * - **Release Date**
     * `O=OrderByReleaseDateDESC`
     *
     * - **Best Discounts**
     * `O=OrderByBestDiscountDESC`
     *
     * - **Score**
     * `O=OrderByScoreDESC`
     */
    Search.prototype.productSearchFilteredandOrdered = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ProductSearchFilteredandOrderedRequest(req);
        }
        var baseURL = operations.ProductSearchFilteredandOrderedServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/api/catalog_system/pub/products/search";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ProductSearchFilteredandOrderedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.productSearchFilteredandOrdered200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.productSearchFilteredandOrdered200ApplicationJSONObjects =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ProductSearchFilteredandOrdered200ApplicationJSON, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Search Product by Product URL
     *
     * @remarks
     * Retrieves general information about the product of the URL you searched for.
     */
    Search.prototype.searchbyproducturl = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SearchbyproducturlRequest(req);
        }
        var baseURL = operations.SearchbyproducturlServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/api/catalog_system/pub/products/search/{product-text-link}/p", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SearchbyproducturlResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.searchbyproducturl200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.searchbyproducturl200ApplicationJSONObjects =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.Searchbyproducturl200ApplicationJSON, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    return Search;
}());
exports.Search = Search;
