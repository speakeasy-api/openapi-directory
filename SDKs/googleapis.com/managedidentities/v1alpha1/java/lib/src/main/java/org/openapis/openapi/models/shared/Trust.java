/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Trust - Represents a relationship between two domains which makes it possible for users in one domain to be authenticated by a dc in another domain. Refer https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc731335(v%3dws.10) If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
public class Trust {
    /**
     * Output only. The time the instance was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Trust withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The last heartbeat time when the trust was known to be connected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastKnownTrustConnectedHeartbeatTime")
    public String lastKnownTrustConnectedHeartbeatTime;
    public Trust withLastKnownTrustConnectedHeartbeatTime(String lastKnownTrustConnectedHeartbeatTime) {
        this.lastKnownTrustConnectedHeartbeatTime = lastKnownTrustConnectedHeartbeatTime;
        return this;
    }
    
    /**
     * The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectiveAuthentication")
    public Boolean selectiveAuthentication;
    public Trust withSelectiveAuthentication(Boolean selectiveAuthentication) {
        this.selectiveAuthentication = selectiveAuthentication;
        return this;
    }
    
    /**
     * Output only. The current state of this trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public TrustStateEnum state;
    public Trust withState(TrustStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current state of this trust, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateDescription")
    public String stateDescription;
    public Trust withStateDescription(String stateDescription) {
        this.stateDescription = stateDescription;
        return this;
    }
    
    /**
     * The target dns server ip addresses which can resolve the remote domain involved in trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDnsIpAddresses")
    public String[] targetDnsIpAddresses;
    public Trust withTargetDnsIpAddresses(String[] targetDnsIpAddresses) {
        this.targetDnsIpAddresses = targetDnsIpAddresses;
        return this;
    }
    
    /**
     * The fully qualified target domain name which will be in trust with current domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDomainName")
    public String targetDomainName;
    public Trust withTargetDomainName(String targetDomainName) {
        this.targetDomainName = targetDomainName;
        return this;
    }
    
    /**
     * The trust direction decides the current domain is trusted, trusting or both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustDirection")
    public TrustTrustDirectionEnum trustDirection;
    public Trust withTrustDirection(TrustTrustDirectionEnum trustDirection) {
        this.trustDirection = trustDirection;
        return this;
    }
    
    /**
     * Input only, and will not be stored. The trust secret used for handshake with target domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustHandshakeSecret")
    public String trustHandshakeSecret;
    public Trust withTrustHandshakeSecret(String trustHandshakeSecret) {
        this.trustHandshakeSecret = trustHandshakeSecret;
        return this;
    }
    
    /**
     * The type of trust represented by the trust resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustType")
    public TrustTrustTypeEnum trustType;
    public Trust withTrustType(TrustTrustTypeEnum trustType) {
        this.trustType = trustType;
        return this;
    }
    
    /**
     * Output only. Last update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Trust withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
