/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UpdateAccountUpdateAccountRequestBodyAllowedIpRanges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ipEnd" })
  ipEnd?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ipStart" })
  ipStart?: string;
}

export class UpdateAccountUpdateAccountRequestBodyBrandingSettingsValues extends SpeakeasyBase {
  /**
   * Custom company name to include in copyright and title bar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companyName" })
  companyName?: string;

  /**
   * Address to use as sender of email messages generated by ExaVault
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customEmail" })
  customEmail?: string;

  /**
   * Color scheme for web file manager. Valid options are **default**, **light** and **dark**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "theme" })
  theme?: string;
}

export class UpdateAccountUpdateAccountRequestBodyAccountQuotaValues extends SpeakeasyBase {
  /**
   * Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "noticeEnabled" })
  noticeEnabled?: boolean;

  /**
   * Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "noticeThreshold" })
  noticeThreshold?: number;

  /**
   * Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionsNoticeEnabled" })
  transactionsNoticeEnabled?: boolean;

  /**
   * Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionsNoticeThreshold" })
  transactionsNoticeThreshold?: number;
}

/**
 * Update Account Settings
 */
export class UpdateAccountUpdateAccountRequestBody extends SpeakeasyBase {
  /**
   * Whether extra help popups can be enabled for users in the web file manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountOnboarding" })
  accountOnboarding?: boolean;

  /**
   * IP Address Ranges for restricting account access
   */
  @SpeakeasyMetadata({
    elemType: UpdateAccountUpdateAccountRequestBodyAllowedIpRanges,
  })
  @Expose({ name: "allowedIpRanges" })
  @Type(() => UpdateAccountUpdateAccountRequestBodyAllowedIpRanges)
  allowedIpRanges?: UpdateAccountUpdateAccountRequestBodyAllowedIpRanges[];

  @SpeakeasyMetadata()
  @Expose({ name: "brandingSettings" })
  @Type(() => UpdateAccountUpdateAccountRequestBodyBrandingSettingsValues)
  brandingSettings?: UpdateAccountUpdateAccountRequestBodyBrandingSettingsValues;

  /**
   * Whether to require complex passwords for all passwords.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complexPasswords" })
  complexPasswords?: boolean;

  /**
   * Signature to be automatically added to the bottom of emails generated by the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customSignature" })
  customSignature?: string;

  /**
   * Content of welcome email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailContent" })
  emailContent?: string;

  /**
   * Subject line for welcome emails
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailSubject" })
  emailSubject?: string;

  /**
   * Custom address used for web file manager. Not available for all account types.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalDomain" })
  externalDomain?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "quota" })
  @Type(() => UpdateAccountUpdateAccountRequestBodyAccountQuotaValues)
  quota?: UpdateAccountUpdateAccountRequestBodyAccountQuotaValues;

  /**
   * Whether unencrypted FTP connections should be denied for the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secureOnly" })
  secureOnly?: boolean;

  /**
   * Whether to display links for others to sign up on share views and invitation emails
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showReferralLinks" })
  showReferralLinks?: boolean;
}

export class UpdateAccountRequest extends SpeakeasyBase {
  /**
   * Update Account Settings
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateAccountUpdateAccountRequestBody;

  /**
   * Access token required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-access-token",
  })
  evAccessToken: string;

  /**
   * API Key required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-api-key",
  })
  evApiKey: string;
}

export class UpdateAccountResponse extends SpeakeasyBase {
  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  accountResponse?: shared.AccountResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
