/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A plan is the set of actions and associated goals for a patient.
 */
export class Plan {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List patient plan summaries
   *
   * @remarks
   * Get a list of patient plan summaries
   */
  fetchPatientPlanSummaries(
    req: operations.FetchPatientPlanSummariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchPatientPlanSummariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchPatientPlanSummariesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/patient_plan_summary";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchPatientPlanSummariesResponse =
        new operations.FetchPatientPlanSummariesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchPatientPlanSummariesResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchPatientPlanSummariesResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the plan summary for a patient
   *
   * @remarks
   * Get the plan summary for a patient.
   */
  fetchPatientPlanSummary(
    req: operations.FetchPatientPlanSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchPatientPlanSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchPatientPlanSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/patient_plan_summary/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchPatientPlanSummaryResponse =
        new operations.FetchPatientPlanSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchPatientPlanSummaryResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchPatientPlanSummaryResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a plan summary
   *
   * @remarks
   * Update a plan summary record for a patient.
   */
  updatePatientPlanSummary(
    req: operations.UpdatePatientPlanSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePatientPlanSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePatientPlanSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/patient_plan_summary/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updatePatientPlanSummaryRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePatientPlanSummaryResponse =
        new operations.UpdatePatientPlanSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.updatePatientPlanSummaryResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdatePatientPlanSummaryResponse
            );
          }
          break;
        case [401, 403, 409].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.createOrUpdateErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateOrUpdateErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
