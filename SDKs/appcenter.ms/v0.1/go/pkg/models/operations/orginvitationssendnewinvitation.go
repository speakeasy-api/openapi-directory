// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type OrgInvitationsSendNewInvitationSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// OrgInvitationsSendNewInvitationRequestBodyRoleEnum - The role of the user to be added
type OrgInvitationsSendNewInvitationRequestBodyRoleEnum string

const (
	OrgInvitationsSendNewInvitationRequestBodyRoleEnumAdmin        OrgInvitationsSendNewInvitationRequestBodyRoleEnum = "admin"
	OrgInvitationsSendNewInvitationRequestBodyRoleEnumCollaborator OrgInvitationsSendNewInvitationRequestBodyRoleEnum = "collaborator"
	OrgInvitationsSendNewInvitationRequestBodyRoleEnumMember       OrgInvitationsSendNewInvitationRequestBodyRoleEnum = "member"
)

func (e *OrgInvitationsSendNewInvitationRequestBodyRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "admin":
		fallthrough
	case "collaborator":
		fallthrough
	case "member":
		*e = OrgInvitationsSendNewInvitationRequestBodyRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgInvitationsSendNewInvitationRequestBodyRoleEnum: %s", s)
	}
}

// OrgInvitationsSendNewInvitationRequestBody - The role of the user to be added
type OrgInvitationsSendNewInvitationRequestBody struct {
	// The role of the user to be added
	Role *OrgInvitationsSendNewInvitationRequestBodyRoleEnum `json:"role,omitempty"`
}

type OrgInvitationsSendNewInvitationRequest struct {
	// The role of the user to be added
	RequestBody *OrgInvitationsSendNewInvitationRequestBody `request:"mediaType=application/json"`
	// The email address of the user to send the password reset mail to.
	Email string `pathParam:"style=simple,explode=false,name=email"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum string

const (
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumBadRequest          OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumConflict            OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "Conflict"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumNotAcceptable       OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumNotFound            OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "NotFound"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumInternalServerError OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumUnauthorized        OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnumTooManyRequests     OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type OrgInvitationsSendNewInvitationDefaultApplicationJSONError struct {
	Code    OrgInvitationsSendNewInvitationDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                             `json:"message"`
}

// OrgInvitationsSendNewInvitationDefaultApplicationJSON - Error
type OrgInvitationsSendNewInvitationDefaultApplicationJSON struct {
	Error OrgInvitationsSendNewInvitationDefaultApplicationJSONError `json:"error"`
}

type OrgInvitationsSendNewInvitationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	OrgInvitationsSendNewInvitationDefaultApplicationJSONObject *OrgInvitationsSendNewInvitationDefaultApplicationJSON
}
