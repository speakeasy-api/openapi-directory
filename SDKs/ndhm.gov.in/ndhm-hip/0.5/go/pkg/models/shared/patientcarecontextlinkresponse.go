// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientCareContextLinkResponseAcknowledgementStatusEnum string

const (
	PatientCareContextLinkResponseAcknowledgementStatusEnumSuccess PatientCareContextLinkResponseAcknowledgementStatusEnum = "SUCCESS"
)

func (e *PatientCareContextLinkResponseAcknowledgementStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUCCESS":
		*e = PatientCareContextLinkResponseAcknowledgementStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientCareContextLinkResponseAcknowledgementStatusEnum: %s", s)
	}
}

type PatientCareContextLinkResponseAcknowledgement struct {
	Status PatientCareContextLinkResponseAcknowledgementStatusEnum `json:"status"`
}

type PatientCareContextLinkResponse struct {
	Acknowledgement *PatientCareContextLinkResponseAcknowledgement `json:"acknowledgement,omitempty"`
	Error           *Error                                         `json:"error,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string           `json:"requestId"`
	Resp      RequestReference `json:"resp"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
