/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Allotment Letter
   *
   * @remarks
   * API to verify Allotment Letter.
   */
  alltr(
    req: operations.AlltrRequestBody,
    security: operations.AlltrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlltrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlltrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/alltr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlltrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlltrResponse = new operations.AlltrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alltr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Alltr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NOC For Banks
   *
   * @remarks
   * API to verify NOC For Banks.
   */
  bknoc(
    req: operations.BknocRequestBody,
    security: operations.BknocSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BknocResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BknocRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bknoc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BknocSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BknocResponse = new operations.BknocResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bknoc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bknoc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Building Plan
   *
   * @remarks
   * API to verify Building Plan.
   */
  bpcer(
    req: operations.BpcerRequestBody,
    security: operations.BpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bpcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BpcerResponse = new operations.BpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bpcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Bpcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Confirmatory Letter
   *
   * @remarks
   * API to verify Confirmatory Letter.
   */
  cfltr(
    req: operations.CfltrRequestBody,
    security: operations.CfltrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CfltrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CfltrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cfltr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CfltrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CfltrResponse = new operations.CfltrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cfltr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cfltr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lease cum Sale Agreement
   *
   * @remarks
   * API to verify Lease cum Sale Agreement.
   */
  lcsag(
    req: operations.LcsagRequestBody,
    security: operations.LcsagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LcsagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LcsagRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/lcsag/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LcsagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LcsagResponse = new operations.LcsagResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lcsag504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Lcsag504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Possession Certificate
   *
   * @remarks
   * API to verify Possession Certificate.
   */
  pscer(
    req: operations.PscerRequestBody,
    security: operations.PscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/pscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PscerResponse = new operations.PscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Pscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * NOC for New Power Supply
   *
   * @remarks
   * API to verify NOC for New Power Supply.
   */
  psnoc(
    req: operations.PsnocRequestBody,
    security: operations.PsnocSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PsnocResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PsnocRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/psnoc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PsnocSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PsnocResponse = new operations.PsnocResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.psnoc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Psnoc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Water Bill/ Connection
   *
   * @remarks
   * API to verify Water Bill/ Connection.
   */
  wtrbl(
    req: operations.WtrblRequestBody,
    security: operations.WtrblSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WtrblResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WtrblRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/wtrbl/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.WtrblSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WtrblResponse = new operations.WtrblResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wtrbl504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Wtrbl504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
