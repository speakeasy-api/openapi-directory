/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class SearchVideosSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  customerAccessCode?: string;
}

/**
 * Show videos with the specified aspect ratio
 */
export enum SearchVideosAspectRatioEnum {
  Four3 = "4_3",
  Sixteen9 = "16_9",
  Nonstandard = "nonstandard",
}

export enum SearchVideosLicenseEnum {
  Commercial = "commercial",
  Editorial = "editorial",
}

/**
 * Show videos that feature people of the specified age range
 */
export enum SearchVideosPeopleAgeEnum {
  Infants = "infants",
  Children = "children",
  Teenagers = "teenagers",
  Twentys = "20s",
  Thirtys = "30s",
  Fortys = "40s",
  Fiftys = "50s",
  Sixtys = "60s",
  Older = "older",
}

export enum SearchVideosPeopleEthnicityEnum {
  African = "african",
  AfricanAmerican = "african_american",
  Black = "black",
  Brazilian = "brazilian",
  Chinese = "chinese",
  Caucasian = "caucasian",
  EastAsian = "east_asian",
  Hispanic = "hispanic",
  Japanese = "japanese",
  MiddleEastern = "middle_eastern",
  NativeAmerican = "native_american",
  PacificIslander = "pacific_islander",
  SouthAsian = "south_asian",
  SoutheastAsian = "southeast_asian",
  Other = "other",
}

/**
 * Show videos with people with the specified gender
 */
export enum SearchVideosPeopleGenderEnum {
  Male = "male",
  Female = "female",
  Both = "both",
}

/**
 * Show videos with the specified resolution
 */
export enum SearchVideosResolutionEnum {
  Fourk = "4k",
  StandardDefinition = "standard_definition",
  HighDefinition = "high_definition",
}

/**
 * Sort by one of these categories
 */
export enum SearchVideosSortEnum {
  Newest = "newest",
  Popular = "popular",
  Relevance = "relevance",
  Random = "random",
}

/**
 * Amount of detail to render in the response
 */
export enum SearchVideosViewEnum {
  Minimal = "minimal",
  Full = "full",
}

export class SearchVideosRequest extends SpeakeasyBase {
  /**
   * Show videos added on the specified date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=added_date;dateTimeFormat=YYYY-MM-DD",
  })
  addedDate?: Date;

  /**
   * Show videos added before the specified date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=added_date_end;dateTimeFormat=YYYY-MM-DD",
  })
  addedDateEnd?: Date;

  /**
   * Show videos added on or after the specified date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=added_date_start;dateTimeFormat=YYYY-MM-DD",
  })
  addedDateStart?: Date;

  /**
   * Show videos with the specified aspect ratio
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=aspect_ratio",
  })
  aspectRatio?: SearchVideosAspectRatioEnum;

  /**
   * Show videos with the specified Shutterstock-defined category; specify a category name or ID
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=category",
  })
  category?: string;

  /**
   * Show videos with the specified artist names or IDs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=contributor",
  })
  contributor?: string[];

  /**
   * Show videos from contributors in one or more specified countries
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=contributor_country",
  })
  contributorCountry?: string[];

  /**
   * (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration",
  })
  duration?: number;

  /**
   * Show videos with the specified duration or longer in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration_from",
  })
  durationFrom?: number;

  /**
   * Show videos with the specified duration or shorter in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration_to",
  })
  durationTo?: number;

  /**
   * (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fps" })
  fps?: number;

  /**
   * Show videos with the specified frames per second or more
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fps_from",
  })
  fpsFrom?: number;

  /**
   * Show videos with the specified frames per second or fewer
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fps_to",
  })
  fpsTo?: number;

  /**
   * Hide results with potentially unsafe keywords
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=keyword_safe_search",
  })
  keywordSafeSearch?: boolean;

  /**
   * Set query and result language (uses Accept-Language header if not set)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language",
  })
  language?: shared.LanguageEnum;

  /**
   * Show only videos with the specified license or licenses
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=license",
  })
  license?: SearchVideosLicenseEnum[];

  /**
   * Show videos with each of the specified models
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=model" })
  model?: string[];

  /**
   * Page number
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Show videos that feature people of the specified age range
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=people_age",
  })
  peopleAge?: SearchVideosPeopleAgeEnum;

  /**
   * Show videos with people of the specified ethnicities
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=people_ethnicity",
  })
  peopleEthnicity?: SearchVideosPeopleEthnicityEnum[];

  /**
   * Show videos with people with the specified gender
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=people_gender",
  })
  peopleGender?: SearchVideosPeopleGenderEnum;

  /**
   * Show only videos of people with a signed model release
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=people_model_released",
  })
  peopleModelReleased?: boolean;

  /**
   * Show videos with the specified number of people
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=people_number",
  })
  peopleNumber?: number;

  /**
   * Number of results per page
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Show videos with the specified resolution
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resolution",
  })
  resolution?: SearchVideosResolutionEnum;

  /**
   * Enable or disable safe search
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=safe" })
  safe?: boolean;

  /**
   * Sort by one of these categories
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: SearchVideosSortEnum;

  /**
   * Amount of detail to render in the response
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=view" })
  view?: SearchVideosViewEnum;
}

export class SearchVideosResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  videoSearchResults?: shared.VideoSearchResults;
}
