/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Deal - A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
 */
public class Deal {
    /**
     * Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billedBuyer")
    public String billedBuyer;

    public Deal withBilledBuyer(String billedBuyer) {
        this.billedBuyer = billedBuyer;
        return this;
    }
    
    /**
     * Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    public String buyer;

    public Deal withBuyer(String buyer) {
        this.buyer = buyer;
        return this;
    }
    
    /**
     * Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client")
    public String client;

    public Deal withClient(String client) {
        this.client = client;
        return this;
    }
    
    /**
     * Output only. The time of the deal creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Deal withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Message captures data about the creatives in the deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeRequirements")
    public CreativeRequirements creativeRequirements;

    public Deal withCreativeRequirements(CreativeRequirements creativeRequirements) {
        this.creativeRequirements = creativeRequirements;
        return this;
    }
    
    /**
     * Output only. Type of deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealType")
    public DealDealTypeEnum dealType;

    public Deal withDealType(DealDealTypeEnum dealType) {
        this.dealType = dealType;
        return this;
    }
    
    /**
     * Message contains details about how the deal will be paced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryControl")
    public DeliveryControl deliveryControl;

    public Deal withDeliveryControl(DeliveryControl deliveryControl) {
        this.deliveryControl = deliveryControl;
        return this;
    }
    
    /**
     * Output only. Free text description for the deal terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Deal withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Deal withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Represents an amount of money with its currency type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedGrossSpend")
    public Money estimatedGrossSpend;

    public Deal withEstimatedGrossSpend(Money estimatedGrossSpend) {
        this.estimatedGrossSpend = estimatedGrossSpend;
        return this;
    }
    
    /**
     * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flightEndTime")
    public String flightEndTime;

    public Deal withFlightEndTime(String flightEndTime) {
        this.flightEndTime = flightEndTime;
        return this;
    }
    
    /**
     * Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flightStartTime")
    public String flightStartTime;

    public Deal withFlightStartTime(String flightStartTime) {
        this.flightStartTime = flightStartTime;
        return this;
    }
    
    /**
     * Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Deal withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Pricing terms for Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredDealTerms")
    public PreferredDealTerms preferredDealTerms;

    public Deal withPreferredDealTerms(PreferredDealTerms preferredDealTerms) {
        this.preferredDealTerms = preferredDealTerms;
        return this;
    }
    
    /**
     * Pricing terms for Private Auctions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateAuctionTerms")
    public PrivateAuctionTerms privateAuctionTerms;

    public Deal withPrivateAuctionTerms(PrivateAuctionTerms privateAuctionTerms) {
        this.privateAuctionTerms = privateAuctionTerms;
        return this;
    }
    
    /**
     * Pricing terms for Programmatic Guaranteed Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("programmaticGuaranteedTerms")
    public ProgrammaticGuaranteedTerms programmaticGuaranteedTerms;

    public Deal withProgrammaticGuaranteedTerms(ProgrammaticGuaranteedTerms programmaticGuaranteedTerms) {
        this.programmaticGuaranteedTerms = programmaticGuaranteedTerms;
        return this;
    }
    
    /**
     * Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalRevision")
    public String proposalRevision;

    public Deal withProposalRevision(String proposalRevision) {
        this.proposalRevision = proposalRevision;
        return this;
    }
    
    /**
     * Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherProfile")
    public String publisherProfile;

    public Deal withPublisherProfile(String publisherProfile) {
        this.publisherProfile = publisherProfile;
        return this;
    }
    
    /**
     * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerTimeZone")
    public TimeZone sellerTimeZone;

    public Deal withSellerTimeZone(TimeZone sellerTimeZone) {
        this.sellerTimeZone = sellerTimeZone;
        return this;
    }
    
    /**
     * Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targeting")
    public MarketplaceTargeting targeting;

    public Deal withTargeting(MarketplaceTargeting targeting) {
        this.targeting = targeting;
        return this;
    }
    
    /**
     * Output only. The time when the deal was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Deal withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public Deal(){}
}
