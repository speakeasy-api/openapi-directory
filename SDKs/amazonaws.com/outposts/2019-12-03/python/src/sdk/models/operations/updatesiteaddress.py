"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatesiteaddressoutput as shared_updatesiteaddressoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSiteAddressRequestBodyAddress:
    r"""Information about an address."""
    
    address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine1'), 'exclude': lambda f: f is None }})  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine2'), 'exclude': lambda f: f is None }})  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine3'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactName'), 'exclude': lambda f: f is None }})  
    contact_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactPhoneNumber'), 'exclude': lambda f: f is None }})  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountryCode'), 'exclude': lambda f: f is None }})  
    district_or_county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DistrictOrCounty'), 'exclude': lambda f: f is None }})  
    municipality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Municipality'), 'exclude': lambda f: f is None }})  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalCode'), 'exclude': lambda f: f is None }})  
    state_or_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateOrRegion'), 'exclude': lambda f: f is None }})  
    
class UpdateSiteAddressRequestBodyAddressTypeEnum(str, Enum):
    r"""The type of the address."""
    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS'
    OPERATING_ADDRESS = 'OPERATING_ADDRESS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSiteAddressRequestBody:
    
    address: UpdateSiteAddressRequestBodyAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address') }})
    r"""Information about an address."""  
    address_type: UpdateSiteAddressRequestBodyAddressTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressType') }})
    r"""The type of the address."""  
    

@dataclasses.dataclass
class UpdateSiteAddressRequest:
    
    request_body: UpdateSiteAddressRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    site_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'SiteId', 'style': 'simple', 'explode': False }})
    r"""The ID or the Amazon Resource Name (ARN) of the site."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateSiteAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_site_address_output: Optional[shared_updatesiteaddressoutput.UpdateSiteAddressOutput] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    