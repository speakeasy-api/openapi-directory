/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Insight into codes of conduct for your communities.
 */
export class CodesOfConduct {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all codes of conduct
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/codes-of-conduct#get-all-codes-of-conduct} - API method documentation
   */
  codesOfConductGetAllCodesOfConduct(
    config?: AxiosRequestConfig
  ): Promise<operations.CodesOfConductGetAllCodesOfConductResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/codes_of_conduct";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CodesOfConductGetAllCodesOfConductResponse =
        new operations.CodesOfConductGetAllCodesOfConductResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.codeOfConducts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.codeOfConducts = utils.objectToClass(
              httpRes?.data,
              shared.CodeOfConduct,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
      }

      return res;
    });
  }

  /**
   * Get a code of conduct
   *
   * @see {@link https://docs.github.com/enterprise-server@2.19/rest/reference/codes-of-conduct#get-a-code-of-conduct} - API method documentation
   */
  codesOfConductGetConductCode(
    req: operations.CodesOfConductGetConductCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CodesOfConductGetConductCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CodesOfConductGetConductCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/codes_of_conduct/{key}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CodesOfConductGetConductCodeResponse =
        new operations.CodesOfConductGetConductCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.codeOfConduct = utils.objectToClass(
              httpRes?.data,
              shared.CodeOfConduct
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }
}
