<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PatrowlEngine 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Clean scan
     * 
     * Clean scan identified by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CleanScanPageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CleanScanPageResponse
     */
	public function cleanScanPage(
        \OpenAPI\OpenAPI\Models\Operations\CleanScanPageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CleanScanPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/clean/{scanId}', \OpenAPI\OpenAPI\Models\Operations\CleanScanPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CleanScanPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clean all scans
     * 
     * Clean all current scans.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CleanScansPageResponse
     */
	public function cleanScansPage(
    ): \OpenAPI\OpenAPI\Models\Operations\CleanScansPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/clean');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CleanScansPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get findings on finished scans
     * 
     * Get findings on finished scans.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFindingPageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFindingPageResponse
     */
	public function getFindingPage(
        \OpenAPI\OpenAPI\Models\Operations\GetFindingPageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFindingPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getfindings/{scanId}', \OpenAPI\OpenAPI\Models\Operations\GetFindingPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFindingPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->findings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Findings>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start a new scan
     * 
     * Start a new scan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScanDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StartScanPageResponse
     */
	public function startScanPage(
        \OpenAPI\OpenAPI\Models\Shared\ScanDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StartScanPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/startscan');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartScanPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Status of a scan
     * 
     * Status of a scan identified by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StatusScanPageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StatusScanPageResponse
     */
	public function statusScanPage(
        \OpenAPI\OpenAPI\Models\Operations\StatusScanPageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StatusScanPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/status/{scanId}', \OpenAPI\OpenAPI\Models\Operations\StatusScanPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StatusScanPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Status on all scans
     * 
     * Status all current scans.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\StatusScansPageResponse
     */
	public function statusScansPage(
    ): \OpenAPI\OpenAPI\Models\Operations\StatusScansPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/status');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StatusScansPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop a scan
     * 
     * Stop a scan identified by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopScanPageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StopScanPageResponse
     */
	public function stopScanPage(
        \OpenAPI\OpenAPI\Models\Operations\StopScanPageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StopScanPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stop/{scanId}', \OpenAPI\OpenAPI\Models\Operations\StopScanPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopScanPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop all scans
     * 
     * Stop all current scans.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\StopScansPageResponse
     */
	public function stopScansPage(
    ): \OpenAPI\OpenAPI\Models\Operations\StopScansPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stopscans');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopScansPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Index page
     * 
     * Return index page
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDefaultPageResponse
     */
	public function getDefaultPage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetDefaultPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDefaultPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Engine info page
     * 
     * Return information on engine.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInfoPageResponse
     */
	public function getInfoPage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetInfoPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInfoPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Liveness page
     * 
     * Return liveness page
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLivenessPageResponse
     */
	public function getLivenessPage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetLivenessPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/liveness');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLivenessPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Readiness page
     * 
     * Return liveness page
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReadinessPageResponse
     */
	public function getReadinessPage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetReadinessPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/readiness');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReadinessPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Test page
     * 
     * Return test page
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTestPageResponse
     */
	public function getTestPage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTestPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/test');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTestPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Configuration reloading page
     * 
     * Reload the configuration file.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ReloadConfigurationPageResponse
     */
	public function reloadConfigurationPage(
    ): \OpenAPI\OpenAPI\Models\Operations\ReloadConfigurationPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reloadconfig');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReloadConfigurationPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiResponse', 'json');
            }
        }

        return $response;
    }
}