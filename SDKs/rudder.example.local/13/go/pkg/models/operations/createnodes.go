// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateNodesQueryParams struct {
	// Description of a node configuration
	NodeParameters []shared.NodeAdd `queryParam:"serialization=json,name=Node parameters"`
}

type CreateNodesRequest struct {
	QueryParams CreateNodesQueryParams
}

// CreateNodes200ApplicationJSONActionEnum - The id of the action
type CreateNodes200ApplicationJSONActionEnum string

const (
	CreateNodes200ApplicationJSONActionEnumCreateNodes CreateNodes200ApplicationJSONActionEnum = "createNodes"
)

func (e *CreateNodes200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "createNodes":
		*e = CreateNodes200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNodes200ApplicationJSONActionEnum: %s", s)
	}
}

type CreateNodes200ApplicationJSONData struct {
	Created []string `json:"created"`
	Failed  []string `json:"failed"`
}

// CreateNodes200ApplicationJSONResultEnum - Result of the request
type CreateNodes200ApplicationJSONResultEnum string

const (
	CreateNodes200ApplicationJSONResultEnumSuccess CreateNodes200ApplicationJSONResultEnum = "success"
	CreateNodes200ApplicationJSONResultEnumError   CreateNodes200ApplicationJSONResultEnum = "error"
)

func (e *CreateNodes200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = CreateNodes200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNodes200ApplicationJSONResultEnum: %s", s)
	}
}

// CreateNodes200ApplicationJSON - Creation informations
type CreateNodes200ApplicationJSON struct {
	// The id of the action
	Action CreateNodes200ApplicationJSONActionEnum `json:"action"`
	Data   CreateNodes200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result CreateNodes200ApplicationJSONResultEnum `json:"result"`
}

type CreateNodesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Creation informations
	CreateNodes200ApplicationJSONObject *CreateNodes200ApplicationJSON
}
