/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostOauthAccessTokenRequestBody - OAuth Parameters
 */
public class PostOauthAccessTokenRequestBody {
    /**
     * The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_consumer_key")
    public String oauthConsumerKey;
    public PostOauthAccessTokenRequestBody withOauthConsumerKey(String oauthConsumerKey) {
        this.oauthConsumerKey = oauthConsumerKey;
        return this;
    }
    
    /**
     * A random string uniquely generated for each request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_nonce")
    public String oauthNonce;
    public PostOauthAccessTokenRequestBody withOauthNonce(String oauthNonce) {
        this.oauthNonce = oauthNonce;
        return this;
    }
    
    /**
     * The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_signature")
    public String oauthSignature;
    public PostOauthAccessTokenRequestBody withOauthSignature(String oauthSignature) {
        this.oauthSignature = oauthSignature;
        return this;
    }
    
    /**
     * The signature method used to sign the request. Currently only 'RSA-SHA256' is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_signature_method")
    public String oauthSignatureMethod;
    public PostOauthAccessTokenRequestBody withOauthSignatureMethod(String oauthSignatureMethod) {
        this.oauthSignatureMethod = oauthSignatureMethod;
        return this;
    }
    
    /**
     * Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_timestamp")
    public String oauthTimestamp;
    public PostOauthAccessTokenRequestBody withOauthTimestamp(String oauthTimestamp) {
        this.oauthTimestamp = oauthTimestamp;
        return this;
    }
    
    /**
     * The request token obtained from IB via /request_token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_token")
    public String oauthToken;
    public PostOauthAccessTokenRequestBody withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * The verification code received from IB after the user has granted authorization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_verifier")
    public String oauthVerifier;
    public PostOauthAccessTokenRequestBody withOauthVerifier(String oauthVerifier) {
        this.oauthVerifier = oauthVerifier;
        return this;
    }
    
}
