/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class RenderSyncRequestBody2 {
    /**
     * Whether to block ads on the rendered page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_ads")
    public Boolean blockAds;

    public RenderSyncRequestBody2 withBlockAds(Boolean blockAds) {
        this.blockAds = blockAds;
        return this;
    }
    
    /**
     * Whether to automatically click accept buttons on the rendered page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("click_accept")
    public Boolean clickAccept;

    public RenderSyncRequestBody2 withClickAccept(Boolean clickAccept) {
        this.clickAccept = clickAccept;
        return this;
    }
    
    /**
     * The amount of milliseconds to delay before taking a screenshot
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delay")
    public String delay;

    public RenderSyncRequestBody2 withDelay(String delay) {
        this.delay = delay;
        return this;
    }
    
    /**
     * The format of the rendered output
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public RenderSyncRequestBody2FormatEnum format;

    public RenderSyncRequestBody2 withFormat(RenderSyncRequestBody2FormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * Whether to capture the full page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_page")
    public Boolean fullPage;

    public RenderSyncRequestBody2 withFullPage(Boolean fullPage) {
        this.fullPage = fullPage;
        return this;
    }
    
    /**
     * Whether to enable GPU rendering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gpu")
    public Boolean gpu;

    public RenderSyncRequestBody2 withGpu(Boolean gpu) {
        this.gpu = gpu;
        return this;
    }
    
    /**
     * The viewport height of the rendered output
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;

    public RenderSyncRequestBody2 withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * Whether to hide cookie banners on the rendered page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hide_cookie_banners")
    public Boolean hideCookieBanners;

    public RenderSyncRequestBody2 withHideCookieBanners(Boolean hideCookieBanners) {
        this.hideCookieBanners = hideCookieBanners;
        return this;
    }
    
    /**
     * The raw HTML to render as an image or video
     */
    @JsonProperty("html")
    public String html;

    public RenderSyncRequestBody2 withHtml(String html) {
        this.html = html;
        return this;
    }
    
    /**
     * Whether to return metadata about the URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public Boolean metadata;

    public RenderSyncRequestBody2 withMetadata(Boolean metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Whether to render the image in retina quality
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retina")
    public Boolean retina;

    public RenderSyncRequestBody2 withRetina(Boolean retina) {
        this.retina = retina;
        return this;
    }
    
    /**
     * The CSS selector of an element you would like to capture
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selector")
    public String selector;

    public RenderSyncRequestBody2 withSelector(String selector) {
        this.selector = selector;
        return this;
    }
    
    /**
     * The height of the thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb_height")
    public Long thumbHeight;

    public RenderSyncRequestBody2 withThumbHeight(Long thumbHeight) {
        this.thumbHeight = thumbHeight;
        return this;
    }
    
    /**
     * The width of the thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb_width")
    public Long thumbWidth;

    public RenderSyncRequestBody2 withThumbWidth(Long thumbWidth) {
        this.thumbWidth = thumbWidth;
        return this;
    }
    
    /**
     * The URL to render as an image or video
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public RenderSyncRequestBody2 withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * CSS selector of an element to wait to be present in the web page before rendering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_for")
    public String waitFor;

    public RenderSyncRequestBody2 withWaitFor(String waitFor) {
        this.waitFor = waitFor;
        return this;
    }
    
    /**
     * CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_to_leave")
    public String waitToLeave;

    public RenderSyncRequestBody2 withWaitToLeave(String waitToLeave) {
        this.waitToLeave = waitToLeave;
        return this;
    }
    
    /**
     * When
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_until")
    public RenderSyncRequestBody2WaitUntilEnum waitUntil;

    public RenderSyncRequestBody2 withWaitUntil(RenderSyncRequestBody2WaitUntilEnum waitUntil) {
        this.waitUntil = waitUntil;
        return this;
    }
    
    /**
     * The viewport width of the rendered output
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;

    public RenderSyncRequestBody2 withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    public RenderSyncRequestBody2(@JsonProperty("html") String html) {
        this.html = html;
  }
}
