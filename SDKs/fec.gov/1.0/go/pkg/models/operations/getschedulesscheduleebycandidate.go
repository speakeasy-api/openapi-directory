// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSchedulesScheduleEByCandidateOfficeEnum - Federal office candidate runs for: H, S or P
type GetSchedulesScheduleEByCandidateOfficeEnum string

const (
	GetSchedulesScheduleEByCandidateOfficeEnumHouse     GetSchedulesScheduleEByCandidateOfficeEnum = "house"
	GetSchedulesScheduleEByCandidateOfficeEnumSenate    GetSchedulesScheduleEByCandidateOfficeEnum = "senate"
	GetSchedulesScheduleEByCandidateOfficeEnumPresident GetSchedulesScheduleEByCandidateOfficeEnum = "president"
)

func (e *GetSchedulesScheduleEByCandidateOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "house":
		fallthrough
	case "senate":
		fallthrough
	case "president":
		*e = GetSchedulesScheduleEByCandidateOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleEByCandidateOfficeEnum: %s", s)
	}
}

// GetSchedulesScheduleEByCandidateSupportOpposeEnum - Support or opposition
type GetSchedulesScheduleEByCandidateSupportOpposeEnum string

const (
	GetSchedulesScheduleEByCandidateSupportOpposeEnumS GetSchedulesScheduleEByCandidateSupportOpposeEnum = "S"
	GetSchedulesScheduleEByCandidateSupportOpposeEnumO GetSchedulesScheduleEByCandidateSupportOpposeEnum = "O"
)

func (e *GetSchedulesScheduleEByCandidateSupportOpposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "S":
		fallthrough
	case "O":
		*e = GetSchedulesScheduleEByCandidateSupportOpposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleEByCandidateSupportOpposeEnum: %s", s)
	}
}

type GetSchedulesScheduleEByCandidateQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District *string `queryParam:"style=form,explode=true,name=district"`
	// `True` indicates that full election period of a candidate.
	// `False` indicates that two year election cycle.
	ElectionFull *bool `queryParam:"style=form,explode=true,name=election_full"`
	// Federal office candidate runs for: H, S or P
	Office *GetSchedulesScheduleEByCandidateOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Support or opposition
	SupportOppose *GetSchedulesScheduleEByCandidateSupportOpposeEnum `queryParam:"style=form,explode=true,name=support_oppose"`
}

type GetSchedulesScheduleEByCandidateRequest struct {
	QueryParams GetSchedulesScheduleEByCandidateQueryParams
}

type GetSchedulesScheduleEByCandidateResponse struct {
	ContentType              string
	ScheduleEByCandidatePage *shared.ScheduleEByCandidatePage
	StatusCode               int
	RawResponse              *http.Response
}
