// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartDevEnvironmentRequestBodyInstanceTypeEnum - The Amazon EC2 instace type to use for the Dev Environment.
type StartDevEnvironmentRequestBodyInstanceTypeEnum string

const (
	StartDevEnvironmentRequestBodyInstanceTypeEnumDevStandard1Small  StartDevEnvironmentRequestBodyInstanceTypeEnum = "dev.standard1.small"
	StartDevEnvironmentRequestBodyInstanceTypeEnumDevStandard1Medium StartDevEnvironmentRequestBodyInstanceTypeEnum = "dev.standard1.medium"
	StartDevEnvironmentRequestBodyInstanceTypeEnumDevStandard1Large  StartDevEnvironmentRequestBodyInstanceTypeEnum = "dev.standard1.large"
	StartDevEnvironmentRequestBodyInstanceTypeEnumDevStandard1Xlarge StartDevEnvironmentRequestBodyInstanceTypeEnum = "dev.standard1.xlarge"
)

func (e *StartDevEnvironmentRequestBodyInstanceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dev.standard1.small":
		fallthrough
	case "dev.standard1.medium":
		fallthrough
	case "dev.standard1.large":
		fallthrough
	case "dev.standard1.xlarge":
		*e = StartDevEnvironmentRequestBodyInstanceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartDevEnvironmentRequestBodyInstanceTypeEnum: %s", s)
	}
}

type StartDevEnvironmentRequestBody struct {
	// Information about the integrated development environment (IDE) configured for a Dev Environment.
	Ides []shared.IdeConfiguration `json:"ides,omitempty"`
	// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
	InactivityTimeoutMinutes *int64 `json:"inactivityTimeoutMinutes,omitempty"`
	// The Amazon EC2 instace type to use for the Dev Environment.
	InstanceType *StartDevEnvironmentRequestBodyInstanceTypeEnum `json:"instanceType,omitempty"`
}

type StartDevEnvironmentRequest struct {
	RequestBody StartDevEnvironmentRequestBody `request:"mediaType=application/json"`
	// The system-generated unique ID of the Dev Environment.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The name of the project in the space.
	ProjectName string `pathParam:"style=simple,explode=false,name=projectName"`
	// The name of the space.
	SpaceName string `pathParam:"style=simple,explode=false,name=spaceName"`
}

type StartDevEnvironmentResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// Success
	StartDevEnvironmentResponse *shared.StartDevEnvironmentResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
