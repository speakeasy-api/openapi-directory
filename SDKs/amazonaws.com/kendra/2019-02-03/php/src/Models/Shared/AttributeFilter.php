<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AttributeFilter - <p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message "<code>AttributeFilter</code> cannot have a length of more than 10".</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AttributeFilter
{
    /**
     * $andAllFilters
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AttributeFilter> $andAllFilters
     */
	#[\JMS\Serializer\Annotation\SerializedName('AndAllFilters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AttributeFilter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $andAllFilters = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ContainsAll')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $containsAll = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ContainsAny')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $containsAny = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('EqualsTo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $equalsTo = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('GreaterThan')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $greaterThan = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('GreaterThanOrEquals')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $greaterThanOrEquals = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('LessThan')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $lessThan = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('LessThanOrEquals')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentAttribute $lessThanOrEquals = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('NotFilter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AttributeFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AttributeFilter $notFilter = null;
    
    /**
     * $orAllFilters
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AttributeFilter> $orAllFilters
     */
	#[\JMS\Serializer\Annotation\SerializedName('OrAllFilters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AttributeFilter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $orAllFilters = null;
    
	public function __construct()
	{
		$this->andAllFilters = null;
		$this->containsAll = null;
		$this->containsAny = null;
		$this->equalsTo = null;
		$this->greaterThan = null;
		$this->greaterThanOrEquals = null;
		$this->lessThan = null;
		$this->lessThanOrEquals = null;
		$this->notFilter = null;
		$this->orAllFilters = null;
	}
}
