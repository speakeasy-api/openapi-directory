/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * As2OutgoingMessageEntity - List As2 Outgoing Messages
 */
public class As2OutgoingMessageEntity {
    /**
     * JSON Structure of the activity log.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activity_log")
    public String activityLog;

    public As2OutgoingMessageEntity withActivityLog(String activityLog) {
        this.activityLog = activityLog;
        return this;
    }
    
    /**
     * AS2 FROM
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_from")
    public String as2From;

    public As2OutgoingMessageEntity withAs2From(String as2From) {
        this.as2From = as2From;
        return this;
    }
    
    /**
     * Id of the AS2 Partner associated with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_partner_id")
    public Integer as2PartnerId;

    public As2OutgoingMessageEntity withAs2PartnerId(Integer as2PartnerId) {
        this.as2PartnerId = as2PartnerId;
        return this;
    }
    
    /**
     * Id of the AS2 Station associated with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_station_id")
    public Integer as2StationId;

    public As2OutgoingMessageEntity withAs2StationId(Integer as2StationId) {
        this.as2StationId = as2StationId;
        return this;
    }
    
    /**
     * AS2 TO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as2_to")
    public String as2To;

    public As2OutgoingMessageEntity withAs2To(String as2To) {
        this.as2To = as2To;
        return this;
    }
    
    /**
     * Filename of the file being sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_filename")
    public String attachmentFilename;

    public As2OutgoingMessageEntity withAttachmentFilename(String attachmentFilename) {
        this.attachmentFilename = attachmentFilename;
        return this;
    }
    
    /**
     * Encrypted Payload Body Size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_size")
    public String bodySize;

    public As2OutgoingMessageEntity withBodySize(String bodySize) {
        this.bodySize = bodySize;
        return this;
    }
    
    /**
     * Message creation date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public As2OutgoingMessageEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Date Header
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String date;

    public As2OutgoingMessageEntity withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * URL to download the encrypted signed smime that is to sent as AS2 body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encrypted_uri")
    public String encryptedUri;

    public As2OutgoingMessageEntity withEncryptedUri(String encryptedUri) {
        this.encryptedUri = encryptedUri;
        return this;
    }
    
    /**
     * HTTP Headers sent with this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_headers")
    public java.util.Map<String, Object> httpHeaders;

    public As2OutgoingMessageEntity withHttpHeaders(java.util.Map<String, Object> httpHeaders) {
        this.httpHeaders = httpHeaders;
        return this;
    }
    
    /**
     * HTTP Response Code received for this message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_response_code")
    public String httpResponseCode;

    public As2OutgoingMessageEntity withHttpResponseCode(String httpResponseCode) {
        this.httpResponseCode = httpResponseCode;
        return this;
    }
    
    /**
     * HTTP Headers received for this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_response_headers")
    public java.util.Map<String, Object> httpResponseHeaders;

    public As2OutgoingMessageEntity withHttpResponseHeaders(java.util.Map<String, Object> httpResponseHeaders) {
        this.httpResponseHeaders = httpResponseHeaders;
        return this;
    }
    
    /**
     * HTTP transmission duration in seceonds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_transmission_duration")
    public Double httpTransmissionDuration;

    public As2OutgoingMessageEntity withHttpTransmissionDuration(Double httpTransmissionDuration) {
        this.httpTransmissionDuration = httpTransmissionDuration;
        return this;
    }
    
    /**
     * Id of the AS2 Partner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public As2OutgoingMessageEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * MDN message id matched?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_message_id_matched")
    public Boolean mdnMessageIdMatched;

    public As2OutgoingMessageEntity withMdnMessageIdMatched(Boolean mdnMessageIdMatched) {
        this.mdnMessageIdMatched = mdnMessageIdMatched;
        return this;
    }
    
    /**
     * MDN MIC matched?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_mic_matched")
    public Boolean mdnMicMatched;

    public As2OutgoingMessageEntity withMdnMicMatched(Boolean mdnMicMatched) {
        this.mdnMicMatched = mdnMicMatched;
        return this;
    }
    
    /**
     * MDN disposition indicate a successful processing?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_processing_success")
    public Boolean mdnProcessingSuccess;

    public As2OutgoingMessageEntity withMdnProcessingSuccess(Boolean mdnProcessingSuccess) {
        this.mdnProcessingSuccess = mdnProcessingSuccess;
        return this;
    }
    
    /**
     * Did the partner give a response body?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_received")
    public Boolean mdnReceived;

    public As2OutgoingMessageEntity withMdnReceived(Boolean mdnReceived) {
        this.mdnReceived = mdnReceived;
        return this;
    }
    
    /**
     * URL to download the http response body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_response_uri")
    public String mdnResponseUri;

    public As2OutgoingMessageEntity withMdnResponseUri(String mdnResponseUri) {
        this.mdnResponseUri = mdnResponseUri;
        return this;
    }
    
    /**
     * MDN signature verified?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_signature_verified")
    public Boolean mdnSignatureVerified;

    public As2OutgoingMessageEntity withMdnSignatureVerified(Boolean mdnSignatureVerified) {
        this.mdnSignatureVerified = mdnSignatureVerified;
        return this;
    }
    
    /**
     * Is the response in MDN format?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mdn_valid")
    public Boolean mdnValid;

    public As2OutgoingMessageEntity withMdnValid(Boolean mdnValid) {
        this.mdnValid = mdnValid;
        return this;
    }
    
    /**
     * AS2 Message Id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_id")
    public String messageId;

    public As2OutgoingMessageEntity withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }
    
    /**
     * AS2 Message Integrity Check SHA1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic")
    public String mic;

    public As2OutgoingMessageEntity withMic(String mic) {
        this.mic = mic;
        return this;
    }
    
    /**
     * AS2 Message Integrity Check SHA256
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mic_sha_256")
    public String micSha256;

    public As2OutgoingMessageEntity withMicSha256(String micSha256) {
        this.micSha256 = micSha256;
        return this;
    }
    
    /**
     * Result of processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_result")
    public As2OutgoingMessageEntityProcessingResultEnum processingResult;

    public As2OutgoingMessageEntity withProcessingResult(As2OutgoingMessageEntityProcessingResultEnum processingResult) {
        this.processingResult = processingResult;
        return this;
    }
    
    /**
     * Result of processing description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_result_description")
    public String processingResultDescription;

    public As2OutgoingMessageEntity withProcessingResultDescription(String processingResultDescription) {
        this.processingResultDescription = processingResultDescription;
        return this;
    }
    
    /**
     * URL to download the original file contents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_uri")
    public String rawUri;

    public As2OutgoingMessageEntity withRawUri(String rawUri) {
        this.rawUri = rawUri;
        return this;
    }
    
    /**
     * URL to download the file contents as smime with signature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smime_signed_uri")
    public String smimeSignedUri;

    public As2OutgoingMessageEntity withSmimeSignedUri(String smimeSignedUri) {
        this.smimeSignedUri = smimeSignedUri;
        return this;
    }
    
    /**
     * URL to download the file contents encoded as smime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smime_uri")
    public String smimeUri;

    public As2OutgoingMessageEntity withSmimeUri(String smimeUri) {
        this.smimeUri = smimeUri;
        return this;
    }
    
    /**
     * UUID assigned to this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;

    public As2OutgoingMessageEntity withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
    public As2OutgoingMessageEntity(){}
}
