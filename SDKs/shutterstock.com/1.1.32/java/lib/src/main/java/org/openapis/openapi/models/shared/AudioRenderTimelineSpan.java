/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AudioRenderTimelineSpan - The beginning of a non-overlapping period of absolute time
 */
public class AudioRenderTimelineSpan {
    /**
     * An identifier which must be unique within the parent span
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Double id;
    public AudioRenderTimelineSpan withId(Double id) {
        this.id = id;
        return this;
    }
    
    /**
     * An array of instrument_group objects that are used in this span
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instrument_groups")
    public AudioRenderTimelineSpanInstrumentGroup[] instrumentGroups;
    public AudioRenderTimelineSpan withInstrumentGroups(AudioRenderTimelineSpanInstrumentGroup[] instrumentGroups) {
        this.instrumentGroups = instrumentGroups;
        return this;
    }
    
    /**
     * An array of region objects within the span
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regions")
    public AudioRenderTimelineSpanRegion[] regions;
    public AudioRenderTimelineSpan withRegions(AudioRenderTimelineSpanRegion[] regions) {
        this.regions = regions;
        return this;
    }
    
    /**
     * Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
     */
    @JsonProperty("span_type")
    public AudioRenderTimelineSpanSpanTypeEnum spanType;
    public AudioRenderTimelineSpan withSpanType(AudioRenderTimelineSpanSpanTypeEnum spanType) {
        this.spanType = spanType;
        return this;
    }
    
    /**
     * The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tempo")
    public Long tempo;
    public AudioRenderTimelineSpan withTempo(Long tempo) {
        this.tempo = tempo;
        return this;
    }
    
    /**
     * Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tempo_changes")
    public AudioRenderTimelineSpanTempoChanges[] tempoChanges;
    public AudioRenderTimelineSpan withTempoChanges(AudioRenderTimelineSpanTempoChanges[] tempoChanges) {
        this.tempoChanges = tempoChanges;
        return this;
    }
    
    /**
     * The absolute time, in seconds, at which the span starts
     */
    @JsonProperty("time")
    public Long time;
    public AudioRenderTimelineSpan withTime(Long time) {
        this.time = time;
        return this;
    }
    
}
