/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The status of the debit memo.
 *
 * @remarks
 *
 */
export enum GETDebitMemoTypewithSuccessStatusEnum {
  Draft = "Draft",
  Posted = "Posted",
  Canceled = "Canceled",
  Error = "Error",
  PendingForTax = "PendingForTax",
  Generating = "Generating",
  CancelInProgress = "CancelInProgress",
}

/**
 * The status of tax calculation related to the debit memo.
 *
 * @remarks
 *
 * **Note**: This field is only applicable to tax calculation by third-party tax engines.
 *
 */
export enum GETDebitMemoTypewithSuccessTaxStatusEnum {
  Complete = "Complete",
  Error = "Error",
}

/**
 * Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
 *
 * @remarks
 *
 */
export enum GETDebitMemoTypewithSuccessTransferredToAccountingEnum {
  Processing = "Processing",
  Yes = "Yes",
  No = "No",
  Error = "Error",
  Ignore = "Ignore",
}

/**
 * Container for custom fields of a Debit Memo object.
 *
 * @remarks
 *
 */
export class GETDebitMemoTypewithSuccess extends SpeakeasyBase {
  /**
   * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationId__NS" })
  integrationIdNS?: string;

  /**
   * Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IntegrationStatus__NS" })
  integrationStatusNS?: string;

  /**
   * Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SyncDate__NS" })
  syncDateNS?: string;

  /**
   * The ID of the customer account associated with the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * The total amount of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * Whether debit memos are automatically picked up for processing in the corresponding payment run.
   *
   * @remarks
   *
   * By default, debit memos are automatically picked up for processing in the corresponding payment run.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoPay" })
  autoPay?: boolean;

  /**
   * The balance of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance?: number;

  /**
   * The applied amount of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beAppliedAmount" })
  beAppliedAmount?: number;

  /**
   * The ID of the Zuora user who cancelled the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelledById" })
  cancelledById?: string;

  /**
   * The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelledOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  cancelledOn?: Date;

  /**
   * Comments about the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The ID of the Zuora user who created the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdById" })
  createdById?: string;

  /**
   * The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debitMemoDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  debitMemoDate?: Date;

  /**
   * The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dueDate?: Date;

  /**
   * The unique ID of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The ID of the latest PDF file generated for the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latestPDFFileId" })
  latestPDFFileId?: string;

  /**
   * The unique identification number of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  /**
   * The ID of the Zuora user who posted the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postedById" })
  postedById?: string;

  /**
   * The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  postedOn?: Date;

  /**
   * A code identifying the reason for the transaction. The value must be an existing reason code or empty.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reasonCode" })
  reasonCode?: string;

  /**
   * The ID of a referred invoice.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referredInvoiceId" })
  referredInvoiceId?: string;

  /**
   * The status of the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GETDebitMemoTypewithSuccessStatusEnum;

  /**
   * The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  targetDate?: Date;

  /**
   * The amount of taxation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxAmount" })
  taxAmount?: number;

  /**
   * The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxMessage" })
  taxMessage?: string;

  /**
   * The status of tax calculation related to the debit memo.
   *
   * @remarks
   *
   * **Note**: This field is only applicable to tax calculation by third-party tax engines.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxStatus" })
  taxStatus?: GETDebitMemoTypewithSuccessTaxStatusEnum;

  /**
   * The total amount of taxes or VAT for which the customer has an exemption.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalTaxExemptAmount" })
  totalTaxExemptAmount?: number;

  /**
   * Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferredToAccounting" })
  transferredToAccounting?: GETDebitMemoTypewithSuccessTransferredToAccountingEnum;

  /**
   * The ID of the Zuora user who last updated the debit memo.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedById" })
  updatedById?: string;

  /**
   * The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
