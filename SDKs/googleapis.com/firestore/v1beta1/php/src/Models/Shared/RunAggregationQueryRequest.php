<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RunAggregationQueryRequest - The request for Firestore.RunAggregationQuery.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RunAggregationQueryRequest
{
    /**
     * Options for creating a new transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionOptions $newTransaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('newTransaction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionOptions $newTransaction = null;
    
    /**
     * Executes the query at the given timestamp. Requires: * Cannot be more than 270 seconds in the past.
     * 
     * @var ?string $readTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('readTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $readTime = null;
    
    /**
     * Firestore query for running an aggregation over a StructuredQuery.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StructuredAggregationQuery $structuredAggregationQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('structuredAggregationQuery')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StructuredAggregationQuery')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StructuredAggregationQuery $structuredAggregationQuery = null;
    
    /**
     * Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
     * 
     * @var ?string $transaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transaction = null;
    
	public function __construct()
	{
		$this->newTransaction = null;
		$this->readTime = null;
		$this->structuredAggregationQuery = null;
		$this->transaction = null;
	}
}
