"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import crawlorphanurls as shared_crawlorphanurls
from ..shared import defaultpayload as shared_defaultpayload
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetGanalyticsOrphanURLsMediumEnum(str, Enum):
    r"""Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)"""
    ORGANIC = 'organic'
    SOCIAL = 'social'

class GetGanalyticsOrphanURLsSourceEnum(str, Enum):
    r"""Traffic source, value: name of the search engine or social network"""
    ALL = 'all'
    AOL = 'aol'
    ASK = 'ask'
    BAIDU = 'baidu'
    BING = 'bing'
    FACEBOOK = 'facebook'
    GOOGLE = 'google'
    GOOGLE_PLUS_ = 'google+'
    LINKEDIN = 'linkedin'
    NAVER = 'naver'
    PINTEREST = 'pinterest'
    REDDIT = 'reddit'
    TUMBLR = 'tumblr'
    TWITTER = 'twitter'
    YAHOO = 'yahoo'
    YANDEX = 'yandex'


@dataclasses.dataclass
class GetGanalyticsOrphanURLsRequest:
    
    analysis_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'analysis_slug', 'style': 'simple', 'explode': False }})
    r"""Analysis' identifier"""  
    medium: GetGanalyticsOrphanURLsMediumEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'medium', 'style': 'simple', 'explode': False }})
    r"""Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)"""  
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project_slug', 'style': 'simple', 'explode': False }})
    r"""Project's identifier"""  
    source: GetGanalyticsOrphanURLsSourceEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'source', 'style': 'simple', 'explode': False }})
    r"""Traffic source, value: name of the search engine or social network"""  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})
    r"""User's identifier"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page Number"""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Page Size"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetGanalyticsOrphanURLs200ApplicationJSON:
    r"""Successful operation"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})  
    next: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_crawlorphanurls.CrawlOrphanURLs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetGanalyticsOrphanURLsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    default_payload: Optional[shared_defaultpayload.DefaultPayload] = dataclasses.field(default=None)
    r"""error payload"""  
    get_ganalytics_orphan_ur_ls_200_application_json_object: Optional[GetGanalyticsOrphanURLs200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    