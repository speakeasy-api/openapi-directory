"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.nookipedia.com/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).<br><br>This API is 'version 2' of our [original API](https://nookipedia.com/api/). While the previous API scraped information directly from the wiki, this new edition of the API pulls data from a structured and constrained database, resulting in higher-quality data, better searching, and support for filtering."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_nh_art(self, request: operations.GetNhArtRequest) -> operations.GetNhArtResponse:
        r"""All New Horizons artwork
        Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/art'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhArtRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhArtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHArtwork]])
                res.nh_artworks = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_art_artwork_(self, request: operations.GetNhArtArtworkRequest) -> operations.GetNhArtArtworkResponse:
        r"""Single New Horizons artwork
        Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhArtArtworkRequest, base_url, '/nh/art/{artwork}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhArtArtworkRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhArtArtworkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHArtwork])
                res.nh_artwork = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_bugs(self, request: operations.GetNhBugsRequest) -> operations.GetNhBugsResponse:
        r"""All New Horizons bugs
        Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/bugs'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhBugsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhBugsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHBug]])
                res.nh_bugs = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_bugs_bug_(self, request: operations.GetNhBugsBugRequest) -> operations.GetNhBugsBugResponse:
        r"""Single New Horizons bug
        Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhBugsBugRequest, base_url, '/nh/bugs/{bug}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhBugsBugRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhBugsBugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHBug])
                res.nh_bug = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error404])
                res.error404 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_clothing(self, request: operations.GetNhClothingRequest) -> operations.GetNhClothingResponse:
        r"""All New Horizons clothing
        Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/clothing'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhClothingRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhClothingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHClothing]])
                res.nh_clothings = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_clothing_clothing_(self, request: operations.GetNhClothingClothingRequest) -> operations.GetNhClothingClothingResponse:
        r"""Single New Horizons clothing
        Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhClothingClothingRequest, base_url, '/nh/clothing/{clothing}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhClothingClothingRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhClothingClothingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHClothing])
                res.nh_clothing = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_events(self, request: operations.GetNhEventsRequest) -> operations.GetNhEventsResponse:
        r"""All New Horizons events
        Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/events'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhEventsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHEvent]])
                res.nh_events = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fish(self, request: operations.GetNhFishRequest) -> operations.GetNhFishResponse:
        r"""All New Horizons fish
        Get a list of all fish and their details in *New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/fish'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFishRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHFish]])
                res.nh_fish = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fish_fish_(self, request: operations.GetNhFishFishRequest) -> operations.GetNhFishFishResponse:
        r"""Single New Horizons fish
        Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhFishFishRequest, base_url, '/nh/fish/{fish}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFishFishRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFishFishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHFish])
                res.nh_fish = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error404])
                res.error404 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_all(self, request: operations.GetNhFossilsAllRequest) -> operations.GetNhFossilsAllResponse:
        r"""All New Horizons fossil groups or individual fossil
        Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/fossils/all'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHFossilGroupWithIndividualFossilsNoMatched]])
                res.nh_fossil_group_with_individual_fossils_no_matcheds = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_all_fossil_(self, request: operations.GetNhFossilsAllFossilRequest) -> operations.GetNhFossilsAllFossilResponse:
        r"""Single New Horizons fossil group with individual fossils
        Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhFossilsAllFossilRequest, base_url, '/nh/fossils/all/{fossil}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsAllFossilRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsAllFossilResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHFossilGroupWithIndividualFossils])
                res.nh_fossil_group_with_individual_fossils = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_groups(self, request: operations.GetNhFossilsGroupsRequest) -> operations.GetNhFossilsGroupsResponse:
        r"""All New Horizons fossil groups
        Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/fossils/groups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsGroupsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHFossilGroup]])
                res.nh_fossil_groups = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_groups_fossil_group_(self, request: operations.GetNhFossilsGroupsFossilGroupRequest) -> operations.GetNhFossilsGroupsFossilGroupResponse:
        r"""Single New Horizons fossil group
        Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhFossilsGroupsFossilGroupRequest, base_url, '/nh/fossils/groups/{fossil_group}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsGroupsFossilGroupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsGroupsFossilGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHFossilGroup])
                res.nh_fossil_group = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_individuals(self, request: operations.GetNhFossilsIndividualsRequest) -> operations.GetNhFossilsIndividualsResponse:
        r"""All New Horizons fossils
        Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/fossils/individuals'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsIndividualsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsIndividualsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHIndividualFossil]])
                res.nh_individual_fossils = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_fossils_individuals_fossil_(self, request: operations.GetNhFossilsIndividualsFossilRequest) -> operations.GetNhFossilsIndividualsFossilResponse:
        r"""Single New Horizons fossil
        Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhFossilsIndividualsFossilRequest, base_url, '/nh/fossils/individuals/{fossil}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFossilsIndividualsFossilRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFossilsIndividualsFossilResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHIndividualFossil])
                res.nh_individual_fossil = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_furniture(self, request: operations.GetNhFurnitureRequest) -> operations.GetNhFurnitureResponse:
        r"""All New Horizons furniture
        Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/furniture'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFurnitureRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFurnitureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHFurniture]])
                res.nh_furnitures = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_furniture_furniture_(self, request: operations.GetNhFurnitureFurnitureRequest) -> operations.GetNhFurnitureFurnitureResponse:
        r"""Single New Horizons furniture
        Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhFurnitureFurnitureRequest, base_url, '/nh/furniture/{furniture}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhFurnitureFurnitureRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhFurnitureFurnitureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHFurniture])
                res.nh_furniture = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_interior(self, request: operations.GetNhInteriorRequest) -> operations.GetNhInteriorResponse:
        r"""All New Horizons interior items
        Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/interior'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhInteriorRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhInteriorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHInterior]])
                res.nh_interiors = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_interior_item_(self, request: operations.GetNhInteriorItemRequest) -> operations.GetNhInteriorItemResponse:
        r"""Single New Horizons interior item
        Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhInteriorItemRequest, base_url, '/nh/interior/{item}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhInteriorItemRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhInteriorItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHInterior])
                res.nh_interior = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_items(self, request: operations.GetNhItemsRequest) -> operations.GetNhItemsResponse:
        r"""Miscellaneous New Horizons items
        Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/items'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhItemsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHItem]])
                res.nh_items = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_items_item_(self, request: operations.GetNhItemsItemRequest) -> operations.GetNhItemsItemResponse:
        r"""Single New Horizons miscellaneous item
        Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhItemsItemRequest, base_url, '/nh/items/{item}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhItemsItemRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhItemsItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHItem])
                res.nh_item = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_photos(self, request: operations.GetNhPhotosRequest) -> operations.GetNhPhotosResponse:
        r"""All New Horizons photos and posters
        Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/photos'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhPhotosRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhPhotosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHPhoto]])
                res.nh_photos = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_photos_item_(self, request: operations.GetNhPhotosItemRequest) -> operations.GetNhPhotosItemResponse:
        r"""Single New Horizons photo or poster
        Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhPhotosItemRequest, base_url, '/nh/photos/{item}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhPhotosItemRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhPhotosItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHPhoto])
                res.nh_photo = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_recipes(self, request: operations.GetNhRecipesRequest) -> operations.GetNhRecipesResponse:
        r"""All New Horizons recipes
        Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/recipes'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhRecipesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhRecipesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHRecipe]])
                res.nh_recipes = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_recipes_item_(self, request: operations.GetNhRecipesItemRequest) -> operations.GetNhRecipesItemResponse:
        r"""Single New Horizons recipe
        Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhRecipesItemRequest, base_url, '/nh/recipes/{item}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhRecipesItemRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhRecipesItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHRecipe])
                res.nh_recipe = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_sea(self, request: operations.GetNhSeaRequest) -> operations.GetNhSeaResponse:
        r"""All New Horizons sea creatures
        Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/sea'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhSeaRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhSeaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHSeaCreature]])
                res.nh_sea_creatures = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_sea_sea_creature_(self, request: operations.GetNhSeaSeaCreatureRequest) -> operations.GetNhSeaSeaCreatureResponse:
        r"""Single New Horizons sea creature
        Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhSeaSeaCreatureRequest, base_url, '/nh/sea/{sea_creature}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhSeaSeaCreatureRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhSeaSeaCreatureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHSeaCreature])
                res.nh_sea_creature = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error404])
                res.error404 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_tools(self, request: operations.GetNhToolsRequest) -> operations.GetNhToolsResponse:
        r"""All New Horizons tools
        Get a list of all tools and their details in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/nh/tools'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhToolsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhToolsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.NHTool]])
                res.nh_tools = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_nh_tools_tool_(self, request: operations.GetNhToolsToolRequest) -> operations.GetNhToolsToolResponse:
        r"""Single New Horizons tool
        Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNhToolsToolRequest, base_url, '/nh/tools/{tool}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetNhToolsToolRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNhToolsToolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NHTool])
                res.nh_tool = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    def get_villagers(self, request: operations.GetVillagersRequest) -> operations.GetVillagersResponse:
        r"""Villagers
        This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/villagers'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetVillagersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVillagersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Villager]])
                res.villagers = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error400])
                res.error400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401])
                res.error401 = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error500])
                res.error500 = out

        return res

    