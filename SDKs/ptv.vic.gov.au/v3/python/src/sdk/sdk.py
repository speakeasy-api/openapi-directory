"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .departures import Departures
from .directions import Directions
from .disruptions import Disruptions
from .fareestimate import FareEstimate
from .outlets import Outlets
from .patterns import Patterns
from .routes import Routes
from .routetypes import RouteTypes
from .runs import Runs
from .search import Search
from .stops import Stops

SERVERS = [
    "http://timetableapi.ptv.vic.gov.au",
    "https://timetableapi.ptv.vic.gov.au",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.
    
    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).
    
    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.
    
    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.
    
    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.
    
    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:
    
        base URL / version number / API name / query string
    The base URL is either:
      *  http://timetableapi.ptv.vic.gov.au
    or
      *  https://timetableapi.ptv.vic.gov.au
    
    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3
    
    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq
    
    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/
    * How to register for an API key and calculate a signature
    * PTV Timetable API V2 to V3 Migration Guide
    * Documentation for Version 2 of the PTV Timetable API
    * PTV Timetable API Data Quality Statement
    
    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
    
    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.
    """
    departures: Departures
    directions: Directions
    disruptions: Disruptions
    fare_estimate: FareEstimate
    outlets: Outlets
    patterns: Patterns
    route_types: RouteTypes
    routes: Routes
    runs: Runs
    search: Search
    stops: Stops

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.departures = Departures(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.directions = Directions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.disruptions = Disruptions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.fare_estimate = FareEstimate(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.outlets = Outlets(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.patterns = Patterns(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.route_types = RouteTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.routes = Routes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.runs = Runs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stops = Stops(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    