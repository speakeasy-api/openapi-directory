"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import grpctimeout as shared_grpctimeout
from ..shared import httptimeout as shared_httptimeout
from ..shared import tcptimeout as shared_tcptimeout
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListenerTimeout:
    r"""An object that represents timeouts for different protocols."""
    
    grpc: Optional[shared_grpctimeout.GrpcTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpc'), 'exclude': lambda f: f is None }})  
    http: Optional[shared_httptimeout.HTTPTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http'), 'exclude': lambda f: f is None }})  
    http2: Optional[shared_httptimeout.HTTPTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http2'), 'exclude': lambda f: f is None }})  
    tcp: Optional[shared_tcptimeout.TCPTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tcp'), 'exclude': lambda f: f is None }})  
    