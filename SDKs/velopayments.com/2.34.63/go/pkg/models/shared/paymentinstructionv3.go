// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentInstructionV3TransmissionTypeEnum - Optionally choose a specific transmission method for the payment
type PaymentInstructionV3TransmissionTypeEnum string

const (
	PaymentInstructionV3TransmissionTypeEnumSameDayAch PaymentInstructionV3TransmissionTypeEnum = "SAME_DAY_ACH"
	PaymentInstructionV3TransmissionTypeEnumWire       PaymentInstructionV3TransmissionTypeEnum = "WIRE"
	PaymentInstructionV3TransmissionTypeEnumAch        PaymentInstructionV3TransmissionTypeEnum = "ACH"
	PaymentInstructionV3TransmissionTypeEnumLocal      PaymentInstructionV3TransmissionTypeEnum = "LOCAL"
	PaymentInstructionV3TransmissionTypeEnumSwift      PaymentInstructionV3TransmissionTypeEnum = "SWIFT"
)

func (e *PaymentInstructionV3TransmissionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SAME_DAY_ACH":
		fallthrough
	case "WIRE":
		fallthrough
	case "ACH":
		fallthrough
	case "LOCAL":
		fallthrough
	case "SWIFT":
		*e = PaymentInstructionV3TransmissionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstructionV3TransmissionTypeEnum: %s", s)
	}
}

// PaymentInstructionV3 - Instruction for creating a payment
type PaymentInstructionV3 struct {
	// <p>Amount to send to Payee</p>
	// <p>The maximum payment amount is dependent on the currency</p>
	//
	Amount int64 `json:"amount"`
	// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
	Currency string `json:"currency"`
	// <p>Any value here will override the memo value in the parent payout</p>
	// <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
	//
	PaymentMemo *string `json:"paymentMemo,omitempty"`
	// <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
	// <p>The structure of the data will be dictated by the requirements of the payment rails</p>
	//
	PaymentMetadata *string `json:"paymentMetadata,omitempty"`
	// A reference identifier for the payor for the given payee payment
	PayorPaymentID *string `json:"payorPaymentId,omitempty"`
	// Your identifier for the payee
	RemoteID string `json:"remoteId"`
	// <p>The identifier for the remote payments system if not Velo</p>
	// <p>Should only be used after consultation with Velo Payments</p>
	//
	RemoteSystemID *string `json:"remoteSystemId,omitempty"`
	// Must match a valid source account name belonging to the payor
	SourceAccountName string `json:"sourceAccountName"`
	// Optionally choose a specific transmission method for the payment
	TransmissionType *PaymentInstructionV3TransmissionTypeEnum `json:"transmissionType,omitempty"`
}
