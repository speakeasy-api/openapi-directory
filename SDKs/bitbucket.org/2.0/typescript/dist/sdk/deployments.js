"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployments = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Teams are deploying code faster than ever, thanks to continuous
 *
 * @remarks
 * delivery practices and tools like Bitbucket Pipelines. Bitbucket
 * Deployments gives teams visibility into their deployment
 * environments and helps teams to track how far changes have
 * progressed in their deployment pipeline.
 *
 */
var Deployments = /** @class */ (function () {
    function Deployments(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Create an environment
     *
     * @remarks
     * Create an environment.
     */
    Deployments.prototype.createEnvironment = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateEnvironmentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/environments/", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateEnvironmentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deploymentEnvironment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [404, 409].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete an environment
     *
     * @remarks
     * Delete an environment
     */
    Deployments.prototype.deleteEnvironmentForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEnvironmentForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteEnvironmentForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a repository deploy key
     *
     * @remarks
     * This deletes a deploy key from a repository.
     *
     * Example:
     * ```
     * $ curl -XDELETE \
     * -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234
     * ```
     */
    Deployments.prototype.deleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [204, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a deploy key from a project
     *
     * @remarks
     * This deletes a deploy key from a project.
     *
     * Example:
     * ```
     * $ curl -XDELETE \
     * -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/1234
     * ```
     */
    Deployments.prototype.deleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a deployment
     *
     * @remarks
     * Retrieve a deployment
     */
    Deployments.prototype.getDeploymentForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetDeploymentForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetDeploymentForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List deployments
     *
     * @remarks
     * Find deployments
     */
    Deployments.prototype.getDeploymentsForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetDeploymentsForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deployments/", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetDeploymentsForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.paginatedDeployments = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PaginatedDeployments);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get an environment
     *
     * @remarks
     * Retrieve an environment
     */
    Deployments.prototype.getEnvironmentForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetEnvironmentForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetEnvironmentForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deploymentEnvironment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List environments
     *
     * @remarks
     * Find environments
     */
    Deployments.prototype.getEnvironmentsForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetEnvironmentsForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/environments/", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetEnvironmentsForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.paginatedEnvironments = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PaginatedEnvironments);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List repository deploy keys
     *
     * @remarks
     * Returns all deploy-keys belonging to a repository.
     *
     * Example:
     * ```
     * $ curl -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys
     *
     * Output:
     * {
     *     "pagelen": 10,
     *     "values": [
     *         {
     *             "id": 123,
     *             "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5",
     *             "label": "mykey",
     *             "type": "deploy_key",
     *             "created_on": "2018-08-15T23:50:59.993890+00:00",
     *             "repository": {
     *                 "full_name": "mleu/test",
     *                 "name": "test",
     *                 "type": "repository",
     *                 "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *             },
     *             "links":{
     *                 "self":{
     *                     "href": "https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123"
     *                 }
     *             }
     *             "last_used": null,
     *             "comment": "mleu@C02W454JHTD8"
     *         }
     *     ],
     *     "page": 1,
     *     "size": 1
     * }
     * ```
     */
    Deployments.prototype.getRepositoriesWorkspaceRepoSlugDeployKeys = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deploy-keys", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.paginatedDeployKeys = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PaginatedDeployKeys);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a repository deploy key
     *
     * @remarks
     * Returns the deploy key belonging to a specific key.
     *
     * Example:
     * ```
     * $ curl -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234
     *
     * Output:
     * {
     *     "comment": "mleu@C02W454JHTD8",
     *     "last_used": null,
     *     "links": {
     *         "self": {
     *             "href": https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234"
     *         }
     *     },
     *     "repository": {
     *         "full_name": "mleu/test",
     *         "name": "test",
     *         "type": "repository",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "label": "mykey",
     *     "created_on": "2018-08-15T23:50:59.993890+00:00",
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5",
     *     "id": 1234,
     *     "type": "deploy_key"
     * }
     * ```
     */
    Deployments.prototype.getRepositoriesWorkspaceRepoSlugDeployKeysKeyId = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deployKey = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List project deploy keys
     *
     * @remarks
     * Returns all deploy keys belonging to a project.
     *
     * Example:
     * ```
     * $ curl -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys
     *
     * Output:
     * {
     *     "pagelen":10,
     *     "values":[
     *         {
     *             "comment":"thakseth@C02W454JHTD8",
     *             "last_used":null,
     *             "links":{
     *                 "self":{
     *                     "href":"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234"
     *                 }
     *             },
     *             "label":"test",
     *             "project":{
     *                 "links":{
     *                     "self":{
     *                         "href":"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT"
     *                     }
     *                 },
     *                 "type":"project",
     *                 "name":"cooperative standard",
     *                 "key":"TEST_PROJECT",
     *                 "uuid":"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}"
     *             },
     *             "created_on":"2021-07-28T21:20:19.491721+00:00",
     *             "key":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r",
     *             "type":"project_deploy_key",
     *             "id":1234
     *         }
     *     ],
     *     "page":1,
     *     "size":1
     * }
     * ```
     */
    Deployments.prototype.getWorkspacesWorkspaceProjectsProjectKeyDeployKeys = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/workspaces/{workspace}/projects/{project_key}/deploy-keys", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.paginatedProjectDeployKeys = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PaginatedProjectDeployKeys);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a project deploy key
     *
     * @remarks
     * Returns the deploy key belonging to a specific key ID.
     *
     * Example:
     * ```
     * $ curl -H "Authorization <auth header>" \
     * https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234
     *
     * Output:
     * {
     *     "pagelen":10,
     *     "values":[
     *         {
     *             "comment":"thakseth@C02W454JHTD8",
     *             "last_used":null,
     *             "links":{
     *                 "self":{
     *                     "href":"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234"
     *                 }
     *             },
     *             "label":"test",
     *             "project":{
     *                 "links":{
     *                     "self":{
     *                         "href":"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT"
     *                     }
     *                 },
     *                 "type":"project",
     *                 "name":"cooperative standard",
     *                 "key":"TEST_PROJECT",
     *                 "uuid":"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}"
     *             },
     *             "created_on":"2021-07-28T21:20:19.491721+00:00",
     *             "key":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r",
     *             "type":"project_deploy_key",
     *             "id":1234
     *         }
     *     ],
     * }
     * ```
     */
    Deployments.prototype.getWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.projectDeployKey = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Add a repository deploy key
     *
     * @remarks
     * Create a new deploy key in a repository. Note: If authenticating a deploy key
     * with an OAuth consumer, any changes to the OAuth consumer will subsequently
     * invalidate the deploy key.
     *
     *
     * Example:
     * ```
     * $ curl -XPOST \
     * -H "Authorization <auth header>" \
     * -H "Content-type: application/json" \
     * https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys -d \
     * '{
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8",
     *     "label": "mydeploykey"
     * }'
     *
     * Output:
     * {
     *     "id": 123,
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5",
     *     "label": "mydeploykey",
     *     "type": "deploy_key",
     *     "created_on": "2018-08-15T23:50:59.993890+00:00",
     *     "repository": {
     *         "full_name": "mleu/test",
     *         "name": "test",
     *         "type": "repository",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "links":{
     *         "self":{
     *             "href": "https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123"
     *         }
     *     }
     *     "last_used": null,
     *     "comment": "mleu@C02W454JHTD8"
     * }
     * ```
     */
    Deployments.prototype.postRepositoriesWorkspaceRepoSlugDeployKeys = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostRepositoriesWorkspaceRepoSlugDeployKeysRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deploy-keys", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.PostRepositoriesWorkspaceRepoSlugDeployKeysSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PostRepositoriesWorkspaceRepoSlugDeployKeysResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deployKey = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 403].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a project deploy key
     *
     * @remarks
     * Create a new deploy key in a project.
     *
     * Example:
     * ```
     * $ curl -XPOST \
     * -H "Authorization <auth header>" \
     * -H "Content-type: application/json" \
     * https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/ -d \
     * '{
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8",
     *     "label": "mydeploykey"
     * }'
     *
     * Output:
     * {
     *     "comment": "mleu@C02W454JHTD8",
     *     "last_used": null,
     *     "links": {
     *         "self": {
     *             "href": "https://api.bitbucket.org/2.0/workspaces/testadfsa/projects/ASDF/deploy-keys/5/"
     *         }
     *     },
     *     "label": "myprojectkey",
     *     "project": {
     *         ...
     *     },
     *     "created_on": "2021-08-10T05:28:00.570859+00:00",
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5",
     *     "type": "project_deploy_key",
     *     "id": 5
     * }
     * ```
     */
    Deployments.prototype.postWorkspacesWorkspaceProjectsProjectKeyDeployKeys = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/workspaces/{workspace}/projects/{project_key}/deploy-keys", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.projectDeployKey = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a repository deploy key
     *
     * @remarks
     * Create a new deploy key in a repository.
     *
     * The same key needs to be passed in but the comment and label can change.
     *
     * Example:
     * ```
     * $ curl -XPUT \
     * -H "Authorization <auth header>" \
     * -H "Content-type: application/json" \
     * https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234 -d \
     * '{
     *     "label": "newlabel",
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 newcomment",
     * }'
     *
     * Output:
     * {
     *     "comment": "newcomment",
     *     "last_used": null,
     *     "links": {
     *         "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234"
     *         }
     *     },
     *     "repository": {
     *         "full_name": "mleu/test",
     *         "name": "test",
     *         "type": "repository",
     *         "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
     *     },
     *     "label": "newlabel",
     *     "created_on": "2018-08-15T23:50:59.993890+00:00",
     *     "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5",
     *     "id": 1234,
     *     "type": "deploy_key"
     * }
     * ```
     */
    Deployments.prototype.putRepositoriesWorkspaceRepoSlugDeployKeysKeyId = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deployKey = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case [400, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    break;
            }
            return res;
        });
    };
    /**
     * Update an environment
     *
     * @remarks
     * Update an environment
     */
    Deployments.prototype.updateEnvironmentForRepository = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateEnvironmentForRepositoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateEnvironmentForRepositoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 202:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    return Deployments;
}());
exports.Deployments = Deployments;
