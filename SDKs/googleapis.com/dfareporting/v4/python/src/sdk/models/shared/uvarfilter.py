"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UvarFilterMatchEnum(str, Enum):
    r"""Indicates how the filter should be matched to the values."""
    UNSPECIFIED = 'UNSPECIFIED'
    EXACT = 'EXACT'
    CONTAINS = 'CONTAINS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UvarFilter:
    r"""Defines the filtering on a single uvar."""
    
    complement: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Return rows which don't match this filter."""  
    index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})
    r"""Custom variable index the filter is applied to."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of resource this is, in this case dfareporting#uvarFilter."""  
    match: Optional[UvarFilterMatchEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match'), 'exclude': lambda f: f is None }})
    r"""Indicates how the filter should be matched to the values."""  
    values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})
    r"""Values to filter on."""  
    