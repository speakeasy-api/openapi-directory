/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderReturn - The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order.
 */
public class OrderReturn {
    /**
     * A collection of various money amounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_amounts")
    public OrderMoneyAmounts returnAmounts;
    public OrderReturn withReturnAmounts(OrderMoneyAmounts returnAmounts) {
        this.returnAmounts = returnAmounts;
        return this;
    }
    
    /**
     * A collection of references to discounts being returned for an order, including the total
     * applied discount amount to be returned. The discounts must reference a top-level discount ID
     * from the source order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_discounts")
    public OrderReturnDiscount[] returnDiscounts;
    public OrderReturn withReturnDiscounts(OrderReturnDiscount[] returnDiscounts) {
        this.returnDiscounts = returnDiscounts;
        return this;
    }
    
    /**
     * A collection of line items that are being returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_line_items")
    public OrderReturnLineItem[] returnLineItems;
    public OrderReturn withReturnLineItems(OrderReturnLineItem[] returnLineItems) {
        this.returnLineItems = returnLineItems;
        return this;
    }
    
    /**
     * A collection of service charges that are being returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_service_charges")
    public OrderReturnServiceCharge[] returnServiceCharges;
    public OrderReturn withReturnServiceCharges(OrderReturnServiceCharge[] returnServiceCharges) {
        this.returnServiceCharges = returnServiceCharges;
        return this;
    }
    
    /**
     * A collection of references to taxes being returned for an order, including the total
     * applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
     * order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_taxes")
    public OrderReturnTax[] returnTaxes;
    public OrderReturn withReturnTaxes(OrderReturnTax[] returnTaxes) {
        this.returnTaxes = returnTaxes;
        return this;
    }
    
    /**
     * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
     * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rounding_adjustment")
    public OrderRoundingAdjustment roundingAdjustment;
    public OrderReturn withRoundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
        this.roundingAdjustment = roundingAdjustment;
        return this;
    }
    
    /**
     * An order that contains the original sale of these return line items. This is unset
     * for unlinked returns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_order_id")
    public String sourceOrderId;
    public OrderReturn withSourceOrderId(String sourceOrderId) {
        this.sourceOrderId = sourceOrderId;
        return this;
    }
    
    /**
     * A unique ID that identifies the return only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderReturn withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
}
