<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ConsentInformationResponse200Json - Body of the JSON response for a successfull get consent request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ConsentInformationResponse200Json
{
    /**
     * A list of hyperlinks to be recognised by the TPP.
     * 
     * 
     * Links of type "account" and/or "cardAccount", depending on the nature of the consent.
     * 
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\HrefType> $links
     */
	#[\JMS\Serializer\Annotation\SerializedName('_links')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\HrefType>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $links = null;
    
    /**
     * Requested access services for a consent.
     * 
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountAccess $access
     */
	#[\JMS\Serializer\Annotation\SerializedName('access')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountAccess')]
    public AccountAccess $access;
    
    /**
     * This is the overall lifecycle status of the consent.
     * 
     * 
     * Valid values are:
     *   - 'received': The consent data have been received and are technically correct.
     *     The data is not authorised yet.
     *   - 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.
     *   - 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.
     *   - 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.
     *   - 'expired': The consent expired.
     *   - 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.
     *   - 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.
     * 
     * The ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface 
     * and has to be added to this API definition as well.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ConsentStatusEnum $consentStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('consentStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ConsentStatusEnum>')]
    public ConsentStatusEnum $consentStatus;
    
    /**
     * This field indicates the requested maximum frequency for an access without PSU involvement per day.
     * 
     * For a one-off access, this attribute is set to "1".
     * 
     * The frequency needs to be greater equal to one.
     * 
     * If not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4.
     * 
     * 
     * @var int $frequencyPerDay
     */
	#[\JMS\Serializer\Annotation\SerializedName('frequencyPerDay')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $frequencyPerDay;
    
    /**
     * This date is containing the date of the last action on the consent object either through
     * 
     * the XS2A interface or the PSU/ASPSP interface having an impact on the status.
     * 
     * 
     * @var \DateTime $lastActionDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastActionDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $lastActionDate;
    
    /**
     * "true", if the consent is for recurring access to the account data.
     * 
     * 
     * "false", if the consent is for one access to the account data.
     * 
     * 
     * @var bool $recurringIndicator
     */
	#[\JMS\Serializer\Annotation\SerializedName('recurringIndicator')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $recurringIndicator;
    
    /**
     * This parameter is defining a valid until date (including the mentioned date) for the requested consent. 
     * 
     * The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.
     * 
     * Future dates might get adjusted by ASPSP. 
     * 
     * If a maximal available date is requested, a date in far future is to be used: "9999-12-31". 
     * 
     * In both cases the consent object to be retrieved by the get consent request will contain the adjusted date.
     * 
     * 
     * @var \DateTime $validUntil
     */
	#[\JMS\Serializer\Annotation\SerializedName('validUntil')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $validUntil;
    
	public function __construct()
	{
		$this->links = null;
		$this->access = new \OpenAPI\OpenAPI\Models\Shared\AccountAccess();
		$this->consentStatus = \OpenAPI\OpenAPI\Models\Shared\ConsentStatusEnum::RECEIVED;
		$this->frequencyPerDay = 0;
		$this->lastActionDate = new \DateTime();
		$this->recurringIndicator = false;
		$this->validUntil = new \DateTime();
	}
}
