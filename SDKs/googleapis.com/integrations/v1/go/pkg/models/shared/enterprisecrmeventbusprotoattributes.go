// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmEventbusProtoAttributesDataTypeEnum - Things like URL, Email, Currency, Timestamp (rather than string, int64...)
type EnterpriseCrmEventbusProtoAttributesDataTypeEnum string

const (
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumDataTypeUnspecified EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "DATA_TYPE_UNSPECIFIED"
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumEmail               EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "EMAIL"
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumURL                 EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "URL"
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumCurrency            EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "CURRENCY"
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumTimestamp           EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "TIMESTAMP"
	EnterpriseCrmEventbusProtoAttributesDataTypeEnumDomainName          EnterpriseCrmEventbusProtoAttributesDataTypeEnum = "DOMAIN_NAME"
)

func (e EnterpriseCrmEventbusProtoAttributesDataTypeEnum) ToPointer() *EnterpriseCrmEventbusProtoAttributesDataTypeEnum {
	return &e
}

func (e *EnterpriseCrmEventbusProtoAttributesDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_TYPE_UNSPECIFIED":
		fallthrough
	case "EMAIL":
		fallthrough
	case "URL":
		fallthrough
	case "CURRENCY":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "DOMAIN_NAME":
		*e = EnterpriseCrmEventbusProtoAttributesDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoAttributesDataTypeEnum: %v", v)
	}
}

type EnterpriseCrmEventbusProtoAttributesSearchableEnum string

const (
	EnterpriseCrmEventbusProtoAttributesSearchableEnumUnspecified EnterpriseCrmEventbusProtoAttributesSearchableEnum = "UNSPECIFIED"
	EnterpriseCrmEventbusProtoAttributesSearchableEnumYes         EnterpriseCrmEventbusProtoAttributesSearchableEnum = "YES"
	EnterpriseCrmEventbusProtoAttributesSearchableEnumNo          EnterpriseCrmEventbusProtoAttributesSearchableEnum = "NO"
)

func (e EnterpriseCrmEventbusProtoAttributesSearchableEnum) ToPointer() *EnterpriseCrmEventbusProtoAttributesSearchableEnum {
	return &e
}

func (e *EnterpriseCrmEventbusProtoAttributesSearchableEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "YES":
		fallthrough
	case "NO":
		*e = EnterpriseCrmEventbusProtoAttributesSearchableEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoAttributesSearchableEnum: %v", v)
	}
}

// EnterpriseCrmEventbusProtoAttributes - Attributes are additional options that can be associated with each event property. For more information, see
type EnterpriseCrmEventbusProtoAttributes struct {
	// Things like URL, Email, Currency, Timestamp (rather than string, int64...)
	DataType *EnterpriseCrmEventbusProtoAttributesDataTypeEnum `json:"dataType,omitempty"`
	// Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
	DefaultValue *EnterpriseCrmEventbusProtoValueType `json:"defaultValue,omitempty"`
	// Required for event execution. The validation will be done by the event bus when the event is triggered.
	IsRequired *bool `json:"isRequired,omitempty"`
	// Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.
	IsSearchable *bool `json:"isSearchable,omitempty"`
	// The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
	LogSettings *EnterpriseCrmEventbusProtoLogSettings              `json:"logSettings,omitempty"`
	Searchable  *EnterpriseCrmEventbusProtoAttributesSearchableEnum `json:"searchable,omitempty"`
	// List of tasks that can view this property, if empty then all.
	TaskVisibility []string `json:"taskVisibility,omitempty"`
}
