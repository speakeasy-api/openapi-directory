"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Analytics:
    r"""Analytics Restv 2 Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_analytics_data_using_get(self, request: operations.GETAnalyticsDataUsingGETRequest) -> operations.GETAnalyticsDataUsingGETResponse:
        r"""Returns the results of executed query defined by the parameters passed in"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAnalyticsDataUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/analytics', request)
        
        query_params = utils.get_query_params(operations.GETAnalyticsDataUsingGETRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAnalyticsDataUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AnalyticsDataSwaggerModel]])
                res.analytics_data_swagger_models = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_data_count_using_get(self, request: operations.GETDataCountUsingGETRequest) -> operations.GETDataCountUsingGETResponse:
        r"""Returns the count of executed query"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETDataCountUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/analytics/count', request)
        
        query_params = utils.get_query_params(operations.GETDataCountUsingGETRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDataCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AnalyticsDataCountSwaggerModel])
                res.analytics_data_count_swagger_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_retention_using_get(self, request: operations.GETRetentionUsingGETRequest) -> operations.GETRetentionUsingGETResponse:
        r"""Returns the percentage of user retention over the last 30 days"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETRetentionUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/analytics/rollingRetention', request)
        
        query_params = utils.get_query_params(operations.GETRetentionUsingGETRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRetentionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AnalyticsDataCountSwaggerModel])
                res.analytics_data_count_swagger_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    