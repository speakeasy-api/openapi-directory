/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OnDemandRegions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a specific region to an On Demand page
   */
  addVodRegion(
    req: operations.AddVodRegionRequest,
    security: operations.AddVodRegionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVodRegionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVodRegionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions/{country}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVodRegionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVodRegionResponse =
        new operations.AddVodRegionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a specific region from an On Demand page
   */
  deleteVodRegion(
    req: operations.DeleteVodRegionRequest,
    security: operations.DeleteVodRegionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVodRegionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVodRegionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions/{country}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVodRegionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVodRegionResponse =
        new operations.DeleteVodRegionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a list of regions from an On Demand page
   */
  deleteVodRegions(
    req: operations.DeleteVodRegionsRequest,
    security: operations.DeleteVodRegionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVodRegionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVodRegionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVodRegionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVodRegionsResponse =
        new operations.DeleteVodRegionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandRegions = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion,
              resFieldDepth
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific On Demand region
   */
  getRegion(
    req: operations.GetRegionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRegionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRegionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/regions/{country}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRegionResponse =
        new operations.GetRegionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the On Demand regions
   */
  getRegions(
    config?: AxiosRequestConfig
  ): Promise<operations.GetRegionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ondemand/regions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRegionsResponse =
        new operations.GetRegionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandRegions = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific region of an On Demand page
   *
   * @remarks
   * Checks whether an On Demand page belongs to a region.
   */
  getVodRegion(
    req: operations.GetVodRegionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodRegionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodRegionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions/{country}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodRegionResponse =
        new operations.GetVodRegionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the regions of an On Demand page
   */
  getVodRegions(
    req: operations.GetVodRegionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodRegionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodRegionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodRegionsResponse =
        new operations.GetVodRegionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandRegions = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a list of regions to an On Demand page
   */
  setVodRegions(
    req: operations.SetVodRegionsRequest,
    security: operations.SetVodRegionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SetVodRegionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetVodRegionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/regions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SetVodRegionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetVodRegionsResponse =
        new operations.SetVodRegionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.onDemandRegion = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandRegion
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.region+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
