// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoreReleasesGetPublishErrorSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoreReleasesGetPublishErrorRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The id of the release
	ReleaseID float64 `pathParam:"style=simple,explode=false,name=release_id"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum string

const (
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumBadRequest          StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumConflict            StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumNotFound            StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumInternalServerError StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum) ToPointer() *StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// StoreReleasesGetPublishErrorDefaultApplicationJSON - Error
type StoreReleasesGetPublishErrorDefaultApplicationJSON struct {
	Code    StoreReleasesGetPublishErrorDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                                     `json:"message"`
}

// StoreReleasesGetPublishError200ApplicationJSON - ReleasePublishErrorResponse
type StoreReleasesGetPublishError200ApplicationJSON struct {
	// boolean property to tell if logs are available for download
	IsLogAvailable *bool `json:"is_log_available,omitempty"`
	// error Details
	Message *string `json:"message,omitempty"`
}

type StoreReleasesGetPublishErrorResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoreReleasesGetPublishError200ApplicationJSONObject *StoreReleasesGetPublishError200ApplicationJSON
	// Error
	StoreReleasesGetPublishErrorDefaultApplicationJSONObject *StoreReleasesGetPublishErrorDefaultApplicationJSON
}
