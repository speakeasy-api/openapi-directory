"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import structtype as shared_structtype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DataTypeTypeCodeEnum(str, Enum):
    r"""Required. The TypeCode for this type."""
    TYPE_CODE_UNSPECIFIED = 'TYPE_CODE_UNSPECIFIED'
    FLOAT64 = 'FLOAT64'
    TIMESTAMP = 'TIMESTAMP'
    STRING = 'STRING'
    ARRAY = 'ARRAY'
    STRUCT = 'STRUCT'
    CATEGORY = 'CATEGORY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataType:
    r"""Indicated the type of data that can be stored in a structured data entity (e.g. a table)."""
    
    list_element_type: Optional[DataType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listElementType'), 'exclude': lambda f: f is None }})
    r"""Indicated the type of data that can be stored in a structured data entity (e.g. a table)."""  
    nullable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nullable'), 'exclude': lambda f: f is None }})
    r"""If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string."""  
    struct_type: Optional[shared_structtype.StructType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structType'), 'exclude': lambda f: f is None }})
    r"""`StructType` defines the DataType-s of a STRUCT type."""  
    time_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFormat'), 'exclude': lambda f: f is None }})
    r"""If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used."""  
    type_code: Optional[DataTypeTypeCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeCode'), 'exclude': lambda f: f is None }})
    r"""Required. The TypeCode for this type."""  
    