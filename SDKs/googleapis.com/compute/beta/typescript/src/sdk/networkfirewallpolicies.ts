/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class NetworkFirewallPolicies {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Inserts an association for the specified firewall policy.
   */
  computeNetworkFirewallPoliciesAddAssociation(
    req: operations.ComputeNetworkFirewallPoliciesAddAssociationRequest,
    security: operations.ComputeNetworkFirewallPoliciesAddAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesAddAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesAddAssociationRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firewallPolicyAssociation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesAddAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesAddAssociationResponse =
        new operations.ComputeNetworkFirewallPoliciesAddAssociationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a rule into a firewall policy.
   */
  computeNetworkFirewallPoliciesAddRule(
    req: operations.ComputeNetworkFirewallPoliciesAddRuleRequest,
    security: operations.ComputeNetworkFirewallPoliciesAddRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesAddRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesAddRuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firewallPolicyRule",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesAddRuleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesAddRuleResponse =
        new operations.ComputeNetworkFirewallPoliciesAddRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copies rules to the specified firewall policy.
   */
  computeNetworkFirewallPoliciesCloneRules(
    req: operations.ComputeNetworkFirewallPoliciesCloneRulesRequest,
    security: operations.ComputeNetworkFirewallPoliciesCloneRulesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesCloneRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesCloneRulesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesCloneRulesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesCloneRulesResponse =
        new operations.ComputeNetworkFirewallPoliciesCloneRulesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified policy.
   */
  computeNetworkFirewallPoliciesDelete(
    req: operations.ComputeNetworkFirewallPoliciesDeleteRequest,
    security: operations.ComputeNetworkFirewallPoliciesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesDeleteResponse =
        new operations.ComputeNetworkFirewallPoliciesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified network firewall policy.
   */
  computeNetworkFirewallPoliciesGet(
    req: operations.ComputeNetworkFirewallPoliciesGetRequest,
    security: operations.ComputeNetworkFirewallPoliciesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesGetResponse =
        new operations.ComputeNetworkFirewallPoliciesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallPolicy = utils.objectToClass(
              httpRes?.data,
              shared.FirewallPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an association with the specified name.
   */
  computeNetworkFirewallPoliciesGetAssociation(
    req: operations.ComputeNetworkFirewallPoliciesGetAssociationRequest,
    security: operations.ComputeNetworkFirewallPoliciesGetAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesGetAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesGetAssociationRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesGetAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesGetAssociationResponse =
        new operations.ComputeNetworkFirewallPoliciesGetAssociationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallPolicyAssociation = utils.objectToClass(
              httpRes?.data,
              shared.FirewallPolicyAssociation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
   */
  computeNetworkFirewallPoliciesGetIamPolicy(
    req: operations.ComputeNetworkFirewallPoliciesGetIamPolicyRequest,
    security: operations.ComputeNetworkFirewallPoliciesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesGetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesGetIamPolicyResponse =
        new operations.ComputeNetworkFirewallPoliciesGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a rule of the specified priority.
   */
  computeNetworkFirewallPoliciesGetRule(
    req: operations.ComputeNetworkFirewallPoliciesGetRuleRequest,
    security: operations.ComputeNetworkFirewallPoliciesGetRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesGetRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesGetRuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesGetRuleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesGetRuleResponse =
        new operations.ComputeNetworkFirewallPoliciesGetRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallPolicyRule = utils.objectToClass(
              httpRes?.data,
              shared.FirewallPolicyRule
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new policy in the specified project using the data included in the request.
   */
  computeNetworkFirewallPoliciesInsert(
    req: operations.ComputeNetworkFirewallPoliciesInsertRequest,
    security: operations.ComputeNetworkFirewallPoliciesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firewallPolicy",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesInsertResponse =
        new operations.ComputeNetworkFirewallPoliciesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the policies that have been configured for the specified project.
   */
  computeNetworkFirewallPoliciesList(
    req: operations.ComputeNetworkFirewallPoliciesListRequest,
    security: operations.ComputeNetworkFirewallPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesListResponse =
        new operations.ComputeNetworkFirewallPoliciesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallPolicyList = utils.objectToClass(
              httpRes?.data,
              shared.FirewallPolicyList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches the specified policy with the data included in the request.
   */
  computeNetworkFirewallPoliciesPatch(
    req: operations.ComputeNetworkFirewallPoliciesPatchRequest,
    security: operations.ComputeNetworkFirewallPoliciesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firewallPolicy1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesPatchResponse =
        new operations.ComputeNetworkFirewallPoliciesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a rule of the specified priority.
   */
  computeNetworkFirewallPoliciesPatchRule(
    req: operations.ComputeNetworkFirewallPoliciesPatchRuleRequest,
    security: operations.ComputeNetworkFirewallPoliciesPatchRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesPatchRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesPatchRuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "firewallPolicyRule",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeNetworkFirewallPoliciesPatchRuleSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesPatchRuleResponse =
        new operations.ComputeNetworkFirewallPoliciesPatchRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes an association for the specified firewall policy.
   */
  computeNetworkFirewallPoliciesRemoveAssociation(
    req: operations.ComputeNetworkFirewallPoliciesRemoveAssociationRequest,
    security: operations.ComputeNetworkFirewallPoliciesRemoveAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesRemoveAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeNetworkFirewallPoliciesRemoveAssociationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesRemoveAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesRemoveAssociationResponse =
        new operations.ComputeNetworkFirewallPoliciesRemoveAssociationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a rule of the specified priority.
   */
  computeNetworkFirewallPoliciesRemoveRule(
    req: operations.ComputeNetworkFirewallPoliciesRemoveRuleRequest,
    security: operations.ComputeNetworkFirewallPoliciesRemoveRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesRemoveRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesRemoveRuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesRemoveRuleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesRemoveRuleResponse =
        new operations.ComputeNetworkFirewallPoliciesRemoveRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy.
   */
  computeNetworkFirewallPoliciesSetIamPolicy(
    req: operations.ComputeNetworkFirewallPoliciesSetIamPolicyRequest,
    security: operations.ComputeNetworkFirewallPoliciesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeNetworkFirewallPoliciesSetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "globalSetPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesSetIamPolicyResponse =
        new operations.ComputeNetworkFirewallPoliciesSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource.
   */
  computeNetworkFirewallPoliciesTestIamPermissions(
    req: operations.ComputeNetworkFirewallPoliciesTestIamPermissionsRequest,
    security: operations.ComputeNetworkFirewallPoliciesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeNetworkFirewallPoliciesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeNetworkFirewallPoliciesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeNetworkFirewallPoliciesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeNetworkFirewallPoliciesTestIamPermissionsResponse =
        new operations.ComputeNetworkFirewallPoliciesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
