"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandEssentials:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_vod(self, request: operations.CreateVodRequest) -> operations.CreateVodResponse:
        r"""Create an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateVodRequest, base_url, '/users/{user_id}/ondemand/pages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out

        return res

    def create_vod_alt1(self, request: operations.CreateVodAlt1RequestBody) -> operations.CreateVodAlt1Response:
        r"""Create an On Demand page"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/ondemand/pages'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVodAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out

        return res

    def delete_vod_draft(self, request: operations.DeleteVodDraftRequest, security: operations.DeleteVodDraftSecurity) -> operations.DeleteVodDraftResponse:
        r"""Delete a draft of an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVodDraftRequest, base_url, '/ondemand/pages/{ondemand_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVodDraftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_vod(self, request: operations.EditVodRequest, security: operations.EditVodSecurity) -> operations.EditVodResponse:
        r"""Edit an On Demand page
        Enable preorders or publish the page.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditVodRequest, base_url, '/ondemand/pages/{ondemand_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditVodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_user_vods(self, request: operations.GetUserVodsRequest) -> operations.GetUserVodsResponse:
        r"""Get all the On Demand pages of a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserVodsRequest, base_url, '/users/{user_id}/ondemand/pages', request)
        
        query_params = utils.get_query_params(operations.GetUserVodsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserVodsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandPage]])
                res.on_demand_pages = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_user_vods_alt1(self, request: operations.GetUserVodsAlt1Request) -> operations.GetUserVodsAlt1Response:
        r"""Get all the On Demand pages of a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/ondemand/pages'
        
        query_params = utils.get_query_params(operations.GetUserVodsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserVodsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandPage]])
                res.on_demand_pages = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod(self, request: operations.GetVodRequest) -> operations.GetVodResponse:
        r"""Get a specific On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodRequest, base_url, '/ondemand/pages/{ondemand_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    