<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PayoutInstrument - This type provides details about the seller's account that received (or is scheduled to receive) a payout.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PayoutInstrument
{
    /**
     * This value is the last four digits of the account that the seller uses to receive the payout. This may be the last four digits of a bank account, a debit card, or a payment processor account such as Payoneer.
     * 
     * @var ?string $accountLastFourDigits
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountLastFourDigits')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountLastFourDigits = null;
    
    /**
     * This value indicates the type of account that received the payout. The value returned in this field may be:<br><ul><li><code>BANK</code>: indicates that the payout was made to a seller's bank account.</li><li><code>CARD</code>: indicates that the payout went to a seller's debit card</li><li>The name of a digital wallet provider or payment processor (e.g., <code>PAYONEER</code>)</li></ul>
     * 
     * @var ?string $instrumentType
     */
	#[\JMS\Serializer\Annotation\SerializedName('instrumentType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $instrumentType = null;
    
    /**
     * When <b>instrumentType</b> returns <code>BANK</code>, this value is the seller-provided nickname that the seller uses to represent the bank account that receives the payout.<br><br>When <b>instrumentType</b> returns <code>CARD</code>, this value is the debit card network for the debit card that receives the payout.<br><br>When <b>instrumentType</b> returns a provider of digital wallet or payment processing services, the value returned is the name of the service provider (e.g., <code>PAYONEER</code>).
     * 
     * @var ?string $nickname
     */
	#[\JMS\Serializer\Annotation\SerializedName('nickname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $nickname = null;
    
	public function __construct()
	{
		$this->accountLastFourDigits = null;
		$this->instrumentType = null;
		$this->nickname = null;
	}
}
