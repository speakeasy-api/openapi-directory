<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ItemVariationLocationOverrides - Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ItemVariationLocationOverrides
{
    /**
     * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
     * 
     * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
     * 
     * This value is always an integer.
     * 
     * @var ?int $inventoryAlertThreshold
     */
	#[\JMS\Serializer\Annotation\SerializedName('inventory_alert_threshold')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $inventoryAlertThreshold = null;
    
    /**
     * Indicates whether the `CatalogItemVariation` displays an alert when its inventory
     * 
     * quantity is less than or equal to its `inventory_alert_threshold`.
     * 
     * @var ?string $inventoryAlertType
     */
	#[\JMS\Serializer\Annotation\SerializedName('inventory_alert_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $inventoryAlertType = null;
    
    /**
     * The ID of the `Location`. This can include locations that are deactivated.
     * 
     * @var ?string $locationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('location_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $locationId = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $priceMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('price_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $priceMoney = null;
    
    /**
     * The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
     * 
     * @var ?string $pricingType
     */
	#[\JMS\Serializer\Annotation\SerializedName('pricing_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pricingType = null;
    
    /**
     * If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
     * 
     * @var ?bool $trackInventory
     */
	#[\JMS\Serializer\Annotation\SerializedName('track_inventory')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $trackInventory = null;
    
	public function __construct()
	{
		$this->inventoryAlertThreshold = null;
		$this->inventoryAlertType = null;
		$this->locationId = null;
		$this->priceMoney = null;
		$this->pricingType = null;
		$this->trackInventory = null;
	}
}
