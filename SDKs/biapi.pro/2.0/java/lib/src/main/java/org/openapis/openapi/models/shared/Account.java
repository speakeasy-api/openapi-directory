/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Account - Successful DELETE on Account resource
 */
public class Account {
    /**
     * Balance of the account
     */
    @JsonProperty("balance")
    public Float balance;

    public Account withBalance(Float balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * This account has been bookmarked by user
     */
    @JsonProperty("bookmarked")
    public Long bookmarked;

    public Account withBookmarked(Long bookmarked) {
        this.bookmarked = bookmarked;
        return this;
    }
    
    /**
     * Amount of coming operations not yet debited
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coming")
    public Float coming;

    public Account withComing(Float coming) {
        this.coming = coming;
        return this;
    }
    
    /**
     * Name of the company holding the employee savings of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;

    public Account withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * Account currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public java.util.Map<String, Object> currency;

    public Account withCurrency(java.util.Map<String, Object> currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * This account is not found on the website anymore
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deleted")
    public OffsetDateTime deleted;

    public Account withDeleted(OffsetDateTime deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * This account has been deleted by user and will not be synchronized anymore
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("disabled")
    public OffsetDateTime disabled;

    public Account withDisabled(OffsetDateTime disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Display this account in accounts list
     */
    @JsonProperty("display")
    public Boolean display;

    public Account withDisplay(Boolean display) {
        this.display = display;
        return this;
    }
    
    /**
     * If the last update has failed, the error code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public String error;

    public Account withError(String error) {
        this.error = error;
        return this;
    }
    
    /**
     * Account IBAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    public String iban;

    public Account withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     * ID of the account
     */
    @JsonProperty("id")
    public Long id;

    public Account withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the related connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_connection")
    public Long idConnection;

    public Account withIdConnection(Long idConnection) {
        this.idConnection = idConnection;
        return this;
    }
    
    /**
     * Id of the parent account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_parent")
    public Long idParent;

    public Account withIdParent(Long idParent) {
        this.idParent = idParent;
        return this;
    }
    
    /**
     * ID of the related connection source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_source")
    public Long idSource;

    public Account withIdSource(Long idSource) {
        this.idSource = idSource;
        return this;
    }
    
    /**
     * ID of the account type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_type")
    public Long idType;

    public Account withIdType(Long idType) {
        this.idType = idType;
        return this;
    }
    
    /**
     * ID of the related user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_user")
    public Long idUser;

    public Account withIdUser(Long idUser) {
        this.idUser = idUser;
        return this;
    }
    
    /**
     * Last successful update of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_update")
    public OffsetDateTime lastUpdate;

    public Account withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    /**
     * Name of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Account withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Account number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;

    public Account withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Opening date of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("opening_date")
    public LocalDate openingDate;

    public Account withOpeningDate(LocalDate openingDate) {
        this.openingDate = openingDate;
        return this;
    }
    
    /**
     * Original name of the account on the bank
     */
    @JsonProperty("original_name")
    public String originalName;

    public Account withOriginalName(String originalName) {
        this.originalName = originalName;
        return this;
    }
    
    /**
     * Relationship between the credentials owner and the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownership")
    public String ownership;

    public Account withOwnership(String ownership) {
        this.ownership = ownership;
        return this;
    }
    
    /**
     * Account usage (if not set by the user, displays the value of original_usage)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public String usage;

    public Account withUsage(String usage) {
        this.usage = usage;
        return this;
    }
    
    /**
     * Account webid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webid")
    public String webid;

    public Account withWebid(String webid) {
        this.webid = webid;
        return this;
    }
    
    public Account(@JsonProperty("balance") Float balance, @JsonProperty("bookmarked") Long bookmarked, @JsonProperty("display") Boolean display, @JsonProperty("id") Long id, @JsonProperty("original_name") String originalName) {
        this.balance = balance;
        this.bookmarked = bookmarked;
        this.display = display;
        this.id = id;
        this.originalName = originalName;
  }
}
