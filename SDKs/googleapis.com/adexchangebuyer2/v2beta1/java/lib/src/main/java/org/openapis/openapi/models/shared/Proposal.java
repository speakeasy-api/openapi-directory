/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Proposal - Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
 */
public class Proposal {
    /**
     * Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billedBuyer")
    public Buyer billedBuyer;
    public Proposal withBilledBuyer(Buyer billedBuyer) {
        this.billedBuyer = billedBuyer;
        return this;
    }
    
    /**
     * Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer")
    public Buyer buyer;
    public Proposal withBuyer(Buyer buyer) {
        this.buyer = buyer;
        return this;
    }
    
    /**
     * Contact information for the buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerContacts")
    public ContactInformation[] buyerContacts;
    public Proposal withBuyerContacts(ContactInformation[] buyerContacts) {
        this.buyerContacts = buyerContacts;
        return this;
    }
    
    /**
     * Buyers are allowed to store certain types of private data in a proposal/deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerPrivateData")
    public PrivateData buyerPrivateData;
    public Proposal withBuyerPrivateData(PrivateData buyerPrivateData) {
        this.buyerPrivateData = buyerPrivateData;
        return this;
    }
    
    /**
     * The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deals")
    public Deal[] deals;
    public Proposal withDeals(Deal[] deals) {
        this.deals = deals;
        return this;
    }
    
    /**
     * The name for the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Proposal withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. True if the proposal is being renegotiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRenegotiating")
    public Boolean isRenegotiating;
    public Proposal withIsRenegotiating(Boolean isRenegotiating) {
        this.isRenegotiating = isRenegotiating;
        return this;
    }
    
    /**
     * Output only. True, if the buyside inventory setup is complete for this proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSetupComplete")
    public Boolean isSetupComplete;
    public Proposal withIsSetupComplete(Boolean isSetupComplete) {
        this.isSetupComplete = isSetupComplete;
        return this;
    }
    
    /**
     * Output only. The role of the last user that either updated the proposal or left a comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdaterOrCommentorRole")
    public ProposalLastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole;
    public Proposal withLastUpdaterOrCommentorRole(ProposalLastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole) {
        this.lastUpdaterOrCommentorRole = lastUpdaterOrCommentorRole;
        return this;
    }
    
    /**
     * Output only. The notes associated with this proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public Note[] notes;
    public Proposal withNotes(Note[] notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Output only. Indicates whether the buyer/seller created the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originatorRole")
    public ProposalOriginatorRoleEnum originatorRole;
    public Proposal withOriginatorRole(ProposalOriginatorRoleEnum originatorRole) {
        this.originatorRole = originatorRole;
        return this;
    }
    
    /**
     * Output only. Private auction ID if this proposal is a private auction proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateAuctionId")
    public String privateAuctionId;
    public Proposal withPrivateAuctionId(String privateAuctionId) {
        this.privateAuctionId = privateAuctionId;
        return this;
    }
    
    /**
     * Output only. The unique ID of the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalId")
    public String proposalId;
    public Proposal withProposalId(String proposalId) {
        this.proposalId = proposalId;
        return this;
    }
    
    /**
     * Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalRevision")
    public String proposalRevision;
    public Proposal withProposalRevision(String proposalRevision) {
        this.proposalRevision = proposalRevision;
        return this;
    }
    
    /**
     * Output only. The current state of the proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalState")
    public ProposalProposalStateEnum proposalState;
    public Proposal withProposalState(ProposalProposalStateEnum proposalState) {
        this.proposalState = proposalState;
        return this;
    }
    
    /**
     * Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seller")
    public Seller seller;
    public Proposal withSeller(Seller seller) {
        this.seller = seller;
        return this;
    }
    
    /**
     * Output only. Contact information for the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerContacts")
    public ContactInformation[] sellerContacts;
    public Proposal withSellerContacts(ContactInformation[] sellerContacts) {
        this.sellerContacts = sellerContacts;
        return this;
    }
    
    /**
     * Output only. The terms and conditions set by the publisher for this proposal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termsAndConditions")
    public String termsAndConditions;
    public Proposal withTermsAndConditions(String termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }
    
    /**
     * Output only. The time when the proposal was last revised.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Proposal withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
