<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CreateOpenIdIdpConfigRequest - Request model for creating an OpenID Connect IDP configuration
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CreateOpenIdIdpConfigRequest
{
    /**
     * URL of the authorization endpoint
     * 
     * @var string $authorizationEndPointUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizationEndPointUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $authorizationEndPointUrl;
    
    /**
     * ID of the OpenID client
     * 
     * @var string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientId;
    
    /**
     * Secret, which client uses at authentication.
     * 
     * @var string $clientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientSecret;
    
    /**
     * Name of the claim which is used for the user mapping fallback.
     * 
     * @var ?string $fallbackMappingClaim
     */
	#[\JMS\Serializer\Annotation\SerializedName('fallbackMappingClaim')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fallbackMappingClaim = null;
    
    /**
     * &#128640; Since v4.11.0
     * 
     * 
     * Flow, which is used at authentication
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CreateOpenIdIdpConfigRequestFlowEnum $flow
     */
	#[\JMS\Serializer\Annotation\SerializedName('flow')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CreateOpenIdIdpConfigRequestFlowEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateOpenIdIdpConfigRequestFlowEnum $flow = null;
    
    /**
     * Issuer identifier of the IDP
     * 
     * 
     * The value is a case sensitive URL.
     * 
     * @var string $issuer
     */
	#[\JMS\Serializer\Annotation\SerializedName('issuer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issuer;
    
    /**
     * URL of the JWKS endpoint
     * 
     * @var string $jwksEndPointUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('jwksEndPointUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $jwksEndPointUrl;
    
    /**
     * Name of the claim which is used for the user mapping.
     * 
     * @var string $mappingClaim
     */
	#[\JMS\Serializer\Annotation\SerializedName('mappingClaim')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mappingClaim;
    
    /**
     * Name of the IDP
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * PKCE code challenge method.
     * 
     * 
     * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
     * 
     * @var ?string $pkceChallengeMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('pkceChallengeMethod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pkceChallengeMethod = null;
    
    /**
     * Determines whether PKCE is enabled.
     * 
     * 
     * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
     * 
     * @var ?bool $pkceEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('pkceEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $pkceEnabled = null;
    
    /**
     * URIs, to which a user is redirected after authorization.
     * 
     * @var array<string> $redirectUris
     */
	#[\JMS\Serializer\Annotation\SerializedName('redirectUris')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $redirectUris;
    
    /**
     * List of requested scopes
     * 
     * @var array<string> $scopes
     */
	#[\JMS\Serializer\Annotation\SerializedName('scopes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $scopes;
    
    /**
     * URL of the token endpoint
     * 
     * @var string $tokenEndPointUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('tokenEndPointUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tokenEndPointUrl;
    
    /**
     * Determines if a DRACOON account is automatically created for a new user
     * 
     * 
     * who successfully logs on with his / her AD / IDP account.
     * 
     * @var ?bool $userImportEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('userImportEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $userImportEnabled = null;
    
    /**
     * User group that is assigned to users who are created by automatic import.
     * 
     * 
     * Reset with `0`
     * 
     * @var ?int $userImportGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('userImportGroup')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $userImportGroup = null;
    
    /**
     * URL of the user info endpoint
     * 
     * @var string $userInfoEndPointUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('userInfoEndPointUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $userInfoEndPointUrl;
    
    /**
     * &#128640; Since v4.23.0
     * 
     * 
     * Source, which is used to get user information at the import or update of a user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CreateOpenIdIdpConfigRequestUserInfoSourceEnum $userInfoSource
     */
	#[\JMS\Serializer\Annotation\SerializedName('userInfoSource')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CreateOpenIdIdpConfigRequestUserInfoSourceEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateOpenIdIdpConfigRequestUserInfoSourceEnum $userInfoSource = null;
    
    /**
     * URL of the user management UI.
     * 
     * 
     * Use empty string to remove.
     * 
     * @var ?string $userManagementUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('userManagementUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userManagementUrl = null;
    
    /**
     * Determines if the DRACOON account is updated with data from AD / IDP.
     * 
     * 
     * For OpenID Connect, the scopes `email` and `profile` are needed.
     * 
     * @var ?bool $userUpdateEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('userUpdateEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $userUpdateEnabled = null;
    
	public function __construct()
	{
		$this->authorizationEndPointUrl = "";
		$this->clientId = "";
		$this->clientSecret = "";
		$this->fallbackMappingClaim = null;
		$this->flow = null;
		$this->issuer = "";
		$this->jwksEndPointUrl = "";
		$this->mappingClaim = "";
		$this->name = "";
		$this->pkceChallengeMethod = null;
		$this->pkceEnabled = null;
		$this->redirectUris = [];
		$this->scopes = [];
		$this->tokenEndPointUrl = "";
		$this->userImportEnabled = null;
		$this->userImportGroup = null;
		$this->userInfoEndPointUrl = "";
		$this->userInfoSource = null;
		$this->userManagementUrl = null;
		$this->userUpdateEnabled = null;
	}
}
