/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Transcript {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Transcript By Id
   *
   * @remarks
   * Returns the transcript for a completed transcription job. Transcript can be returned as either JSON or plaintext format. Transcript output format can be specified in the `Accept` header. Returns JSON by default.
   * ***
   * Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete transcript. This is rare, but not impossible. To guarantee 100% completeness, we recommend capturing all final hypothesis when you receive them on the client.
   *
   */
  getTranscriptById(
    req: operations.GetTranscriptByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTranscriptByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTranscriptByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/jobs/{id}/transcript",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTranscriptByIdResponse =
        new operations.GetTranscriptByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.rev.transcript.v1.0+json`
            )
          ) {
            res.transcript = utils.objectToClass(
              httpRes?.data,
              shared.Transcript
            );
          }
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.transcriptText = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getTranscriptById401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTranscriptById401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getTranscriptById404ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTranscriptById404ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getTranscriptById406ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTranscriptById406ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getTranscriptById409ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTranscriptById409ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }
}
