/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Search {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Low Bandwith Category Search
   */
  getSearchVersionNumberCSCategoryExt(
    req: operations.GetSearchVersionNumberCSCategoryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberCSCategoryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberCSCategoryExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/cS/{category}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberCSCategoryExtResponse =
        new operations.GetSearchVersionNumberCSCategoryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Category Search
   */
  getSearchVersionNumberCategorySearchQueryExt(
    req: operations.GetSearchVersionNumberCategorySearchQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberCategorySearchQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberCategorySearchQueryExtRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/categorySearch/{query}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberCategorySearchQueryExtResponse =
        new operations.GetSearchVersionNumberCategorySearchQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Geometry Search
   */
  getSearchVersionNumberGeometrySearchQueryExt(
    req: operations.GetSearchVersionNumberGeometrySearchQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberGeometrySearchQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberGeometrySearchQueryExtRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/geometrySearch/{query}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberGeometrySearchQueryExtResponse =
        new operations.GetSearchVersionNumberGeometrySearchQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Nearby Search
   */
  getSearchVersionNumberNearbySearchExt(
    req: operations.GetSearchVersionNumberNearbySearchExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberNearbySearchExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberNearbySearchExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/nearbySearch/.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberNearbySearchExtResponse =
        new operations.GetSearchVersionNumberNearbySearchExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Points of Interest Search
   */
  getSearchVersionNumberPoiSearchQueryExt(
    req: operations.GetSearchVersionNumberPoiSearchQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberPoiSearchQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberPoiSearchQueryExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/poiSearch/{query}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberPoiSearchQueryExtResponse =
        new operations.GetSearchVersionNumberPoiSearchQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Routed Search
   */
  getSearchVersionNumberRoutedSearchQueryPositionHeadingExt(
    req: operations.GetSearchVersionNumberRoutedSearchQueryPositionHeadingExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberRoutedSearchQueryPositionHeadingExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSearchVersionNumberRoutedSearchQueryPositionHeadingExtRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/routedSearch/{query}/{position}/{heading}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberRoutedSearchQueryPositionHeadingExtResponse =
        new operations.GetSearchVersionNumberRoutedSearchQueryPositionHeadingExtResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Low bandwith Search
   */
  getSearchVersionNumberSQueryExt(
    req: operations.GetSearchVersionNumberSQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberSQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberSQueryExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/s/{query}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberSQueryExtResponse =
        new operations.GetSearchVersionNumberSQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Fuzzy Search
   */
  getSearchVersionNumberSearchQueryExt(
    req: operations.GetSearchVersionNumberSearchQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberSearchQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberSearchQueryExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/search/{query}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberSearchQueryExtResponse =
        new operations.GetSearchVersionNumberSearchQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Geometry Search
   */
  postSearchVersionNumberGeometrySearchQueryExt(
    req: operations.PostSearchVersionNumberGeometrySearchQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSearchVersionNumberGeometrySearchQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSearchVersionNumberGeometrySearchQueryExtRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/geometrySearch/{query}.{ext}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSearchVersionNumberGeometrySearchQueryExtResponse =
        new operations.PostSearchVersionNumberGeometrySearchQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Along Route Search
   */
  postSearchVersionNumberSearchAlongRouteQueryExt(
    req: operations.PostSearchVersionNumberSearchAlongRouteQueryExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSearchVersionNumberSearchAlongRouteQueryExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostSearchVersionNumberSearchAlongRouteQueryExtRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/searchAlongRoute/{query}.{ext}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSearchVersionNumberSearchAlongRouteQueryExtResponse =
        new operations.PostSearchVersionNumberSearchAlongRouteQueryExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }
}
