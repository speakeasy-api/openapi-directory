"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v1money as shared_v1money
from ..shared import v1paymentdiscount as shared_v1paymentdiscount
from ..shared import v1paymentitemdetail as shared_v1paymentitemdetail
from ..shared import v1paymentmodifier as shared_v1paymentmodifier
from ..shared import v1paymenttax as shared_v1paymenttax
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V1PaymentItemization:
    r"""Payment include an` itemizations` field that lists the items purchased,
    along with associated fees, modifiers, and discounts. Each itemization has an
    `itemization_type` field that indicates which of the following the itemization
    represents:
    
    <ul>
    <li>An item variation from the merchant's item library</li>
    <li>A custom monetary amount</li>
    <li>
    An action performed on a Square gift card, such as activating or
    reloading it.
    </li>
    </ul>
    
    *Note**: itemization information included in a `Payment` object reflects
    details collected **at the time of the payment**. Details such as the name or
    price of items might have changed since the payment was processed.
    """
    
    discount_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount_money'), 'exclude': lambda f: f is None }})  
    discounts: Optional[list[shared_v1paymentdiscount.V1PaymentDiscount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discounts'), 'exclude': lambda f: f is None }})
    r"""All discounts applied to this itemization."""  
    gross_sales_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_sales_money'), 'exclude': lambda f: f is None }})  
    item_detail: Optional[shared_v1paymentitemdetail.V1PaymentItemDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_detail'), 'exclude': lambda f: f is None }})
    r"""V1PaymentItemDetail"""  
    item_variation_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_variation_name'), 'exclude': lambda f: f is None }})
    r"""The name of the item variation purchased, if any."""  
    itemization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemization_type'), 'exclude': lambda f: f is None }})
    r"""The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT"""  
    modifiers: Optional[list[shared_v1paymentmodifier.V1PaymentModifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiers'), 'exclude': lambda f: f is None }})
    r"""All modifier options applied to this itemization."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The item's name."""  
    net_sales_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_sales_money'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes entered by the merchant about the item at the time of payment, if any."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of the item purchased. This can be a decimal value."""  
    single_quantity_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_quantity_money'), 'exclude': lambda f: f is None }})  
    taxes: Optional[list[shared_v1paymenttax.V1PaymentTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxes'), 'exclude': lambda f: f is None }})
    r"""All taxes applied to this itemization."""  
    total_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_money'), 'exclude': lambda f: f is None }})  
    