"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Tse:
    r"""Technische Sicherheitseinrichtung - use in context of strom-quittungen to get digitaly signed receipts."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def quittung_tse(self, request: operations.QuittungTSERequest) -> operations.QuittungTSEResponse:
        r"""Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
        Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quittung/tse'
        
        query_params = utils.get_query_params(operations.QuittungTSERequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuittungTSEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.QuittungTSE200ApplicationJSON])
                res.quittung_tse_200_application_json_object = out

        return res

    def quittung_tse_data(self, request: operations.QuittungTSEDataRequest) -> operations.QuittungTSEDataResponse:
        r"""Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
        Allows to retrieve input string for a signing process.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quittung/tsedata'
        
        query_params = utils.get_query_params(operations.QuittungTSEDataRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuittungTSEDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def quittung_ts_esignature(self, request: operations.QuittungTSEsignatureRequest) -> operations.QuittungTSEsignatureResponse:
        r"""Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
        Allows to retrieve digital signature for a given receipt.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quittung/tsesignature'
        
        query_params = utils.get_query_params(operations.QuittungTSEsignatureRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuittungTSEsignatureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def quittung_zugferd(self, request: operations.QuittungZugferdRequest) -> operations.QuittungZugferdResponse:
        r"""Retrieve Zugferd XML for a given receipt (Strom-Quittung).
        Allows to retrieve XML of the zugferd invoice.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/quittung/zugferd'
        
        query_params = utils.get_query_params(operations.QuittungZugferdRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuittungZugferdResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    