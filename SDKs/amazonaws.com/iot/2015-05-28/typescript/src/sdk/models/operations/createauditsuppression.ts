/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information that identifies the noncompliant resource.
 */
export class CreateAuditSuppressionRequestBodyResourceIdentifier extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "caCertificateId" })
  caCertificateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "cognitoIdentityPoolId" })
  cognitoIdentityPoolId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceCertificateArn" })
  deviceCertificateArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceCertificateId" })
  deviceCertificateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "iamRoleArn" })
  iamRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "issuerCertificateIdentifier" })
  @Type(() => shared.IssuerCertificateIdentifier)
  issuerCertificateIdentifier?: shared.IssuerCertificateIdentifier;

  @SpeakeasyMetadata()
  @Expose({ name: "policyVersionIdentifier" })
  @Type(() => shared.PolicyVersionIdentifier)
  policyVersionIdentifier?: shared.PolicyVersionIdentifier;

  @SpeakeasyMetadata()
  @Expose({ name: "roleAliasArn" })
  roleAliasArn?: string;
}

export class CreateAuditSuppressionRequestBody extends SpeakeasyBase {
  /**
   * An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkName" })
  checkName: string;

  /**
   *  Each audit supression must have a unique client request token. If you try to create a new audit suppression with the same token as one that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken: string;

  /**
   *  The description of the audit suppression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   *  The epoch timestamp in seconds at which this suppression expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * Information that identifies the noncompliant resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceIdentifier" })
  @Type(() => CreateAuditSuppressionRequestBodyResourceIdentifier)
  resourceIdentifier: CreateAuditSuppressionRequestBodyResourceIdentifier;

  /**
   *  Indicates whether a suppression should exist indefinitely or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suppressIndefinitely" })
  suppressIndefinitely?: boolean;
}

export class CreateAuditSuppressionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAuditSuppressionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateAuditSuppressionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAuditSuppressionResponse?: Record<string, any>;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
