"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v3_direction as shared_v3_direction
from ..shared import v3_disruption as shared_v3_disruption
from ..shared import v3_patterndeparture as shared_v3_patterndeparture
from ..shared import v3_run as shared_v3_run
from ..shared import v3_status as shared_v3_status
from ..shared import v3_stoppingpatternstop as shared_v3_stoppingpatternstop
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3StoppingPattern:
    r"""The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)"""
    
    departures: Optional[list[shared_v3_patterndeparture.V3PatternDeparture]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departures'), 'exclude': lambda f: f is None }})
    r"""Timetabled and real-time service departures"""  
    directions: Optional[dict[str, shared_v3_direction.V3Direction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directions'), 'exclude': lambda f: f is None }})
    r"""Directions of travel of route"""  
    disruptions: Optional[list[shared_v3_disruption.V3Disruption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disruptions'), 'exclude': lambda f: f is None }})
    r"""Disruption information applicable to relevant routes or stops"""  
    routes: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes'), 'exclude': lambda f: f is None }})
    r"""Train lines, tram routes, bus routes, regional coach routes, Night Bus routes"""  
    runs: Optional[dict[str, shared_v3_run.V3Run]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runs'), 'exclude': lambda f: f is None }})
    r"""Individual trips/services of a route"""  
    status: Optional[shared_v3_status.V3Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    stops: Optional[dict[str, shared_v3_stoppingpatternstop.V3StoppingPatternStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stops'), 'exclude': lambda f: f is None }})
    r"""A train station, tram stop, bus stop, regional coach stop or Night Bus stop"""  
    