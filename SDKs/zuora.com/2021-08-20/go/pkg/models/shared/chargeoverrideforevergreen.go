// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChargeOverrideForEvergreenBillingBillCycleTypeEnum - Specifies how Zuora determines the day that each billing period begins on.
//
//   - `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.
//   - `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.
//   - `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.
//   - `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.
//   - `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.
type ChargeOverrideForEvergreenBillingBillCycleTypeEnum string

const (
	ChargeOverrideForEvergreenBillingBillCycleTypeEnumDefaultFromCustomer  ChargeOverrideForEvergreenBillingBillCycleTypeEnum = "DefaultFromCustomer"
	ChargeOverrideForEvergreenBillingBillCycleTypeEnumSpecificDayofMonth   ChargeOverrideForEvergreenBillingBillCycleTypeEnum = "SpecificDayofMonth"
	ChargeOverrideForEvergreenBillingBillCycleTypeEnumSubscriptionStartDay ChargeOverrideForEvergreenBillingBillCycleTypeEnum = "SubscriptionStartDay"
	ChargeOverrideForEvergreenBillingBillCycleTypeEnumChargeTriggerDay     ChargeOverrideForEvergreenBillingBillCycleTypeEnum = "ChargeTriggerDay"
	ChargeOverrideForEvergreenBillingBillCycleTypeEnumSpecificDayofWeek    ChargeOverrideForEvergreenBillingBillCycleTypeEnum = "SpecificDayofWeek"
)

func (e *ChargeOverrideForEvergreenBillingBillCycleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DefaultFromCustomer":
		fallthrough
	case "SpecificDayofMonth":
		fallthrough
	case "SubscriptionStartDay":
		fallthrough
	case "ChargeTriggerDay":
		fallthrough
	case "SpecificDayofWeek":
		*e = ChargeOverrideForEvergreenBillingBillCycleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenBillingBillCycleTypeEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenBillingBillingPeriodEnum - Billing frequency of the charge. The value of this field controls the duration of each billing period.
//
// If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.
type ChargeOverrideForEvergreenBillingBillingPeriodEnum string

const (
	ChargeOverrideForEvergreenBillingBillingPeriodEnumMonth            ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Month"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumQuarter          ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Quarter"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumSemiAnnual       ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Semi_Annual"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumAnnual           ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Annual"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumEighteenMonths   ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Eighteen_Months"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumTwoYears         ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Two_Years"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumThreeYears       ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Three_Years"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumFiveYears        ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Five_Years"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumSpecificMonths   ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Specific_Months"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumSubscriptionTerm ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Subscription_Term"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumWeek             ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Week"
	ChargeOverrideForEvergreenBillingBillingPeriodEnumSpecificWeeks    ChargeOverrideForEvergreenBillingBillingPeriodEnum = "Specific_Weeks"
)

func (e *ChargeOverrideForEvergreenBillingBillingPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Month":
		fallthrough
	case "Quarter":
		fallthrough
	case "Semi_Annual":
		fallthrough
	case "Annual":
		fallthrough
	case "Eighteen_Months":
		fallthrough
	case "Two_Years":
		fallthrough
	case "Three_Years":
		fallthrough
	case "Five_Years":
		fallthrough
	case "Specific_Months":
		fallthrough
	case "Subscription_Term":
		fallthrough
	case "Week":
		fallthrough
	case "Specific_Weeks":
		*e = ChargeOverrideForEvergreenBillingBillingPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenBillingBillingPeriodEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum - Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.
//
// * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active.
// * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription.
// * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.
//
// See the `billCycleType` field for information about how Zuora determines the billing day.
type ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum string

const (
	ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnumAlignToCharge            ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum = "AlignToCharge"
	ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnumAlignToSubscriptionStart ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum = "AlignToSubscriptionStart"
	ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnumAlignToTermStart         ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum = "AlignToTermStart"
)

func (e *ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AlignToCharge":
		fallthrough
	case "AlignToSubscriptionStart":
		fallthrough
	case "AlignToTermStart":
		*e = ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenBillingBillingTimingEnum - Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).
type ChargeOverrideForEvergreenBillingBillingTimingEnum string

const (
	ChargeOverrideForEvergreenBillingBillingTimingEnumInAdvance ChargeOverrideForEvergreenBillingBillingTimingEnum = "IN_ADVANCE"
	ChargeOverrideForEvergreenBillingBillingTimingEnumInArrears ChargeOverrideForEvergreenBillingBillingTimingEnum = "IN_ARREARS"
)

func (e *ChargeOverrideForEvergreenBillingBillingTimingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IN_ADVANCE":
		fallthrough
	case "IN_ARREARS":
		*e = ChargeOverrideForEvergreenBillingBillingTimingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenBillingBillingTimingEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum - Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.
type ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum string

const (
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumSunday    ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Sunday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumMonday    ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Monday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumTuesday   ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Tuesday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumWednesday ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Wednesday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumThursday  ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Thursday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumFriday    ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Friday"
	ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnumSaturday  ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum = "Saturday"
)

func (e *ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Sunday":
		fallthrough
	case "Monday":
		fallthrough
	case "Tuesday":
		fallthrough
	case "Wednesday":
		fallthrough
	case "Thursday":
		fallthrough
	case "Friday":
		fallthrough
	case "Saturday":
		*e = ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenBilling - Billing information about the charge.
type ChargeOverrideForEvergreenBilling struct {
	// Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.
	//
	BillCycleDay *int64 `json:"billCycleDay,omitempty"`
	// Specifies how Zuora determines the day that each billing period begins on.
	//
	//   * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.
	//   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.
	//   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.
	//   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.
	//   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.
	//
	BillCycleType *ChargeOverrideForEvergreenBillingBillCycleTypeEnum `json:"billCycleType,omitempty"`
	// Billing frequency of the charge. The value of this field controls the duration of each billing period.
	//
	// If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.
	//
	BillingPeriod *ChargeOverrideForEvergreenBillingBillingPeriodEnum `json:"billingPeriod,omitempty"`
	// Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.
	//
	// * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active.
	// * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription.
	// * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.
	//
	// See the `billCycleType` field for information about how Zuora determines the billing day.
	//
	BillingPeriodAlignment *ChargeOverrideForEvergreenBillingBillingPeriodAlignmentEnum `json:"billingPeriodAlignment,omitempty"`
	// Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).
	//
	BillingTiming *ChargeOverrideForEvergreenBillingBillingTimingEnum `json:"billingTiming,omitempty"`
	// Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.
	//
	SpecificBillingPeriod *int64 `json:"specificBillingPeriod,omitempty"`
	// Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.
	//
	WeeklyBillCycleDay *ChargeOverrideForEvergreenBillingWeeklyBillCycleDayEnum `json:"weeklyBillCycleDay,omitempty"`
}

// ChargeOverrideForEvergreenPricing - Pricing information about the charge.
type ChargeOverrideForEvergreenPricing struct {
	// Container for charge model configuration data.
	//
	// **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
	//
	ChargeModelData *ChargeModelDataOverride `json:"chargeModelData,omitempty"`
	// Pricing information about a discount charge.
	//
	Discount *DiscountPricingOverride `json:"discount,omitempty"`
	// Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
	//
	OneTimeFlatFee *OneTimeFlatFeePricingOverride `json:"oneTimeFlatFee,omitempty"`
	// Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
	//
	OneTimePerUnit *OneTimePerUnitPricingOverride `json:"oneTimePerUnit,omitempty"`
	// Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
	//
	OneTimeTiered *OneTimeTieredPricingOverride `json:"oneTimeTiered,omitempty"`
	// Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
	//
	OneTimeVolume *OneTimeVolumePricingOverride `json:"oneTimeVolume,omitempty"`
	// Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
	//
	RecurringFlatFee *RecurringFlatFeePricingOverride `json:"recurringFlatFee,omitempty"`
	// Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
	//
	RecurringPerUnit *RecurringPerUnitPricingOverride `json:"recurringPerUnit,omitempty"`
	// Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
	//
	RecurringTiered *RecurringTieredPricingOverride `json:"recurringTiered,omitempty"`
	// Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
	//
	RecurringVolume *RecurringVolumePricingOverride `json:"recurringVolume,omitempty"`
	// Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
	//
	UsageFlatFee *UsageFlatFeePricingOverride `json:"usageFlatFee,omitempty"`
	// Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
	//
	UsageOverage *UsageOveragePricingOverride `json:"usageOverage,omitempty"`
	// Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
	//
	UsagePerUnit *UsagePerUnitPricingOverride `json:"usagePerUnit,omitempty"`
	// Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
	//
	UsageTiered *UsageTieredPricingOverride `json:"usageTiered,omitempty"`
	// Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
	//
	UsageTieredWithOverage *UsageTieredWithOveragePricingOverride `json:"usageTieredWithOverage,omitempty"`
	// Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
	//
	UsageVolume *UsageVolumePricingOverride `json:"usageVolume,omitempty"`
}

// ChargeOverrideForEvergreenRevRecTriggerConditionEnum - Specifies the revenue recognition trigger condition.
//
//   - `Contract Effective Date`
//   - `Service Activation Date`
//   - `Customer Acceptance Date`
type ChargeOverrideForEvergreenRevRecTriggerConditionEnum string

const (
	ChargeOverrideForEvergreenRevRecTriggerConditionEnumContractEffectiveDate  ChargeOverrideForEvergreenRevRecTriggerConditionEnum = "Contract Effective Date"
	ChargeOverrideForEvergreenRevRecTriggerConditionEnumServiceActivationDate  ChargeOverrideForEvergreenRevRecTriggerConditionEnum = "Service Activation Date"
	ChargeOverrideForEvergreenRevRecTriggerConditionEnumCustomerAcceptanceDate ChargeOverrideForEvergreenRevRecTriggerConditionEnum = "Customer Acceptance Date"
)

func (e *ChargeOverrideForEvergreenRevRecTriggerConditionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Contract Effective Date":
		fallthrough
	case "Service Activation Date":
		fallthrough
	case "Customer Acceptance Date":
		*e = ChargeOverrideForEvergreenRevRecTriggerConditionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenRevRecTriggerConditionEnum: %s", s)
	}
}

// ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum - Specifies the revenue recognition rule.
//
//   - `Recognize upon invoicing`
//   - `Recognize daily over time`
type ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum string

const (
	ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnumRecognizeUponInvoicing ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum = "Recognize upon invoicing"
	ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnumRecognizeDailyOverTime ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum = "Recognize daily over time"
)

func (e *ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Recognize upon invoicing":
		fallthrough
	case "Recognize daily over time":
		*e = ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum: %s", s)
	}
}

// ChargeOverrideForEvergreen - Charge associated with a rate plan.
type ChargeOverrideForEvergreen struct {
	// Billing information about the charge.
	//
	Billing *ChargeOverrideForEvergreenBilling `json:"billing,omitempty"`
	// Charge number of the charge. For example, C-00000307.
	//
	// If you do not set this field, Zuora will generate the charge number.
	//
	ChargeNumber *string `json:"chargeNumber,omitempty"`
	// Container for custom fields of a Rate Plan Charge object.
	//
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// Description of the charge.
	//
	Description *string `json:"description,omitempty"`
	// Specifies when a charge becomes inactive.
	//
	EndDate *EndConditions `json:"endDate,omitempty"`
	// Pricing information about the charge.
	//
	Pricing *ChargeOverrideForEvergreenPricing `json:"pricing,omitempty"`
	// Internal identifier of the product rate plan charge that the charge is based on.
	//
	ProductRatePlanChargeID string `json:"productRatePlanChargeId"`
	// Revenue Recognition Code
	//
	RevRecCode *string `json:"revRecCode,omitempty"`
	// Specifies the revenue recognition trigger condition.
	//
	//   * `Contract Effective Date`
	//   * `Service Activation Date`
	//   * `Customer Acceptance Date`
	//
	RevRecTriggerCondition *ChargeOverrideForEvergreenRevRecTriggerConditionEnum `json:"revRecTriggerCondition,omitempty"`
	// Specifies the revenue recognition rule.
	//
	//   * `Recognize upon invoicing`
	//   * `Recognize daily over time`
	//
	RevenueRecognitionRuleName *ChargeOverrideForEvergreenRevenueRecognitionRuleNameEnum `json:"revenueRecognitionRuleName,omitempty"`
	// Specifies when a charge becomes active.
	//
	StartDate *TriggerParams `json:"startDate,omitempty"`
	// Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
	//
	// For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
	//
	UniqueToken *string `json:"uniqueToken,omitempty"`
}
