/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetLocationsRequest {
    /**
     * Limits on `time_created`, Marks the start of a range, optionally use `before` to set the end. Result output excludes the given timestamp.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after")
    public OffsetDateTime after;

    public GetLocationsRequest withAfter(OffsetDateTime after) {
        this.after = after;
        return this;
    }
    
    /**
     * Limits directly on `id`. Marks the start of a range, optionally use `before_id` to set the end. Result output excludes the given `id` value. Please note that `id` is in chronological order.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after_id")
    public String afterId;

    public GetLocationsRequest withAfterId(String afterId) {
        this.afterId = afterId;
        return this;
    }
    
    /**
     * Limits on `time_created`. Marks the end of a range, optionally use `after` to set the start. Result output excludes the given timestamp.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=before")
    public String before;

    public GetLocationsRequest withBefore(String before) {
        this.before = before;
        return this;
    }
    
    /**
     * Limits directly on `id`. Marks the end of a range, optionally use `after_id` to set the start. Result output excludes the given `id` value. Please note that `id` is in chronological order.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=before_id")
    public String beforeId;

    public GetLocationsRequest withBeforeId(String beforeId) {
        this.beforeId = beforeId;
        return this;
    }
    
    /**
     * Limits on `time_created`. Marks the start of a range, optionally use `until` to set the end. Result output includes the given timestamp.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    public String from;

    public GetLocationsRequest withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * Limits on `id`. Marks the start of a range, optionally use `until_id` to set the end. Result output includes the given `id` value. Please note that `id` is in chronological order.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from_id")
    public String fromId;

    public GetLocationsRequest withFromId(String fromId) {
        this.fromId = fromId;
        return this;
    }
    
    /**
     * Unique identifier
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id")
    public String id;

    public GetLocationsRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Removes `url` fields from output and shows `_id` instead of `_url` in references.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id_only")
    public Boolean idOnly;

    public GetLocationsRequest withIdOnly(Boolean idOnly) {
        this.idOnly = idOnly;
        return this;
    }
    
    /**
     * Filter based on the label value. Supports wildcards: `*`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=label")
    public String label;

    public GetLocationsRequest withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * Sets the maximum number of returned resources. You may increase this number to large values, keep in mind that query times could become large. We advise you to use the pagination feature whenever you can.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;

    public GetLocationsRequest withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Filter based on metadata. Does a partial match on any value in the metadata object. It is also possible to do an exact/wildcard match on specific properties, e.g. `metadata.foo=bar`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metadata")
    public String metadata;

    public GetLocationsRequest withMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Expand a reference into the actual resource (lookup). You may add multiple fields by giving a comma separated value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=populate")
    public String populate;

    public GetLocationsRequest withPopulate(String populate) {
        this.populate = populate;
        return this;
    }
    
    /**
     * Removes response envelope with information about query, only sends back a JSON array with the applicable resources.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=results_only")
    public Boolean resultsOnly;

    public GetLocationsRequest withResultsOnly(Boolean resultsOnly) {
        this.resultsOnly = resultsOnly;
        return this;
    }
    
    /**
     * Select which properties should be returned. You may add multiple fields by giving a comma separated value. Select can also be used together with populate: Specify the resource first, then a period(.) followed by the field.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=select")
    public String select;

    public GetLocationsRequest withSelect(String select) {
        this.select = select;
        return this;
    }
    
    /**
     * Allows you to sort on on or more fields in the resource. You may append a minus sign (`-`) to request reverse order (new to old).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;

    public GetLocationsRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Filter based on a full text search. Searched properties depend on the resource type. Matches on any of the given words. Supports quote (exact words) and minus (exclude) operators.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=text")
    public String text;

    public GetLocationsRequest withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Filter on the time the resource was created.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=time_created")
    public String timeCreated;

    public GetLocationsRequest withTimeCreated(String timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * Filter on the time the resource was last updated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=time_updated")
    public String timeUpdated;

    public GetLocationsRequest withTimeUpdated(String timeUpdated) {
        this.timeUpdated = timeUpdated;
        return this;
    }
    
    /**
     * Overrides the default query timeout (in seconds). A value of 0 means unlimited. IMPORTANT: using high timeouts in production code is strongly discouraged as it may lead to stability issues.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeout_s")
    public Double timeoutS;

    public GetLocationsRequest withTimeoutS(Double timeoutS) {
        this.timeoutS = timeoutS;
        return this;
    }
    
    /**
     * Limits on `time_created`. Marks the end of a range, optionally use `from` to set the start. Result output includes the given timestamp.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=until")
    public String until;

    public GetLocationsRequest withUntil(String until) {
        this.until = until;
        return this;
    }
    
    /**
     * Limits on `id`. Marks the end of a range, optionally use `from_id` to set the start. Result output includes the given `id` value. Please note that `id` is in chronological order.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=until_id")
    public String untilId;

    public GetLocationsRequest withUntilId(String untilId) {
        this.untilId = untilId;
        return this;
    }
    
    public GetLocationsRequest(){}
}
