/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetRepositoriesWorkspaceQueryParams {
    /**
     * Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String q;
    public GetRepositoriesWorkspaceQueryParams withQ(String q) {
        this.q = q;
        return this;
    }
    
    /**
     * Filters the result based on the authenticated user's role on each repository.
     * 
     * * **member**: returns repositories to which the user has explicit read access
     * * **contributor**: returns repositories to which the user has explicit write access
     * * **admin**: returns repositories to which the user has explicit administrator access
     * * **owner**: returns all repositories owned by the current user
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=role")
    public GetRepositoriesWorkspaceRoleEnum role;
    public GetRepositoriesWorkspaceQueryParams withRole(GetRepositoriesWorkspaceRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     *         
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetRepositoriesWorkspaceQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
}
