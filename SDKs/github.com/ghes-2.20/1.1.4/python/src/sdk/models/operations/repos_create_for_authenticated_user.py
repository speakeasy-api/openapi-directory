"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import repository as shared_repository
from ..shared import scim_error as shared_scim_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateForAuthenticatedUserRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the repository."""  
    allow_merge_commit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_merge_commit'), 'exclude': lambda f: f is None }})
    r"""Whether to allow merge commits for pull requests."""  
    allow_rebase_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_rebase_merge'), 'exclude': lambda f: f is None }})
    r"""Whether to allow rebase merges for pull requests."""  
    allow_squash_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_squash_merge'), 'exclude': lambda f: f is None }})
    r"""Whether to allow squash merges for pull requests."""  
    auto_init: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_init'), 'exclude': lambda f: f is None }})
    r"""Whether the repository is initialized with a minimal README."""  
    delete_branch_on_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_branch_on_merge'), 'exclude': lambda f: f is None }})
    r"""Whether to delete head branches when pull requests are merged"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description of the repository."""  
    gitignore_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gitignore_template'), 'exclude': lambda f: f is None }})
    r"""The desired language or platform to apply to the .gitignore."""  
    has_downloads: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_downloads'), 'exclude': lambda f: f is None }})
    r"""Whether downloads are enabled."""  
    has_issues: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues'), 'exclude': lambda f: f is None }})
    r"""Whether issues are enabled."""  
    has_projects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects'), 'exclude': lambda f: f is None }})
    r"""Whether projects are enabled."""  
    has_wiki: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki'), 'exclude': lambda f: f is None }})
    r"""Whether the wiki is enabled."""  
    homepage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage'), 'exclude': lambda f: f is None }})
    r"""A URL with more information about the repository."""  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})
    r"""Whether this repository acts as a template that can be used to generate new repositories."""  
    license_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license_template'), 'exclude': lambda f: f is None }})
    r"""The license keyword of the open source license for this repository."""  
    private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private'), 'exclude': lambda f: f is None }})
    r"""Whether the repository is private."""  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_id'), 'exclude': lambda f: f is None }})
    r"""The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."""  
    

@dataclasses.dataclass
class ReposCreateForAuthenticatedUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository: Optional[shared_repository.Repository] = dataclasses.field(default=None)
    r"""Response"""  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    