// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StreamStateEnum - The state of the stream.
type StreamStateEnum string

const (
	StreamStateEnumStateUnspecified  StreamStateEnum = "STATE_UNSPECIFIED"
	StreamStateEnumNotStarted        StreamStateEnum = "NOT_STARTED"
	StreamStateEnumRunning           StreamStateEnum = "RUNNING"
	StreamStateEnumPaused            StreamStateEnum = "PAUSED"
	StreamStateEnumMaintenance       StreamStateEnum = "MAINTENANCE"
	StreamStateEnumFailed            StreamStateEnum = "FAILED"
	StreamStateEnumFailedPermanently StreamStateEnum = "FAILED_PERMANENTLY"
	StreamStateEnumStarting          StreamStateEnum = "STARTING"
	StreamStateEnumDraining          StreamStateEnum = "DRAINING"
)

func (e *StreamStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "PAUSED":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "FAILED":
		fallthrough
	case "FAILED_PERMANENTLY":
		fallthrough
	case "STARTING":
		fallthrough
	case "DRAINING":
		*e = StreamStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamStateEnum: %s", s)
	}
}

// StreamInput - A resource representing streaming data from a source to a destination.
type StreamInput struct {
	// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
	BackfillAll *BackfillAllStrategy `json:"backfillAll,omitempty"`
	// Backfill strategy to disable automatic backfill for the Stream's objects.
	BackfillNone map[string]interface{} `json:"backfillNone,omitempty"`
	// Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
	CustomerManagedEncryptionKey *string `json:"customerManagedEncryptionKey,omitempty"`
	// The configuration of the stream destination.
	DestinationConfig *DestinationConfig `json:"destinationConfig,omitempty"`
	// Required. Display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Labels.
	Labels map[string]string `json:"labels,omitempty"`
	// The configuration of the stream source.
	SourceConfig *SourceConfig `json:"sourceConfig,omitempty"`
	// The state of the stream.
	State *StreamStateEnum `json:"state,omitempty"`
}

// Stream - A resource representing streaming data from a source to a destination.
type Stream struct {
	// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
	BackfillAll *BackfillAllStrategy `json:"backfillAll,omitempty"`
	// Backfill strategy to disable automatic backfill for the Stream's objects.
	BackfillNone map[string]interface{} `json:"backfillNone,omitempty"`
	// Output only. The creation time of the stream.
	CreateTime *string `json:"createTime,omitempty"`
	// Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
	CustomerManagedEncryptionKey *string `json:"customerManagedEncryptionKey,omitempty"`
	// The configuration of the stream destination.
	DestinationConfig *DestinationConfig `json:"destinationConfig,omitempty"`
	// Required. Display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Output only. Errors on the Stream.
	Errors []Error `json:"errors,omitempty"`
	// Labels.
	Labels map[string]string `json:"labels,omitempty"`
	// Output only. The stream's name.
	Name *string `json:"name,omitempty"`
	// The configuration of the stream source.
	SourceConfig *SourceConfig `json:"sourceConfig,omitempty"`
	// The state of the stream.
	State *StreamStateEnum `json:"state,omitempty"`
	// Output only. The last update time of the stream.
	UpdateTime *string `json:"updateTime,omitempty"`
}
