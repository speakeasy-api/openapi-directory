"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PatchTokenRequestBodyChannelEnum(str, Enum):
    PHYSICAL = 'physical'
    SLACK = 'slack'
    TELEGRAM = 'telegram'
    SMS = 'sms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchTokenRequestBody:
    r"""Include token properties to create here"""
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})  
    channel: Optional[PatchTokenRequestBodyChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})  
    driver: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driver'), 'exclude': lambda f: f is None }})  
    physical_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('physicalId'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchTokenRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of token that needs to be updated"""  
    request_body: PatchTokenRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Include token properties to create here"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchToken201ApplicationJSON:
    r"""Returns the updated token"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    ok: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ok'), 'exclude': lambda f: f is None }})  
    result: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchTokenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    patch_token_201_application_json_object: Optional[PatchToken201ApplicationJSON] = dataclasses.field(default=None)
    r"""Returns the updated token"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    