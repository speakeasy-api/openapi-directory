"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import archivalsummary as shared_archivalsummary
from ..shared import attributedefinition as shared_attributedefinition
from ..shared import billingmodesummary as shared_billingmodesummary
from ..shared import globalsecondaryindexdescription as shared_globalsecondaryindexdescription
from ..shared import keyschemaelement as shared_keyschemaelement
from ..shared import localsecondaryindexdescription as shared_localsecondaryindexdescription
from ..shared import provisionedthroughputdescription as shared_provisionedthroughputdescription
from ..shared import replicadescription as shared_replicadescription
from ..shared import restoresummary as shared_restoresummary
from ..shared import ssedescription as shared_ssedescription
from ..shared import streamspecification as shared_streamspecification
from ..shared import tableclasssummary as shared_tableclasssummary
from ..shared import tablestatus_enum as shared_tablestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableDescription:
    r"""Represents the properties of a table."""
    
    archival_summary: Optional[shared_archivalsummary.ArchivalSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalSummary'), 'exclude': lambda f: f is None }})  
    attribute_definitions: Optional[list[shared_attributedefinition.AttributeDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttributeDefinitions'), 'exclude': lambda f: f is None }})  
    billing_mode_summary: Optional[shared_billingmodesummary.BillingModeSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillingModeSummary'), 'exclude': lambda f: f is None }})  
    creation_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    deletion_protection_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionProtectionEnabled'), 'exclude': lambda f: f is None }})  
    global_secondary_indexes: Optional[list[shared_globalsecondaryindexdescription.GlobalSecondaryIndexDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalSecondaryIndexes'), 'exclude': lambda f: f is None }})  
    global_table_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalTableVersion'), 'exclude': lambda f: f is None }})  
    item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemCount'), 'exclude': lambda f: f is None }})  
    key_schema: Optional[list[shared_keyschemaelement.KeySchemaElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema'), 'exclude': lambda f: f is None }})  
    latest_stream_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LatestStreamArn'), 'exclude': lambda f: f is None }})  
    latest_stream_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LatestStreamLabel'), 'exclude': lambda f: f is None }})  
    local_secondary_indexes: Optional[list[shared_localsecondaryindexdescription.LocalSecondaryIndexDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalSecondaryIndexes'), 'exclude': lambda f: f is None }})  
    provisioned_throughput: Optional[shared_provisionedthroughputdescription.ProvisionedThroughputDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughput'), 'exclude': lambda f: f is None }})  
    replicas: Optional[list[shared_replicadescription.ReplicaDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Replicas'), 'exclude': lambda f: f is None }})  
    restore_summary: Optional[shared_restoresummary.RestoreSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RestoreSummary'), 'exclude': lambda f: f is None }})  
    sse_description: Optional[shared_ssedescription.SSEDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SSEDescription'), 'exclude': lambda f: f is None }})  
    stream_specification: Optional[shared_streamspecification.StreamSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamSpecification'), 'exclude': lambda f: f is None }})  
    table_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableArn'), 'exclude': lambda f: f is None }})  
    table_class_summary: Optional[shared_tableclasssummary.TableClassSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableClassSummary'), 'exclude': lambda f: f is None }})  
    table_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableId'), 'exclude': lambda f: f is None }})  
    table_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName'), 'exclude': lambda f: f is None }})  
    table_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableSizeBytes'), 'exclude': lambda f: f is None }})  
    table_status: Optional[shared_tablestatus_enum.TableStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableStatus'), 'exclude': lambda f: f is None }})  
    