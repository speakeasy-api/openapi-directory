/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetUsersRequest extends SpeakeasyBase {
  /**
   * Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: Record<string, any>;

  /**
   * If set, return records where the specified field is greater than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_gt",
  })
  filterGt?: Record<string, any>;

  /**
   * If set, return records where the specified field is greater than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_gteq",
  })
  filterGteq?: Record<string, any>;

  /**
   * If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_like",
  })
  filterLike?: Record<string, any>;

  /**
   * If set, return records where the specified field is less than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_lt",
  })
  filterLt?: Record<string, any>;

  /**
   * If set, return records where the specified field is less than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_lteq",
  })
  filterLteq?: Record<string, any>;

  /**
   * comma-separated list of User IDs
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ids" })
  ids?: string;

  /**
   * Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * If `true`, list only admin users.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[admin]",
  })
  qAdmin?: string;

  /**
   * If set, list only users with overridden allowed IP setting.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[allowed_ips]",
  })
  qAllowedIps?: string;

  /**
   * List users matching email.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[email]",
  })
  qEmail?: string;

  /**
   * List users matching notes field.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[notes]",
  })
  qNotes?: string;

  /**
   * If set, list only users with overridden password validity days setting.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[password_validity_days]",
  })
  qPasswordValidityDays?: string;

  /**
   * If set, list only users with overridden SSL required setting.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[ssl_required]",
  })
  qSslRequired?: string;

  /**
   * List users matching username.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=q[username]",
  })
  qUsername?: string;

  /**
   * Searches for partial matches of name, username, or email.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[authenticate_until]=desc`). Valid fields are `authenticate_until`, `active`, `email`, `last_desktop_login_at`, `last_login_at`, `username`, `company`, `name`, `site_admin`, `receive_admin_alerts`, `password_validity_days`, `ssl_required` or `not_site_admin`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: Record<string, any>;
}

export class GetUsersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A list of Users objects.
   */
  @SpeakeasyMetadata({ elemType: shared.UserEntity })
  userEntities?: shared.UserEntity[];
}
