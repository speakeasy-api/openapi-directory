"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Uploads:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def abort_multipart(self, request: operations.AbortMultipartRequestBody) -> operations.AbortMultipartResponse:
        r"""Abort multipart upload
        This endpoint aborts the multipart upload initiated with /create-multipart.
        This should be used when cancelling the upload. It does not matter if parts
        were already uploaded into the external storage provider.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/abort-multipart.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AbortMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AbortMultipart200ApplicationJSON])
                res.abort_multipart_200_application_json_object = out

        return res

    def batch_presign_multipart_parts(self, request: operations.BatchPresignMultipartPartsRequestBody) -> operations.BatchPresignMultipartPartsResponse:
        r"""Generates batches of presigned URLs for multipart parts
        Multipart uploads are uploaded in chunks or parts to individual presigned
        URLs, similar to the one generated by /generate-presigned-put. The part
        numbers provided must be between 1 and 10000. The total number of parts
        will depend on the chunk size in bytes that you intend to use to upload
        each chunk. For example a 12MB file may have 2 5MB chunks and a final
        2MB chunk, for part numbers 1, 2, and 3.
        
        This endpoint will return a presigned URL for each part number provided,
        which you can then use to send PUT requests for the binary chunk corresponding
        to that part. When the part is uploaded, the provider should return an
        ETag for the part, and this should be stored along with the part number,
        because this is needed to complete the multipart upload.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/batch-presign-multipart-parts.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchPresignMultipartPartsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BatchPresignMultipartParts200ApplicationJSON])
                res.batch_presign_multipart_parts_200_application_json_object = out

        return res

    def complete_external_upload(self, request: operations.CompleteExternalUploadRequestBody) -> operations.CompleteExternalUploadResponse:
        r"""Completes a direct external upload
        Completes an external upload initialized with /get-presigned-put. The
        file will be moved from its temporary location in external storage to
        a final destination in the S3 bucket. An Upload record will also be
        created in the database in most cases.
        
        If a sha1-checksum was provided in the initial request it will also
        be compared with the uploaded file in storage to make sure the same
        file was uploaded. The file size will be compared for the same reason.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/complete-external-upload.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompleteExternalUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompleteExternalUpload200ApplicationJSON])
                res.complete_external_upload_200_application_json_object = out

        return res

    def complete_multipart(self, request: operations.CompleteMultipartRequestBody) -> operations.CompleteMultipartResponse:
        r"""Complete multipart upload
        Completes the multipart upload in the external store, and copies the
        file from its temporary location to its final location in the store.
        All of the parts must have been uploaded to the external storage provider.
        An Upload record will be completed in most cases once the file is copied
        to its final location.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/complete-multipart.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompleteMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompleteMultipart200ApplicationJSON])
                res.complete_multipart_200_application_json_object = out

        return res

    def create_multipart_upload(self, request: operations.CreateMultipartUploadRequestBody) -> operations.CreateMultipartUploadResponse:
        r"""Creates a multipart external upload
        Creates a multipart upload in the external storage provider, storing
        a temporary reference to the external upload similar to /get-presigned-put.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/create-multipart.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMultipartUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateMultipartUpload200ApplicationJSON])
                res.create_multipart_upload_200_application_json_object = out

        return res

    def create_upload(self, request: operations.CreateUploadRequestBody) -> operations.CreateUploadResponse:
        r"""Creates an upload"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateUpload200ApplicationJSON])
                res.create_upload_200_application_json_object = out

        return res

    def generate_presigned_put(self, request: operations.GeneratePresignedPutRequestBody) -> operations.GeneratePresignedPutResponse:
        r"""Initiates a direct external upload
        Direct external uploads bypass the usual method of creating uploads
        via the POST /uploads route, and upload directly to an external provider,
        which by default is S3. This route begins the process, and will return
        a unique identifier for the external upload as well as a presigned URL
        which is where the file binary blob should be uploaded to.
        
        Once the upload is complete to the external service, you must call the
        POST /complete-external-upload route using the unique identifier returned
        by this route, which will create any required Upload record in the Discourse
        database and also move file from its temporary location to the final
        destination in the external storage service.
        
        You must have the correct permissions and CORS settings configured in your
        external provider. We support AWS S3 as the default. See:
        
        https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
        
        An external file store must be set up and `enable_direct_s3_uploads` must
        be set to true for this endpoint to function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploads/generate-presigned-put.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeneratePresignedPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GeneratePresignedPut200ApplicationJSON])
                res.generate_presigned_put_200_application_json_object = out

        return res

    