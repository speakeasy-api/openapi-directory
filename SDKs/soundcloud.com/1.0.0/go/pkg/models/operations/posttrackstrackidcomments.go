// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostTracksTrackIDCommentsSecurity struct {
	AuthHeader shared.SchemeAuthHeader `security:"scheme,type=apiKey,subtype=header"`
	ClientID   shared.SchemeClientID   `security:"scheme,type=apiKey,subtype=query"`
}

type PostTracksTrackIDCommentsPathParams struct {
	// SoundCloud Track id
	TrackID int64 `pathParam:"style=simple,explode=false,name=track_id"`
}

type PostTracksTrackIDCommentsRequestBodyCommentTimestampType string

const (
	PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeStr    PostTracksTrackIDCommentsRequestBodyCommentTimestampType = "str"
	PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeNumber PostTracksTrackIDCommentsRequestBodyCommentTimestampType = "number"
)

type PostTracksTrackIDCommentsRequestBodyCommentTimestamp struct {
	Str    *string
	Number *float64

	Type PostTracksTrackIDCommentsRequestBodyCommentTimestampType
}

func CreatePostTracksTrackIDCommentsRequestBodyCommentTimestampStr(str string) PostTracksTrackIDCommentsRequestBodyCommentTimestamp {
	typ := PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeStr

	return PostTracksTrackIDCommentsRequestBodyCommentTimestamp{
		Str:  &str,
		Type: typ,
	}
}

func CreatePostTracksTrackIDCommentsRequestBodyCommentTimestampNumber(number float64) PostTracksTrackIDCommentsRequestBodyCommentTimestamp {
	typ := PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeNumber

	return PostTracksTrackIDCommentsRequestBodyCommentTimestamp{
		Number: &number,
		Type:   typ,
	}
}

func (u *PostTracksTrackIDCommentsRequestBodyCommentTimestamp) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeStr
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = PostTracksTrackIDCommentsRequestBodyCommentTimestampTypeNumber
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostTracksTrackIDCommentsRequestBodyCommentTimestamp) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	return nil, nil
}

type PostTracksTrackIDCommentsRequestBodyComment struct {
	// Comment's content
	Body string `json:"body"`
	// Timestamp of a comment. String or float representation is supported
	Timestamp *PostTracksTrackIDCommentsRequestBodyCommentTimestamp `json:"timestamp,omitempty"`
}

// PostTracksTrackIDCommentsRequestBody - Body of a comment
type PostTracksTrackIDCommentsRequestBody struct {
	Comment *PostTracksTrackIDCommentsRequestBodyComment `json:"comment,omitempty"`
}

type PostTracksTrackIDCommentsRequest struct {
	PathParams PostTracksTrackIDCommentsPathParams
	// Body of a comment
	//
	Request  PostTracksTrackIDCommentsRequestBody `request:"mediaType=application/json"`
	Security PostTracksTrackIDCommentsSecurity
}

type PostTracksTrackIDCommentsResponse struct {
	// Success
	Comment     *shared.Comment
	ContentType string
	// Unprocessable Entity
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Too Many Requests
	TooManyRequests *shared.TooManyRequests
}
