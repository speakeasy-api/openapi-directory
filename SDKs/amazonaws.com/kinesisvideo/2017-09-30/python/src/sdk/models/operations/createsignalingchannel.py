"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createsignalingchanneloutput as shared_createsignalingchanneloutput
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateSignalingChannelRequestBodyChannelTypeEnum(str, Enum):
    r"""A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type."""
    SINGLE_MASTER = 'SINGLE_MASTER'
    FULL_MESH = 'FULL_MESH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSignalingChannelRequestBodySingleMasterConfiguration:
    r"""A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type."""
    
    message_ttl_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageTtlSeconds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSignalingChannelRequestBody:
    
    channel_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelName') }})
    r"""A name for the signaling channel that you are creating. It must be unique for each Amazon Web Services account and Amazon Web Services Region."""  
    channel_type: Optional[CreateSignalingChannelRequestBodyChannelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelType'), 'exclude': lambda f: f is None }})
    r"""A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type."""  
    single_master_configuration: Optional[CreateSignalingChannelRequestBodySingleMasterConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SingleMasterConfiguration'), 'exclude': lambda f: f is None }})
    r"""A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""A set of tags (key-value pairs) that you want to associate with this channel."""  
    

@dataclasses.dataclass
class CreateSignalingChannelRequest:
    
    request_body: CreateSignalingChannelRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateSignalingChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    account_channel_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountChannelLimitExceededException"""  
    client_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientLimitExceededException"""  
    create_signaling_channel_output: Optional[shared_createsignalingchanneloutput.CreateSignalingChannelOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    tags_per_resource_exceeded_limit_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagsPerResourceExceededLimitException"""  
    