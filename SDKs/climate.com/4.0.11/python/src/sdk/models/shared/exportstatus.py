"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ExportStatusStatusEnum(str, Enum):
    r"""Current status of the export request:
      * `PROCESSING` - Export request has been received by Climate and is being processed.
      * `INVALID` - Export request has failed validity check.
      * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.
      * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.
      * `NO_DATA` - The export request completed successfully but generated no data.
    """
    PROCESSING = 'PROCESSING'
    INVALID = 'INVALID'
    EXPIRED = 'EXPIRED'
    COMPLETED = 'COMPLETED'
    NO_DATA = 'NO_DATA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportStatus:
    r"""OK"""
    
    status: ExportStatusStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the export request:
      * `PROCESSING` - Export request has been received by Climate and is being processed.
      * `INVALID` - Export request has failed validity check.
      * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.
      * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.
      * `NO_DATA` - The export request completed successfully but generated no data.
    """  
    checksum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checksum'), 'exclude': lambda f: f is None }})
    r"""Base64 encoded MD5 hash of the export's contents."""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Message indicating reason for validation failure."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Size of the export's contents in bytes."""  
    x_next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xNextToken'), 'exclude': lambda f: f is None }})
    r"""Token which may be used when executing an identical export in
    the future, but which only wants export data which was not
    previously exported.
    Assume a given field export request matches 12 fields today. And
    tomorrow it matches 15 fields. By passing the xNextToken in the
    definition section of tomorrow's field export request, only the
    3 additional fields would be exported. Note, all other parameters
    passed in the definition section must be identical to the original
    request.
    """  
    