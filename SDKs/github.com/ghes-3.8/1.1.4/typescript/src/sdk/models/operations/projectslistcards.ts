/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Filters the project cards that are returned by the card's state.
 */
export enum ProjectsListCardsArchivedStateEnum {
  All = "all",
  Archived = "archived",
  NotArchived = "not_archived",
}

export class ProjectsListCardsRequest extends SpeakeasyBase {
  /**
   * Filters the project cards that are returned by the card's state.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=archived_state",
  })
  archivedState?: ProjectsListCardsArchivedStateEnum;

  /**
   * The unique identifier of the column.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=column_id",
  })
  columnId: number;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;
}

export class ProjectsListCardsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Requires authentication
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.ProjectCard })
  projectCards?: shared.ProjectCard[];
}
