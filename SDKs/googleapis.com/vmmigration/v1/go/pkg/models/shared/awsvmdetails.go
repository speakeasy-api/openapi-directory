// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AwsVMDetailsArchitectureEnum - The CPU architecture.
type AwsVMDetailsArchitectureEnum string

const (
	AwsVMDetailsArchitectureEnumVMArchitectureUnspecified AwsVMDetailsArchitectureEnum = "VM_ARCHITECTURE_UNSPECIFIED"
	AwsVMDetailsArchitectureEnumI386                      AwsVMDetailsArchitectureEnum = "I386"
	AwsVMDetailsArchitectureEnumX8664                     AwsVMDetailsArchitectureEnum = "X86_64"
	AwsVMDetailsArchitectureEnumArm64                     AwsVMDetailsArchitectureEnum = "ARM64"
	AwsVMDetailsArchitectureEnumX8664Mac                  AwsVMDetailsArchitectureEnum = "X86_64_MAC"
)

func (e AwsVMDetailsArchitectureEnum) ToPointer() *AwsVMDetailsArchitectureEnum {
	return &e
}

func (e *AwsVMDetailsArchitectureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VM_ARCHITECTURE_UNSPECIFIED":
		fallthrough
	case "I386":
		fallthrough
	case "X86_64":
		fallthrough
	case "ARM64":
		fallthrough
	case "X86_64_MAC":
		*e = AwsVMDetailsArchitectureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsVMDetailsArchitectureEnum: %v", v)
	}
}

// AwsVMDetailsBootOptionEnum - The VM Boot Option.
type AwsVMDetailsBootOptionEnum string

const (
	AwsVMDetailsBootOptionEnumBootOptionUnspecified AwsVMDetailsBootOptionEnum = "BOOT_OPTION_UNSPECIFIED"
	AwsVMDetailsBootOptionEnumEfi                   AwsVMDetailsBootOptionEnum = "EFI"
	AwsVMDetailsBootOptionEnumBios                  AwsVMDetailsBootOptionEnum = "BIOS"
)

func (e AwsVMDetailsBootOptionEnum) ToPointer() *AwsVMDetailsBootOptionEnum {
	return &e
}

func (e *AwsVMDetailsBootOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOT_OPTION_UNSPECIFIED":
		fallthrough
	case "EFI":
		fallthrough
	case "BIOS":
		*e = AwsVMDetailsBootOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsVMDetailsBootOptionEnum: %v", v)
	}
}

// AwsVMDetailsPowerStateEnum - Output only. The power state of the VM at the moment list was taken.
type AwsVMDetailsPowerStateEnum string

const (
	AwsVMDetailsPowerStateEnumPowerStateUnspecified AwsVMDetailsPowerStateEnum = "POWER_STATE_UNSPECIFIED"
	AwsVMDetailsPowerStateEnumOn                    AwsVMDetailsPowerStateEnum = "ON"
	AwsVMDetailsPowerStateEnumOff                   AwsVMDetailsPowerStateEnum = "OFF"
	AwsVMDetailsPowerStateEnumSuspended             AwsVMDetailsPowerStateEnum = "SUSPENDED"
	AwsVMDetailsPowerStateEnumPending               AwsVMDetailsPowerStateEnum = "PENDING"
)

func (e AwsVMDetailsPowerStateEnum) ToPointer() *AwsVMDetailsPowerStateEnum {
	return &e
}

func (e *AwsVMDetailsPowerStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POWER_STATE_UNSPECIFIED":
		fallthrough
	case "ON":
		fallthrough
	case "OFF":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "PENDING":
		*e = AwsVMDetailsPowerStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsVMDetailsPowerStateEnum: %v", v)
	}
}

// AwsVMDetailsVirtualizationTypeEnum - The virtualization type.
type AwsVMDetailsVirtualizationTypeEnum string

const (
	AwsVMDetailsVirtualizationTypeEnumVMVirtualizationTypeUnspecified AwsVMDetailsVirtualizationTypeEnum = "VM_VIRTUALIZATION_TYPE_UNSPECIFIED"
	AwsVMDetailsVirtualizationTypeEnumHvm                             AwsVMDetailsVirtualizationTypeEnum = "HVM"
	AwsVMDetailsVirtualizationTypeEnumParavirtual                     AwsVMDetailsVirtualizationTypeEnum = "PARAVIRTUAL"
)

func (e AwsVMDetailsVirtualizationTypeEnum) ToPointer() *AwsVMDetailsVirtualizationTypeEnum {
	return &e
}

func (e *AwsVMDetailsVirtualizationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VM_VIRTUALIZATION_TYPE_UNSPECIFIED":
		fallthrough
	case "HVM":
		fallthrough
	case "PARAVIRTUAL":
		*e = AwsVMDetailsVirtualizationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsVMDetailsVirtualizationTypeEnum: %v", v)
	}
}

// AwsVMDetails - AwsVmDetails describes a VM in AWS.
type AwsVMDetails struct {
	// The CPU architecture.
	Architecture *AwsVMDetailsArchitectureEnum `json:"architecture,omitempty"`
	// The VM Boot Option.
	BootOption *AwsVMDetailsBootOptionEnum `json:"bootOption,omitempty"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb *string `json:"committedStorageMb,omitempty"`
	// The number of cpus the VM has.
	CPUCount *int `json:"cpuCount,omitempty"`
	// The number of disks the VM has.
	DiskCount *int `json:"diskCount,omitempty"`
	// The display name of the VM. Note that this value is not necessarily unique.
	DisplayName *string `json:"displayName,omitempty"`
	// The instance type of the VM.
	InstanceType *string `json:"instanceType,omitempty"`
	// The memory size of the VM in MB.
	MemoryMb *int `json:"memoryMb,omitempty"`
	// The VM's OS.
	OsDescription *string `json:"osDescription,omitempty"`
	// Output only. The power state of the VM at the moment list was taken.
	PowerState *AwsVMDetailsPowerStateEnum `json:"powerState,omitempty"`
	// The security groups the VM belongs to.
	SecurityGroups []AwsSecurityGroup `json:"securityGroups,omitempty"`
	// The descriptive name of the AWS's source this VM is connected to.
	SourceDescription *string `json:"sourceDescription,omitempty"`
	// The id of the AWS's source this VM is connected to.
	SourceID *string `json:"sourceId,omitempty"`
	// The tags of the VM.
	Tags map[string]string `json:"tags,omitempty"`
	// The virtualization type.
	VirtualizationType *AwsVMDetailsVirtualizationTypeEnum `json:"virtualizationType,omitempty"`
	// The VM ID in AWS.
	VMID *string `json:"vmId,omitempty"`
	// The VPC ID the VM belongs to.
	VpcID *string `json:"vpcId,omitempty"`
	// The AWS zone of the VM.
	Zone *string `json:"zone,omitempty"`
}
