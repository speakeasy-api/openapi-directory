<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DataPoints 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete multiple datapoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDeleteBatch $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchDeleteResponse
     */
	public function dataPointsBatchDelete(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDeleteBatch $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update multiple datapoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDatapointsBatch $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPostResponse
     */
	public function dataPointsBatchPost(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDatapointsBatch $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create multiple datapoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDatapointsBatch $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPutResponse
     */
	public function dataPointsBatchPut(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreRequestsDatapointsBatch $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsBatchPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Count the datapoints associated to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsCountResponse
     */
	public function dataPointsCount(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/count');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteResponse
     */
	public function dataPointsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}', \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List of all the datapoints associated to the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetResponse
     */
	public function dataPointsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve the list of events related to this datapoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsResponse
     */
	public function dataPointsGetHits(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/hits', \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetHitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleResponse
     */
	public function dataPointsGetStatisticsAggregatedSingle(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/aggregated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAggregatedSingleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListResponse
     */
	public function dataPointsGetStatisticsAllList(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/aggregated/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsAllListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListResponse
     */
	public function dataPointsGetStatisticsList(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/aggregated/list', \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this datapoint for a timeframe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleResponse
     */
	public function dataPointsGetStatisticsSingle(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/aggregated', \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsGetStatisticsSingleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast switch the "favourite" field of a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteResponse
     */
	public function dataPointsPatchFavourite(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/favourite', \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchFavouriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormResponse
     */
	public function dataPointsPatchNotesForm(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonResponse
     */
	public function dataPointsPatchNotesJson(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawResponse
     */
	public function dataPointsPatchNotesRaw(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPatchNotesRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataPointsPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPostResponse
     */
	public function dataPointsPost(
        \OpenAPI\OpenAPI\Models\Operations\DataPointsPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}', \OpenAPI\OpenAPI\Models\Operations\DataPointsPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreDtoDatapointsDatapoint", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoDatapointsDatapoint $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DataPointsPutResponse
     */
	public function dataPointsPut(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoDatapointsDatapoint $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DataPointsPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataPointsPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get a datapoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdResponse
     */
	public function getDatapointsId(
        \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datapoints/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDatapointsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoDatapointsDatapoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoDatapointsDatapoint', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoDatapointsDatapoint = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoDatapointsDatapoint', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}