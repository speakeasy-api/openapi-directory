"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import region_enum as shared_region_enum
from ..shared import retentionsetting as shared_retentionsetting
from ..shared import settingsstatus_enum as shared_settingsstatus_enum
from ..shared import updatestatus as shared_updatestatus
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LakeConfigurationResponse:
    r"""Provides details of Amazon Security Lake lake configuration object."""
    
    encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionKey'), 'exclude': lambda f: f is None }})  
    replication_destination_regions: Optional[list[shared_region_enum.RegionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationDestinationRegions'), 'exclude': lambda f: f is None }})  
    replication_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationRoleArn'), 'exclude': lambda f: f is None }})  
    retention_settings: Optional[list[shared_retentionsetting.RetentionSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retentionSettings'), 'exclude': lambda f: f is None }})  
    s3_bucket_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3BucketArn'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_settingsstatus_enum.SettingsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags_map: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagsMap'), 'exclude': lambda f: f is None }})  
    update_status: Optional[shared_updatestatus.UpdateStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateStatus'), 'exclude': lambda f: f is None }})  
    