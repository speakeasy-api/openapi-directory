"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ActionsCreateOrgVariableRequestBodyVisibilityEnum(str, Enum):
    r"""The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable."""
    ALL = 'all'
    PRIVATE = 'private'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionsCreateOrgVariableRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the variable."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The value of the variable."""  
    visibility: ActionsCreateOrgVariableRequestBodyVisibilityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility') }})
    r"""The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable."""  
    selected_repository_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selected_repository_ids'), 'exclude': lambda f: f is None }})
    r"""An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`."""  
    

@dataclasses.dataclass
class ActionsCreateOrgVariableRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    request_body: ActionsCreateOrgVariableRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ActionsCreateOrgVariableResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    empty_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Response when creating a variable"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    