"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_columndatatype_enum as shared_beezup_common_columndatatype_enum
from ..shared import beezup_common_columnimportance_enum as shared_beezup_common_columnimportance_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ColumnConfiguration:
    r"""Indicates the configuration applied on the column (catalog or custom) during the importation process."""
    
    column_data_type: shared_beezup_common_columndatatype_enum.BeezUPCommonColumnDataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnDataType') }})
    r"""Data type of the column, will be used for parsing and for consolidation proces"""  
    column_importance: shared_beezup_common_columnimportance_enum.BeezUPCommonColumnImportanceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnImportance') }})
    r"""Importance of the column"""  
    beez_up_column_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPColumnName'), 'exclude': lambda f: f is None }})
    r"""The BeezUP column name"""  
    can_be_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canBeTruncated'), 'exclude': lambda f: f is None }})
    r"""If the size of the value is greater than the limit we can truncate the value instead of failing..."""  
    column_culture_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnCultureName'), 'exclude': lambda f: f is None }})
    r"""If non null, culture used to parse the value to the storage type of this column\r\n will be used for parsing and for consolidation proces"""  
    column_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnFormat'), 'exclude': lambda f: f is None }})
    r"""If non null, format used to parse the value to the storage type of this column\r\n will be used for parsing and for consolidation proces"""  
    display_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayGroupName'), 'exclude': lambda f: f is None }})
    r"""Indicate the display group name where the column must be putted"""  
    