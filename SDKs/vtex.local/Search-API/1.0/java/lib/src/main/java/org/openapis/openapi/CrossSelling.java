/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class CrossSelling {
	
    /**
	 * PRODUCT_SEARCH_ACCESSORIES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_ACCESSORIES_SERVERS = {
        "https://entelperu.{environment}.com.br/api/catalog_system/pub/products/crossselling/accessories",
    };
	
    /**
	 * PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS = {
        "https://entelperu.{environment}.com.br/api/catalog_system/pub/products/crossselling/accessories",
    };
	
    /**
	 * PRODUCT_SEARCH_SIMILARS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_SIMILARS_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * PRODUCT_SEARCH_SUGGESTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_SUGGESTIONS_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public CrossSelling(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get Product Search of Accessories
     * Retrieves general information about the product's accessories.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchAccessoriesResponse productSearchAccessories(org.openapis.openapi.models.operations.ProductSearchAccessoriesRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_ACCESSORIES_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchAccessoriesPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/accessories/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchAccessoriesResponse res = new org.openapis.openapi.models.operations.ProductSearchAccessoriesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get Product Search of Show Together
     * Retrieves general information about the products that are show together with the product in question.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchShowTogetherResponse productSearchShowTogether(org.openapis.openapi.models.operations.ProductSearchShowTogetherRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_SHOW_TOGETHER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchShowTogetherPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/showtogether/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchShowTogetherResponse res = new org.openapis.openapi.models.operations.ProductSearchShowTogetherResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get Product Search of Similars
     * Retrieves general information about related product searches.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchSimilarsResponse productSearchSimilars(org.openapis.openapi.models.operations.ProductSearchSimilarsRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_SIMILARS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchSimilarsPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/similars/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchSimilarsResponse res = new org.openapis.openapi.models.operations.ProductSearchSimilarsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get Product Search of Suggestions
     * Retrieves general information about other product suggestions related to the product.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchSuggestionsResponse productSearchSuggestions(org.openapis.openapi.models.operations.ProductSearchSuggestionsRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_SUGGESTIONS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchSuggestionsPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/suggestions/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchSuggestionsResponse res = new org.openapis.openapi.models.operations.ProductSearchSuggestionsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get Product Search of Who Bought Also Bought
     * Retrieves general information about other related products that the user also bought.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBoughtResponse productSearchWhoBoughtAlsoBought(org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBoughtRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_WHO_BOUGHT_ALSO_BOUGHT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBoughtPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/whoboughtalsobought/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBoughtResponse res = new org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBoughtResponse() {{
            productSearchWhoBoughtAlsoBought200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBought200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProductSearchWhoBoughtAlsoBought200ApplicationJSON[].class);
                res.productSearchWhoBoughtAlsoBought200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get Product Search of Who Saw Also Bought
     * Retrieves general information about other related products that the users saw and also bought.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBoughtResponse productSearchWhoSawAlsoBought(org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBoughtRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_WHO_SAW_ALSO_BOUGHT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBoughtPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/whosawalsobought/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBoughtResponse res = new org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBoughtResponse() {{
            productSearchWhoSawAlsoBought200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBought200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoBought200ApplicationJSON[].class);
                res.productSearchWhoSawAlsoBought200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get Product Search of Who Saw Also Saw
     * Retrieves general information about other related products that the users also saw.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSawResponse productSearchWhoSawAlsoSaw(org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSawRequest request) throws Exception {
        String baseUrl = PRODUCT_SEARCH_WHO_SAW_ALSO_SAW_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSawPathParams.class, baseUrl, "/api/catalog_system/pub/products/crossselling/whosawalsosaw/{productId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSawResponse res = new org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSawResponse() {{
            productSearchWhoSawAlsoSaw200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSaw200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProductSearchWhoSawAlsoSaw200ApplicationJSON[].class);
                res.productSearchWhoSawAlsoSaw200ApplicationJSONObjects = out;
            }
        }

        return res;
    }
}