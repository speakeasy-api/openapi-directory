/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier {
    /**
     * The code corresponding to the currency for the tier's price.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Currency")
    public String currency;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DiscountAmount")
    public Double discountAmount;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DiscountPercentage")
    public Double discountPercentage;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     * The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndingUnit")
    public Double endingUnit;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withEndingUnit(Double endingUnit) {
        this.endingUnit = endingUnit;
        return this;
    }
    
    /**
     * Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsOveragePrice")
    public Boolean isOveragePrice;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withIsOveragePrice(Boolean isOveragePrice) {
        this.isOveragePrice = isOveragePrice;
        return this;
    }
    
    /**
     * The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Price")
    public Double price;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PriceFormat")
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTierPriceFormatEnum priceFormat;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withPriceFormat(ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTierPriceFormatEnum priceFormat) {
        this.priceFormat = priceFormat;
        return this;
    }
    
    /**
     * The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartingUnit")
    public Double startingUnit;
    public ProxyCreateOrModifyProductRatePlanChargeTierDataProductRatePlanChargeTier withStartingUnit(Double startingUnit) {
        this.startingUnit = startingUnit;
        return this;
    }
    
}
