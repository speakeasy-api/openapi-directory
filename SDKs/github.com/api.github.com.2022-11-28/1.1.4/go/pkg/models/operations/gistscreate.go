// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GistsCreateRequestBodyFiles struct {
	// Content of the file
	Content string `json:"content"`
}

type GistsCreateRequestBodyPublic2Enum string

const (
	GistsCreateRequestBodyPublic2EnumTrue  GistsCreateRequestBodyPublic2Enum = "true"
	GistsCreateRequestBodyPublic2EnumFalse GistsCreateRequestBodyPublic2Enum = "false"
)

func (e *GistsCreateRequestBodyPublic2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GistsCreateRequestBodyPublic2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GistsCreateRequestBodyPublic2Enum: %s", s)
	}
}

type GistsCreateRequestBodyPublicType string

const (
	GistsCreateRequestBodyPublicTypeBoolean                           GistsCreateRequestBodyPublicType = "boolean"
	GistsCreateRequestBodyPublicTypeGistsCreateRequestBodyPublic2Enum GistsCreateRequestBodyPublicType = "gists/create_requestBody_public_2_Enum"
)

type GistsCreateRequestBodyPublic struct {
	Boolean                           *bool
	GistsCreateRequestBodyPublic2Enum *GistsCreateRequestBodyPublic2Enum

	Type GistsCreateRequestBodyPublicType
}

func CreateGistsCreateRequestBodyPublicBoolean(boolean bool) GistsCreateRequestBodyPublic {
	typ := GistsCreateRequestBodyPublicTypeBoolean

	return GistsCreateRequestBodyPublic{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateGistsCreateRequestBodyPublicGistsCreateRequestBodyPublic2Enum(gistsCreateRequestBodyPublic2Enum GistsCreateRequestBodyPublic2Enum) GistsCreateRequestBodyPublic {
	typ := GistsCreateRequestBodyPublicTypeGistsCreateRequestBodyPublic2Enum

	return GistsCreateRequestBodyPublic{
		GistsCreateRequestBodyPublic2Enum: &gistsCreateRequestBodyPublic2Enum,
		Type:                              typ,
	}
}

func (u *GistsCreateRequestBodyPublic) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = GistsCreateRequestBodyPublicTypeBoolean
		return nil
	}

	gistsCreateRequestBodyPublic2Enum := new(GistsCreateRequestBodyPublic2Enum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&gistsCreateRequestBodyPublic2Enum); err == nil {
		u.GistsCreateRequestBodyPublic2Enum = gistsCreateRequestBodyPublic2Enum
		u.Type = GistsCreateRequestBodyPublicTypeGistsCreateRequestBodyPublic2Enum
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GistsCreateRequestBodyPublic) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	if u.GistsCreateRequestBodyPublic2Enum != nil {
		return json.Marshal(u.GistsCreateRequestBodyPublic2Enum)
	}

	return nil, nil
}

type GistsCreateRequestBody struct {
	// Description of the gist
	Description *string `json:"description,omitempty"`
	// Names and content for the files that make up the gist
	Files  map[string]GistsCreateRequestBodyFiles `json:"files"`
	Public *GistsCreateRequestBodyPublic          `json:"public,omitempty"`
}

type GistsCreateResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	GistSimple *shared.GistSimple
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
