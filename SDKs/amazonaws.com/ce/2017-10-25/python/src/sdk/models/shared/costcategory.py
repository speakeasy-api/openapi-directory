"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import costcategoryprocessingstatus as shared_costcategoryprocessingstatus
from ..shared import costcategoryrule as shared_costcategoryrule
from ..shared import costcategoryruleversion_enum as shared_costcategoryruleversion_enum
from ..shared import costcategorysplitchargerule as shared_costcategorysplitchargerule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CostCategory:
    r"""The structure of Cost Categories. This includes detailed metadata and the set of rules for the <code>CostCategory</code> object."""
    
    cost_category_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CostCategoryArn') }})  
    effective_start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveStart') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The unique name of the Cost Category."""  
    rules: list[shared_costcategoryrule.CostCategoryRule] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rules') }})  
    rule_version: shared_costcategoryruleversion_enum.CostCategoryRuleVersionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleVersion') }})
    r"""The rule schema version in this particular Cost Category."""  
    default_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultValue'), 'exclude': lambda f: f is None }})
    r"""The default value for the cost category."""  
    effective_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveEnd'), 'exclude': lambda f: f is None }})  
    processing_status: Optional[list[shared_costcategoryprocessingstatus.CostCategoryProcessingStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingStatus'), 'exclude': lambda f: f is None }})  
    split_charge_rules: Optional[list[shared_costcategorysplitchargerule.CostCategorySplitChargeRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplitChargeRules'), 'exclude': lambda f: f is None }})  
    