<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class EmailVerifyResponse
{
    /**
     * The email domain
     * 
     * @var string $domain
     */
	#[\JMS\Serializer\Annotation\SerializedName('domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $domain;
    
    /**
     * True if this address has a domain error (e.g. no valid mail server records)
     * 
     * @var bool $domainError
     */
	#[\JMS\Serializer\Annotation\SerializedName('domain-error')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $domainError;
    
    /**
     * The email address. If you have used the fix-typos option then this will be the fixed address
     * 
     * @var string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $email;
    
    /**
     * True if this email domain has a catch-all policy (it will accept mail for any username)
     * 
     * @var bool $isCatchAll
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-catch-all')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isCatchAll;
    
    /**
     * True if the mail server responded with a temporary failure (either a 4xx response code or unresponsive server). You can retry this address later, we recommend waiting at least 15 minutes before retrying
     * 
     * @var bool $isDeferred
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-deferred')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isDeferred;
    
    /**
     * True if this address is a disposable, temporary or darknet related email address
     * 
     * @var bool $isDisposable
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-disposable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isDisposable;
    
    /**
     * True if this address is a free-mail address
     * 
     * @var bool $isFreemail
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-freemail')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isFreemail;
    
    /**
     * True if this address is for a person. False if this is a role based address, e.g. admin@, help@, office@, etc.
     * 
     * @var bool $isPersonal
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-personal')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isPersonal;
    
    /**
     * The email service provider domain
     * 
     * @var string $provider
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $provider;
    
    /**
     * The raw SMTP response message received during verification
     * 
     * @var string $smtpResponse
     */
	#[\JMS\Serializer\Annotation\SerializedName('smtp-response')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $smtpResponse;
    
    /**
     * The SMTP verification status for the address: <br> <ul> <li>ok - SMTP verification was successful, this is a real address that can receive mail</li> <li>invalid - this is not a valid email address (has either a domain or syntax error)</li> <li>absent - this address is not registered with the email service provider</li> <li>unresponsive - the mail server(s) for this address timed-out or refused to open an SMTP connection</li> <li>unknown - sorry, we could not reliably determine the real status of this address (this address may or may not exist)</li> </ul>
     * 
     * @var string $smtpStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('smtp-status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $smtpStatus;
    
    /**
     * True if this address has a syntax error
     * 
     * @var bool $syntaxError
     */
	#[\JMS\Serializer\Annotation\SerializedName('syntax-error')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $syntaxError;
    
    /**
     * True if typos have been fixed
     * 
     * @var bool $typosFixed
     */
	#[\JMS\Serializer\Annotation\SerializedName('typos-fixed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $typosFixed;
    
    /**
     * Is this a valid email address (syntax and domain is valid)
     * 
     * @var bool $valid
     */
	#[\JMS\Serializer\Annotation\SerializedName('valid')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $valid;
    
    /**
     * True if this address has passed SMTP verification. Check the smtp-status and smtp-response fields for specific verification details
     * 
     * @var bool $verified
     */
	#[\JMS\Serializer\Annotation\SerializedName('verified')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $verified;
    
	public function __construct()
	{
		$this->domain = "";
		$this->domainError = false;
		$this->email = "";
		$this->isCatchAll = false;
		$this->isDeferred = false;
		$this->isDisposable = false;
		$this->isFreemail = false;
		$this->isPersonal = false;
		$this->provider = "";
		$this->smtpResponse = "";
		$this->smtpStatus = "";
		$this->syntaxError = false;
		$this->typosFixed = false;
		$this->valid = false;
		$this->verified = false;
	}
}
