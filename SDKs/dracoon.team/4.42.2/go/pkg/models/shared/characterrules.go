// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CharacterRulesMustContainCharactersEnum - Characters which a password must contain:
//
// * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)
//
// * `uppercase` - at least one uppercase character
//
// * `lowercase` - at least one lowercase character
//
// * `numeric` - at least one numeric character
//
// * `special` - at least one special character (letters and digits excluded)
//
// * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)
//
// * `none` - none of the above
type CharacterRulesMustContainCharactersEnum string

const (
	CharacterRulesMustContainCharactersEnumAlpha     CharacterRulesMustContainCharactersEnum = "alpha"
	CharacterRulesMustContainCharactersEnumUppercase CharacterRulesMustContainCharactersEnum = "uppercase"
	CharacterRulesMustContainCharactersEnumLowercase CharacterRulesMustContainCharactersEnum = "lowercase"
	CharacterRulesMustContainCharactersEnumNumeric   CharacterRulesMustContainCharactersEnum = "numeric"
	CharacterRulesMustContainCharactersEnumSpecial   CharacterRulesMustContainCharactersEnum = "special"
	CharacterRulesMustContainCharactersEnumAll       CharacterRulesMustContainCharactersEnum = "all"
	CharacterRulesMustContainCharactersEnumNone      CharacterRulesMustContainCharactersEnum = "none"
)

func (e *CharacterRulesMustContainCharactersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alpha":
		fallthrough
	case "uppercase":
		fallthrough
	case "lowercase":
		fallthrough
	case "numeric":
		fallthrough
	case "special":
		fallthrough
	case "all":
		fallthrough
	case "none":
		*e = CharacterRulesMustContainCharactersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CharacterRulesMustContainCharactersEnum: %s", s)
	}
}

// CharacterRules - Password character rules
type CharacterRules struct {
	// Characters which a password must contain:
	//
	// * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)
	//
	// * `uppercase` - at least one uppercase character
	//
	// * `lowercase` - at least one lowercase character
	//
	// * `numeric` - at least one numeric character
	//
	// * `special` - at least one special character (letters and digits excluded)
	//
	// * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)
	//
	// * `none` - none of the above
	MustContainCharacters CharacterRulesMustContainCharactersEnum `json:"mustContainCharacters"`
	// Number of characteristics to enforce
	//
	// e.g. from `["uppercase", "lowercase", "numeric", "special"]`
	//
	// all 4 character sets can be enforced; but also only 2 of them
	NumberOfCharacteristicsToEnforce int `json:"numberOfCharacteristicsToEnforce"`
}
