<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ShardingOption - Options for enabling sharding.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ShardingOption
{
    /**
     * Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ManualSharding $manualSharding
     */
	#[\JMS\Serializer\Annotation\SerializedName('manualSharding')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ManualSharding')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ManualSharding $manualSharding = null;
    
    /**
     * Shards test based on previous test case timing records.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SmartSharding $smartSharding
     */
	#[\JMS\Serializer\Annotation\SerializedName('smartSharding')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SmartSharding')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SmartSharding $smartSharding = null;
    
    /**
     * Uniformly shards test cases given a total number of shards. For instrumentation tests, it will be translated to "-e numShard" and "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying either of these sharding arguments via `environment_variables` is invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is no guarantee that test cases will be distributed uniformly across all shards.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UniformSharding $uniformSharding
     */
	#[\JMS\Serializer\Annotation\SerializedName('uniformSharding')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\UniformSharding')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UniformSharding $uniformSharding = null;
    
	public function __construct()
	{
		$this->manualSharding = null;
		$this->smartSharding = null;
		$this->uniformSharding = null;
	}
}
