"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import matchedlocation as shared_matchedlocation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindMatchingLocationsResponse:
    r"""Response message for Locations.FindMatchingLocations."""
    
    matched_locations: Optional[list[shared_matchedlocation.MatchedLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedLocations'), 'exclude': lambda f: f is None }})
    r"""A collection of locations that are potential matches to the specified location, listed in order from best to least match. If there is an exact match, it will be in the first position."""  
    match_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchTime'), 'exclude': lambda f: f is None }})
    r"""When the matching algorithm was last executed for this location."""  
    