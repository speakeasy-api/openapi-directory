/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MemberForDate } from "./memberfordate";
import { Expose, Transform, Type } from "class-transformer";

export enum PublishedWrittenQuestionQuestionTypeEnum {
  NamedDay = "NamedDay",
  Ordinary = "Ordinary",
}

export class PublishedWrittenQuestion extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Answer" })
  answer?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweredWhen" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  answeredWhen?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweringBody" })
  answeringBody?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweringBodyId" })
  answeringBodyId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweringMinister" })
  @Type(() => MemberForDate)
  answeringMinister?: MemberForDate;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweringMinisterId" })
  answeringMinisterId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "AnsweringMinisterTitle" })
  answeringMinisterTitle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AskingMember" })
  @Type(() => MemberForDate)
  askingMember?: MemberForDate;

  @SpeakeasyMetadata()
  @Expose({ name: "AskingMemberId" })
  askingMemberId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "DueForAnswer" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dueForAnswer?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "QuestionText" })
  questionText?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "QuestionType" })
  questionType?: PublishedWrittenQuestionQuestionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TabledWhen" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  tabledWhen?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "UIN" })
  uin?: number;
}
