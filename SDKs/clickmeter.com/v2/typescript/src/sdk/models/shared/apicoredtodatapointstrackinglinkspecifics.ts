/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ApiCoreDtoDatapointsBrowserBaseDestinationItem } from "./apicoredtodatapointsbrowserbasedestinationitem";
import { ApiCoreDtoDatapointsDatapointRetargetingInfo } from "./apicoredtodatapointsdatapointretargetinginfo";
import { ApiCoreDtoDatapointsMultipleDestinationItem } from "./apicoredtodatapointsmultipledestinationitem";
import { ApiCoreDtoDatapointsUniqueDestinationItem } from "./apicoredtodatapointsuniquedestinationitem";
import { ApiCoreDtoDatapointsUrlByLanguageItem } from "./apicoredtodatapointsurlbylanguageitem";
import { ApiCoreDtoDatapointsUrlByNationItem } from "./apicoredtodatapointsurlbynationitem";
import { ApiCoreDtoDatapointsWeightedDestinationItem } from "./apicoredtodatapointsweighteddestinationitem";
import { Expose, Type } from "class-transformer";

export enum ApiCoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum {
  Simple = "Simple",
  RandomDestination = "RandomDestination",
  DestinationByLanguage = "DestinationByLanguage",
  SpilloverDestination = "SpilloverDestination",
  DynamicUrl = "DynamicUrl",
  BrowserDestination = "BrowserDestination",
  DestinationByNation = "DestinationByNation",
  UniqueDestination = "UniqueDestination",
  SequentialDestination = "SequentialDestination",
  WeightedDestination = "WeightedDestination",
}

export enum ApiCoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum {
  PermanentRedirect = "PermanentRedirect",
  TemporaryRedirect = "TemporaryRedirect",
}

export enum ApiCoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum {
  None = "None",
  Clean = "Clean",
  Myself = "Myself",
}

export class ApiCoreDtoDatapointsTrackingLinkSpecifics extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appendQuery" })
  appendQuery?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "browserDestinationItem" })
  @Type(() => ApiCoreDtoDatapointsBrowserBaseDestinationItem)
  browserDestinationItem?: ApiCoreDtoDatapointsBrowserBaseDestinationItem;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationMode" })
  destinationMode?: ApiCoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "domainId" })
  domainId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "encodeUrl" })
  encodeUrl?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "expirationClicks" })
  expirationClicks?: number;

  /**
   *  (A date in "YmdHis" format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  expirationDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstUrl" })
  firstUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "goDomainId" })
  goDomainId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "hideUrl" })
  hideUrl?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "hideUrlTitle" })
  hideUrlTitle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isABTest" })
  isABTest?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pauseAfterClicksExpiration" })
  pauseAfterClicksExpiration?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pauseAfterDateExpiration" })
  pauseAfterDateExpiration?: boolean;

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsMultipleDestinationItem })
  @Expose({ name: "randomDestinationItems" })
  @Type(() => ApiCoreDtoDatapointsMultipleDestinationItem)
  randomDestinationItems?: ApiCoreDtoDatapointsMultipleDestinationItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "redirectType" })
  redirectType?: ApiCoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "referrerClean" })
  referrerClean?: ApiCoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum;

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsDatapointRetargetingInfo })
  @Expose({ name: "scripts" })
  @Type(() => ApiCoreDtoDatapointsDatapointRetargetingInfo)
  scripts?: ApiCoreDtoDatapointsDatapointRetargetingInfo[];

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsMultipleDestinationItem })
  @Expose({ name: "sequentialDestinationItems" })
  @Type(() => ApiCoreDtoDatapointsMultipleDestinationItem)
  sequentialDestinationItems?: ApiCoreDtoDatapointsMultipleDestinationItem[];

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsMultipleDestinationItem })
  @Expose({ name: "spilloverDestinationItems" })
  @Type(() => ApiCoreDtoDatapointsMultipleDestinationItem)
  spilloverDestinationItems?: ApiCoreDtoDatapointsMultipleDestinationItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "uniqueDestinationItem" })
  @Type(() => ApiCoreDtoDatapointsUniqueDestinationItem)
  uniqueDestinationItem?: ApiCoreDtoDatapointsUniqueDestinationItem;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "urlAfterClicksExpiration" })
  urlAfterClicksExpiration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "urlAfterDateExpiration" })
  urlAfterDateExpiration?: string;

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsUrlByLanguageItem })
  @Expose({ name: "urlsByLanguage" })
  @Type(() => ApiCoreDtoDatapointsUrlByLanguageItem)
  urlsByLanguage?: ApiCoreDtoDatapointsUrlByLanguageItem[];

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsUrlByNationItem })
  @Expose({ name: "urlsByNation" })
  @Type(() => ApiCoreDtoDatapointsUrlByNationItem)
  urlsByNation?: ApiCoreDtoDatapointsUrlByNationItem[];

  @SpeakeasyMetadata({ elemType: ApiCoreDtoDatapointsWeightedDestinationItem })
  @Expose({ name: "weightedDestinationItems" })
  @Type(() => ApiCoreDtoDatapointsWeightedDestinationItem)
  weightedDestinationItems?: ApiCoreDtoDatapointsWeightedDestinationItem[];
}
