// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PutAdminMappingsStubMappingIDRequestBodyRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PutAdminMappingsStubMappingIDRequestBodyRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnumUniform PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform - Uniformly distributed random response delay.
type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform struct {
	Lower *int64                                                                            `json:"lower,omitempty"`
	Type  *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                            `json:"upper,omitempty"`
}

type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnumLognormal PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal struct {
	Median *int64                                                                              `json:"median,omitempty"`
	Sigma  *float64                                                                            `json:"sigma,omitempty"`
	Type   *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionType string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionType = "put_/__admin/mappings/{stubMappingId}_requestBody_response_delayDistribution_Log normal"
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform   PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionType = "put_/__admin/mappings/{stubMappingId}_requestBody_response_delayDistribution_Uniform"
)

type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution struct {
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal
	PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform   *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform

	Type PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionType
}

func CreatePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionPutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal(putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal) PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution {
	typ := PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal

	return PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution{
		PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal: &putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreatePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionPutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform(putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform) PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution {
	typ := PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform

	return PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution{
		PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform: &putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal := new(PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal); err == nil {
		u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal = putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal
		u.Type = PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal
		return nil
	}

	putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform := new(PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform); err == nil {
		u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform = putAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform
		u.Type = PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionTypePutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionLogNormal)
	}

	if u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistributionUniform)
	}

	return nil, nil
}

// PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum string

const (
	PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnumEmptyResponse          PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingIDRequestBodyResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *PutAdminMappingsStubMappingIDRequestBodyResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingIDRequestBodyResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

type PutAdminMappingsStubMappingIDRequestBody struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                           `json:"priority,omitempty"`
	Request  *PutAdminMappingsStubMappingIDRequestBodyRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                           `json:"requiredScenarioState,omitempty"`
	Response              *PutAdminMappingsStubMappingIDRequestBodyResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PutAdminMappingsStubMappingIDRequest struct {
	RequestBody *PutAdminMappingsStubMappingIDRequestBody `request:"mediaType=application/json"`
	// The UUID of stub mapping
	StubMappingID string `pathParam:"style=simple,explode=false,name=stubMappingId"`
}

// PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PutAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnumUniform PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform - Uniformly distributed random response delay.
type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform struct {
	Lower *int64                                                                                   `json:"lower,omitempty"`
	Type  *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                                   `json:"upper,omitempty"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnumLognormal PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal struct {
	Median *int64                                                                                     `json:"median,omitempty"`
	Sigma  *float64                                                                                   `json:"sigma,omitempty"`
	Type   *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType = "put_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_delayDistribution_Log normal"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform   PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType = "put_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_delayDistribution_Uniform"
)

type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution struct {
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
	PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform   *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform

	Type PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType
}

func CreatePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionPutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal(putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal) PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution {
	typ := PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal

	return PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution{
		PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal: &putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreatePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionPutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform(putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform) PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution {
	typ := PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform

	return PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution{
		PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform: &putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal := new(PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal); err == nil {
		u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal = putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
		u.Type = PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
		return nil
	}

	putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform := new(PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform); err == nil {
		u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform = putAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform
		u.Type = PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypePutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal)
	}

	if u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform != nil {
		return json.Marshal(u.PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform)
	}

	return nil, nil
}

// PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum - The fault to apply (instead of a full, valid response).
type PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum string

const (
	PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumConnectionResetByPeer  PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumEmptyResponse          PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "EMPTY_RESPONSE"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumMalformedResponseChunk PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumRandomDataThenClose    PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum: %s", s)
	}
}

type PutAdminMappingsStubMappingID200ApplicationJSONResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *PutAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PutAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

// PutAdminMappingsStubMappingID200ApplicationJSON - The stub mapping
type PutAdminMappingsStubMappingID200ApplicationJSON struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                                  `json:"priority,omitempty"`
	Request  *PutAdminMappingsStubMappingID200ApplicationJSONRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                                  `json:"requiredScenarioState,omitempty"`
	Response              *PutAdminMappingsStubMappingID200ApplicationJSONResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PutAdminMappingsStubMappingIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The stub mapping
	PutAdminMappingsStubMappingID200ApplicationJSONObject *PutAdminMappingsStubMappingID200ApplicationJSON
}
