<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancels a UserInvitation that was already sent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelResponse
     */
	public function cloudidentityCustomersUserinvitationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserResponse
     */
	public function cloudidentityCustomersUserinvitationsIsInvitableUser(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:isInvitableUser', \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsIsInvitableUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->isInvitableUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IsInvitableUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListResponse
     */
	public function cloudidentityCustomersUserinvitationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/userinvitations', \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserInvitationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUserInvitationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendResponse
     */
	public function cloudidentityCustomersUserinvitationsSend(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:send', \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityCustomersUserinvitationsSendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}