// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImageFieldImageAnchorEnum - An enumeration.
type ImageFieldImageAnchorEnum string

const (
	ImageFieldImageAnchorEnumNw ImageFieldImageAnchorEnum = "nw"
	ImageFieldImageAnchorEnumN  ImageFieldImageAnchorEnum = "n"
	ImageFieldImageAnchorEnumNe ImageFieldImageAnchorEnum = "ne"
	ImageFieldImageAnchorEnumW  ImageFieldImageAnchorEnum = "w"
	ImageFieldImageAnchorEnumC  ImageFieldImageAnchorEnum = "c"
	ImageFieldImageAnchorEnumE  ImageFieldImageAnchorEnum = "e"
	ImageFieldImageAnchorEnumSw ImageFieldImageAnchorEnum = "sw"
	ImageFieldImageAnchorEnumS  ImageFieldImageAnchorEnum = "s"
)

func (e *ImageFieldImageAnchorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "nw":
		fallthrough
	case "n":
		fallthrough
	case "ne":
		fallthrough
	case "w":
		fallthrough
	case "c":
		fallthrough
	case "e":
		fallthrough
	case "sw":
		fallthrough
	case "s":
		*e = ImageFieldImageAnchorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageFieldImageAnchorEnum: %s", s)
	}
}

type ImageFieldTypeEnum string

const (
	ImageFieldTypeEnumImage ImageFieldTypeEnum = "image"
)

func (e *ImageFieldTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "image":
		*e = ImageFieldTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageFieldTypeEnum: %s", s)
	}
}

type ImageField struct {
	Anchor   *ImageFieldImageAnchorEnum `json:"anchor,omitempty"`
	Bbox     BoundingBox                `json:"bbox"`
	Name     string                     `json:"name"`
	Page     int64                      `json:"page"`
	Required *bool                      `json:"required,omitempty"`
	Type     *ImageFieldTypeEnum        `json:"type,omitempty"`
}
