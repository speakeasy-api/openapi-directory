"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Services:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def monitoring_services_create(self, request: operations.MonitoringServicesCreateRequest, security: operations.MonitoringServicesCreateSecurity) -> operations.MonitoringServicesCreateResponse:
        r"""Create a Service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesCreateRequest, base_url, '/v3/{parent}/services', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringServicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out

        return res

    def monitoring_services_list(self, request: operations.MonitoringServicesListRequest, security: operations.MonitoringServicesListSecurity) -> operations.MonitoringServicesListResponse:
        r"""List Services for this Metrics Scope."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesListRequest, base_url, '/v3/{parent}/services', request)
        
        query_params = utils.get_query_params(operations.MonitoringServicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServicesResponse])
                res.list_services_response = out

        return res

    def monitoring_services_service_level_objectives_create(self, request: operations.MonitoringServicesServiceLevelObjectivesCreateRequest, security: operations.MonitoringServicesServiceLevelObjectivesCreateSecurity) -> operations.MonitoringServicesServiceLevelObjectivesCreateResponse:
        r"""Create a ServiceLevelObjective for the given Service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesServiceLevelObjectivesCreateRequest, base_url, '/v3/{parent}/serviceLevelObjectives', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_level_objective", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringServicesServiceLevelObjectivesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesServiceLevelObjectivesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceLevelObjective])
                res.service_level_objective = out

        return res

    def monitoring_services_service_level_objectives_delete(self, request: operations.MonitoringServicesServiceLevelObjectivesDeleteRequest, security: operations.MonitoringServicesServiceLevelObjectivesDeleteSecurity) -> operations.MonitoringServicesServiceLevelObjectivesDeleteResponse:
        r"""Delete the given ServiceLevelObjective."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesServiceLevelObjectivesDeleteRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.MonitoringServicesServiceLevelObjectivesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesServiceLevelObjectivesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def monitoring_services_service_level_objectives_get(self, request: operations.MonitoringServicesServiceLevelObjectivesGetRequest, security: operations.MonitoringServicesServiceLevelObjectivesGetSecurity) -> operations.MonitoringServicesServiceLevelObjectivesGetResponse:
        r"""Get a ServiceLevelObjective by name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesServiceLevelObjectivesGetRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.MonitoringServicesServiceLevelObjectivesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesServiceLevelObjectivesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceLevelObjective])
                res.service_level_objective = out

        return res

    def monitoring_services_service_level_objectives_list(self, request: operations.MonitoringServicesServiceLevelObjectivesListRequest, security: operations.MonitoringServicesServiceLevelObjectivesListSecurity) -> operations.MonitoringServicesServiceLevelObjectivesListResponse:
        r"""List the ServiceLevelObjectives for the given Service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesServiceLevelObjectivesListRequest, base_url, '/v3/{parent}/serviceLevelObjectives', request)
        
        query_params = utils.get_query_params(operations.MonitoringServicesServiceLevelObjectivesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesServiceLevelObjectivesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServiceLevelObjectivesResponse])
                res.list_service_level_objectives_response = out

        return res

    def monitoring_services_service_level_objectives_patch(self, request: operations.MonitoringServicesServiceLevelObjectivesPatchRequest, security: operations.MonitoringServicesServiceLevelObjectivesPatchSecurity) -> operations.MonitoringServicesServiceLevelObjectivesPatchResponse:
        r"""Update the given ServiceLevelObjective."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringServicesServiceLevelObjectivesPatchRequest, base_url, '/v3/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_level_objective", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringServicesServiceLevelObjectivesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringServicesServiceLevelObjectivesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceLevelObjective])
                res.service_level_objective = out

        return res

    