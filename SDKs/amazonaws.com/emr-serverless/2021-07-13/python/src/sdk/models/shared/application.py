"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import applicationstate_enum as shared_applicationstate_enum
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import autostartconfig as shared_autostartconfig
from ..shared import autostopconfig as shared_autostopconfig
from ..shared import imageconfiguration as shared_imageconfiguration
from ..shared import initialcapacityconfig as shared_initialcapacityconfig
from ..shared import maximumallowedresources as shared_maximumallowedresources
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import workertypespecification as shared_workertypespecification
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Application:
    r"""Information about an application. EMR Serverless uses applications to run jobs."""
    
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationId') }})  
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    release_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseLabel') }})  
    state: shared_applicationstate_enum.ApplicationStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    architecture: Optional[shared_architecture_enum.ArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architecture'), 'exclude': lambda f: f is None }})  
    auto_start_configuration: Optional[shared_autostartconfig.AutoStartConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoStartConfiguration'), 'exclude': lambda f: f is None }})  
    auto_stop_configuration: Optional[shared_autostopconfig.AutoStopConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoStopConfiguration'), 'exclude': lambda f: f is None }})  
    image_configuration: Optional[shared_imageconfiguration.ImageConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageConfiguration'), 'exclude': lambda f: f is None }})  
    initial_capacity: Optional[dict[str, shared_initialcapacityconfig.InitialCapacityConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialCapacity'), 'exclude': lambda f: f is None }})  
    maximum_capacity: Optional[shared_maximumallowedresources.MaximumAllowedResources] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumCapacity'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_networkconfiguration.NetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfiguration'), 'exclude': lambda f: f is None }})  
    state_details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateDetails'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    worker_type_specifications: Optional[dict[str, shared_workertypespecification.WorkerTypeSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerTypeSpecifications'), 'exclude': lambda f: f is None }})  
    