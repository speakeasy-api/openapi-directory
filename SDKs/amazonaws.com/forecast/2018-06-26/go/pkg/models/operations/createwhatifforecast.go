// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWhatIfForecastXAmzTargetEnum
type CreateWhatIfForecastXAmzTargetEnum string

const (
	CreateWhatIfForecastXAmzTargetEnumAmazonForecastCreateWhatIfForecast CreateWhatIfForecastXAmzTargetEnum = "AmazonForecast.CreateWhatIfForecast"
)

func (e CreateWhatIfForecastXAmzTargetEnum) ToPointer() *CreateWhatIfForecastXAmzTargetEnum {
	return &e
}

func (e *CreateWhatIfForecastXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonForecast.CreateWhatIfForecast":
		*e = CreateWhatIfForecastXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWhatIfForecastXAmzTargetEnum: %v", v)
	}
}

type CreateWhatIfForecastRequest struct {
	CreateWhatIfForecastRequest shared.CreateWhatIfForecastRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateWhatIfForecastXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWhatIfForecastResponse struct {
	ContentType string
	// Success
	CreateWhatIfForecastResponse *shared.CreateWhatIfForecastResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
