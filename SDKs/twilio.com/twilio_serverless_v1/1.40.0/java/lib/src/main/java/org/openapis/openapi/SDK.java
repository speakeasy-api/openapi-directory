/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://serverless.twilio.com",
	};
    /**
	 * CREATE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * CREATE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * DELETE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ASSET_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ASSET_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_BUILD_STATUS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUILD_STATUS_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_FUNCTION_VERSION_CONTENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FUNCTION_VERSION_CONTENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_LOG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_LOG_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * FETCH_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ASSET_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ASSET_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BUILD_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_ENVIRONMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ENVIRONMENT_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_FUNCTION_VERSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FUNCTION_VERSION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_LOG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_LOG_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * LIST_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_ASSET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ASSET_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_FUNCTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FUNCTION_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
    /**
	 * UPDATE_VARIABLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_VARIABLE_SERVERS = {
        "https://serverless.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAssetResponse createAsset(org.openapis.openapi.models.operations.CreateAssetRequest request) throws Exception {
        String baseUrl = CREATE_ASSET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateAssetPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAssetResponse res = new org.openapis.openapi.models.operations.CreateAssetResponse() {{
            serverlessV1ServiceAsset = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Create a new Build resource. At least one function version or asset version is required.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBuildResponse createBuild(org.openapis.openapi.models.operations.CreateBuildRequest request) throws Exception {
        String baseUrl = CREATE_BUILD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBuildPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Builds", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBuildResponse res = new org.openapis.openapi.models.operations.CreateBuildResponse() {{
            serverlessV1ServiceBuild = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuild.class);
                res.serverlessV1ServiceBuild = out;
            }
        }

        return res;
    }

    /**
     * Create a new Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeploymentResponse createDeployment(org.openapis.openapi.models.operations.CreateDeploymentRequest request) throws Exception {
        String baseUrl = CREATE_DEPLOYMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeploymentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeploymentResponse res = new org.openapis.openapi.models.operations.CreateDeploymentResponse() {{
            serverlessV1ServiceEnvironmentDeployment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment.class);
                res.serverlessV1ServiceEnvironmentDeployment = out;
            }
        }

        return res;
    }

    /**
     * Create a new environment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEnvironmentResponse createEnvironment(org.openapis.openapi.models.operations.CreateEnvironmentRequest request) throws Exception {
        String baseUrl = CREATE_ENVIRONMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateEnvironmentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEnvironmentResponse res = new org.openapis.openapi.models.operations.CreateEnvironmentResponse() {{
            serverlessV1ServiceEnvironment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment.class);
                res.serverlessV1ServiceEnvironment = out;
            }
        }

        return res;
    }

    /**
     * Create a new Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFunctionResponse createFunction(org.openapis.openapi.models.operations.CreateFunctionRequest request) throws Exception {
        String baseUrl = CREATE_FUNCTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateFunctionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFunctionResponse res = new org.openapis.openapi.models.operations.CreateFunctionResponse() {{
            serverlessV1ServiceFunction = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Create a new Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            serverlessV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new Variable.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateVariableResponse createVariable(org.openapis.openapi.models.operations.CreateVariableRequest request) throws Exception {
        String baseUrl = CREATE_VARIABLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateVariablePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateVariableResponse res = new org.openapis.openapi.models.operations.CreateVariableResponse() {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }

    /**
     * Delete an Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteAssetResponse deleteAsset(org.openapis.openapi.models.operations.DeleteAssetRequest request) throws Exception {
        String baseUrl = DELETE_ASSET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAssetPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAssetResponse res = new org.openapis.openapi.models.operations.DeleteAssetResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBuildResponse deleteBuild(org.openapis.openapi.models.operations.DeleteBuildRequest request) throws Exception {
        String baseUrl = DELETE_BUILD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBuildPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBuildResponse res = new org.openapis.openapi.models.operations.DeleteBuildResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEnvironmentResponse deleteEnvironment(org.openapis.openapi.models.operations.DeleteEnvironmentRequest request) throws Exception {
        String baseUrl = DELETE_ENVIRONMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEnvironmentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEnvironmentResponse res = new org.openapis.openapi.models.operations.DeleteEnvironmentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFunctionResponse deleteFunction(org.openapis.openapi.models.operations.DeleteFunctionRequest request) throws Exception {
        String baseUrl = DELETE_FUNCTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFunctionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFunctionResponse res = new org.openapis.openapi.models.operations.DeleteFunctionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteVariableResponse deleteVariable(org.openapis.openapi.models.operations.DeleteVariableRequest request) throws Exception {
        String baseUrl = DELETE_VARIABLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteVariablePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteVariableResponse res = new org.openapis.openapi.models.operations.DeleteVariableResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Retrieve a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetResponse fetchAsset(org.openapis.openapi.models.operations.FetchAssetRequest request) throws Exception {
        String baseUrl = FETCH_ASSET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAssetPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAssetResponse res = new org.openapis.openapi.models.operations.FetchAssetResponse() {{
            serverlessV1ServiceAsset = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Asset Version.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAssetVersionResponse fetchAssetVersion(org.openapis.openapi.models.operations.FetchAssetVersionRequest request) throws Exception {
        String baseUrl = FETCH_ASSET_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAssetVersionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAssetVersionResponse res = new org.openapis.openapi.models.operations.FetchAssetVersionResponse() {{
            serverlessV1ServiceAssetAssetVersion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAssetAssetVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAssetAssetVersion.class);
                res.serverlessV1ServiceAssetAssetVersion = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildResponse fetchBuild(org.openapis.openapi.models.operations.FetchBuildRequest request) throws Exception {
        String baseUrl = FETCH_BUILD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBuildPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBuildResponse res = new org.openapis.openapi.models.operations.FetchBuildResponse() {{
            serverlessV1ServiceBuild = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuild.class);
                res.serverlessV1ServiceBuild = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Build resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBuildStatusResponse fetchBuildStatus(org.openapis.openapi.models.operations.FetchBuildStatusRequest request) throws Exception {
        String baseUrl = FETCH_BUILD_STATUS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBuildStatusPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Builds/{Sid}/Status", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBuildStatusResponse res = new org.openapis.openapi.models.operations.FetchBuildStatusResponse() {{
            serverlessV1ServiceBuildBuildStatus = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceBuildBuildStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceBuildBuildStatus.class);
                res.serverlessV1ServiceBuildBuildStatus = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Deployment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeploymentResponse fetchDeployment(org.openapis.openapi.models.operations.FetchDeploymentRequest request) throws Exception {
        String baseUrl = FETCH_DEPLOYMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeploymentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeploymentResponse res = new org.openapis.openapi.models.operations.FetchDeploymentResponse() {{
            serverlessV1ServiceEnvironmentDeployment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentDeployment.class);
                res.serverlessV1ServiceEnvironmentDeployment = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific environment.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEnvironmentResponse fetchEnvironment(org.openapis.openapi.models.operations.FetchEnvironmentRequest request) throws Exception {
        String baseUrl = FETCH_ENVIRONMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEnvironmentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEnvironmentResponse res = new org.openapis.openapi.models.operations.FetchEnvironmentResponse() {{
            serverlessV1ServiceEnvironment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironment.class);
                res.serverlessV1ServiceEnvironment = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionResponse fetchFunction(org.openapis.openapi.models.operations.FetchFunctionRequest request) throws Exception {
        String baseUrl = FETCH_FUNCTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionResponse res = new org.openapis.openapi.models.operations.FetchFunctionResponse() {{
            serverlessV1ServiceFunction = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionResponse fetchFunctionVersion(org.openapis.openapi.models.operations.FetchFunctionVersionRequest request) throws Exception {
        String baseUrl = FETCH_FUNCTION_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionVersionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionVersionResponse res = new org.openapis.openapi.models.operations.FetchFunctionVersionResponse() {{
            serverlessV1ServiceFunctionFunctionVersion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersion.class);
                res.serverlessV1ServiceFunctionFunctionVersion = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a the content of a specific Function Version resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse fetchFunctionVersionContent(org.openapis.openapi.models.operations.FetchFunctionVersionContentRequest request) throws Exception {
        String baseUrl = FETCH_FUNCTION_VERSION_CONTENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFunctionVersionContentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse res = new org.openapis.openapi.models.operations.FetchFunctionVersionContentResponse() {{
            serverlessV1ServiceFunctionFunctionVersionFunctionVersionContent = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.class);
                res.serverlessV1ServiceFunctionFunctionVersionFunctionVersionContent = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific log.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchLogResponse fetchLog(org.openapis.openapi.models.operations.FetchLogRequest request) throws Exception {
        String baseUrl = FETCH_LOG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchLogPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchLogResponse res = new org.openapis.openapi.models.operations.FetchLogResponse() {{
            serverlessV1ServiceEnvironmentLog = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentLog out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentLog.class);
                res.serverlessV1ServiceEnvironmentLog = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            serverlessV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVariableResponse fetchVariable(org.openapis.openapi.models.operations.FetchVariableRequest request) throws Exception {
        String baseUrl = FETCH_VARIABLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVariablePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVariableResponse res = new org.openapis.openapi.models.operations.FetchVariableResponse() {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Assets.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetResponse listAsset(org.openapis.openapi.models.operations.ListAssetRequest request) throws Exception {
        String baseUrl = LIST_ASSET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAssetPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAssetQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAssetResponse res = new org.openapis.openapi.models.operations.ListAssetResponse() {{
            listAssetResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAssetListAssetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAssetListAssetResponse.class);
                res.listAssetResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Asset Versions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAssetVersionResponse listAssetVersion(org.openapis.openapi.models.operations.ListAssetVersionRequest request) throws Exception {
        String baseUrl = LIST_ASSET_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAssetVersionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAssetVersionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAssetVersionResponse res = new org.openapis.openapi.models.operations.ListAssetVersionResponse() {{
            listAssetVersionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAssetVersionListAssetVersionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAssetVersionListAssetVersionResponse.class);
                res.listAssetVersionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Builds.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBuildResponse listBuild(org.openapis.openapi.models.operations.ListBuildRequest request) throws Exception {
        String baseUrl = LIST_BUILD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBuildPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Builds", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBuildQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBuildResponse res = new org.openapis.openapi.models.operations.ListBuildResponse() {{
            listBuildResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBuildListBuildResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBuildListBuildResponse.class);
                res.listBuildResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Deployments.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeploymentResponse listDeployment(org.openapis.openapi.models.operations.ListDeploymentRequest request) throws Exception {
        String baseUrl = LIST_DEPLOYMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeploymentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeploymentQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeploymentResponse res = new org.openapis.openapi.models.operations.ListDeploymentResponse() {{
            listDeploymentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeploymentListDeploymentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeploymentListDeploymentResponse.class);
                res.listDeploymentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all environments.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEnvironmentResponse listEnvironment(org.openapis.openapi.models.operations.ListEnvironmentRequest request) throws Exception {
        String baseUrl = LIST_ENVIRONMENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEnvironmentPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEnvironmentQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEnvironmentResponse res = new org.openapis.openapi.models.operations.ListEnvironmentResponse() {{
            listEnvironmentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEnvironmentListEnvironmentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEnvironmentListEnvironmentResponse.class);
                res.listEnvironmentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Functions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionResponse listFunction(org.openapis.openapi.models.operations.ListFunctionRequest request) throws Exception {
        String baseUrl = LIST_FUNCTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFunctionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFunctionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFunctionResponse res = new org.openapis.openapi.models.operations.ListFunctionResponse() {{
            listFunctionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFunctionListFunctionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFunctionListFunctionResponse.class);
                res.listFunctionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Function Version resources.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFunctionVersionResponse listFunctionVersion(org.openapis.openapi.models.operations.ListFunctionVersionRequest request) throws Exception {
        String baseUrl = LIST_FUNCTION_VERSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFunctionVersionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFunctionVersionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFunctionVersionResponse res = new org.openapis.openapi.models.operations.ListFunctionVersionResponse() {{
            listFunctionVersionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFunctionVersionListFunctionVersionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFunctionVersionListFunctionVersionResponse.class);
                res.listFunctionVersionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all logs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListLogResponse listLog(org.openapis.openapi.models.operations.ListLogRequest request) throws Exception {
        String baseUrl = LIST_LOG_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListLogPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListLogQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListLogResponse res = new org.openapis.openapi.models.operations.ListLogResponse() {{
            listLogResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListLogListLogResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListLogListLogResponse.class);
                res.listLogResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Services.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Variables.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVariableResponse listVariable(org.openapis.openapi.models.operations.ListVariableRequest request) throws Exception {
        String baseUrl = LIST_VARIABLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListVariablePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVariableQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVariableResponse res = new org.openapis.openapi.models.operations.ListVariableResponse() {{
            listVariableResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVariableListVariableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVariableListVariableResponse.class);
                res.listVariableResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Asset resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAssetResponse updateAsset(org.openapis.openapi.models.operations.UpdateAssetRequest request) throws Exception {
        String baseUrl = UPDATE_ASSET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAssetPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Assets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAssetResponse res = new org.openapis.openapi.models.operations.UpdateAssetResponse() {{
            serverlessV1ServiceAsset = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceAsset out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceAsset.class);
                res.serverlessV1ServiceAsset = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Function resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFunctionResponse updateFunction(org.openapis.openapi.models.operations.UpdateFunctionRequest request) throws Exception {
        String baseUrl = UPDATE_FUNCTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFunctionPathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Functions/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFunctionResponse res = new org.openapis.openapi.models.operations.UpdateFunctionResponse() {{
            serverlessV1ServiceFunction = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceFunction out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceFunction.class);
                res.serverlessV1ServiceFunction = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Service resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse() {{
            serverlessV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1Service.class);
                res.serverlessV1Service = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Variable.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateVariableResponse updateVariable(org.openapis.openapi.models.operations.UpdateVariableRequest request) throws Exception {
        String baseUrl = UPDATE_VARIABLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateVariablePathParams.class, baseUrl, "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateVariableResponse res = new org.openapis.openapi.models.operations.UpdateVariableResponse() {{
            serverlessV1ServiceEnvironmentVariable = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServerlessV1ServiceEnvironmentVariable.class);
                res.serverlessV1ServiceEnvironmentVariable = out;
            }
        }

        return res;
    }
}