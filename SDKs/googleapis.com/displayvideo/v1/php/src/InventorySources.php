<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InventorySources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new inventory source. Returns the newly created inventory source if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateResponse
     */
	public function displayvideoInventorySourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySources');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inventorySourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse
     */
	public function displayvideoInventorySourcesEditInventorySourceReadWriteAccessors(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySources/{inventorySourceId}:editInventorySourceReadWriteAccessors', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editInventorySourceReadWriteAccessorsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySourceAccessors = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySourceAccessors', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an inventory source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetResponse
     */
	public function displayvideoInventorySourcesGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySources/{inventorySourceId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListResponse
     */
	public function displayvideoInventorySourcesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySources');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInventorySourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInventorySourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing inventory source. Returns the updated inventory source if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchResponse
     */
	public function displayvideoInventorySourcesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/inventorySources/{inventorySourceId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "inventorySourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoInventorySourcesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventorySource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventorySource', 'json');
            }
        }

        return $response;
    }
}