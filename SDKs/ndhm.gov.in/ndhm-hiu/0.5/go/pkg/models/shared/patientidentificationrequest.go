// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientIdentificationRequestQueryPatient struct {
	ID string `json:"id"`
}

type PatientIdentificationRequestQueryRequesterTypeEnum string

const (
	PatientIdentificationRequestQueryRequesterTypeEnumHiu PatientIdentificationRequestQueryRequesterTypeEnum = "HIU"
	PatientIdentificationRequestQueryRequesterTypeEnumHip PatientIdentificationRequestQueryRequesterTypeEnum = "HIP"
)

func (e PatientIdentificationRequestQueryRequesterTypeEnum) ToPointer() *PatientIdentificationRequestQueryRequesterTypeEnum {
	return &e
}

func (e *PatientIdentificationRequestQueryRequesterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIU":
		fallthrough
	case "HIP":
		*e = PatientIdentificationRequestQueryRequesterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientIdentificationRequestQueryRequesterTypeEnum: %v", v)
	}
}

type PatientIdentificationRequestQueryRequester struct {
	ID   string                                             `json:"id"`
	Type PatientIdentificationRequestQueryRequesterTypeEnum `json:"type"`
}

type PatientIdentificationRequestQuery struct {
	Patient   PatientIdentificationRequestQueryPatient   `json:"patient"`
	Requester PatientIdentificationRequestQueryRequester `json:"requester"`
}

type PatientIdentificationRequest struct {
	Query PatientIdentificationRequestQuery `json:"query"`
	// a nonce, unique for each HTTP request
	RequestID string `json:"requestId"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
