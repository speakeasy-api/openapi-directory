/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LambdaFunctionRecommendation - Describes an Lambda function recommendation.
 */
public class LambdaFunctionRecommendation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public LambdaFunctionRecommendation withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentMemorySize")
    public Long currentMemorySize;

    public LambdaFunctionRecommendation withCurrentMemorySize(Long currentMemorySize) {
        this.currentMemorySize = currentMemorySize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentPerformanceRisk")
    public CurrentPerformanceRiskEnum currentPerformanceRisk;

    public LambdaFunctionRecommendation withCurrentPerformanceRisk(CurrentPerformanceRiskEnum currentPerformanceRisk) {
        this.currentPerformanceRisk = currentPerformanceRisk;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finding")
    public LambdaFunctionRecommendationFindingEnum finding;

    public LambdaFunctionRecommendation withFinding(LambdaFunctionRecommendationFindingEnum finding) {
        this.finding = finding;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("findingReasonCodes")
    public LambdaFunctionRecommendationFindingReasonCodeEnum[] findingReasonCodes;

    public LambdaFunctionRecommendation withFindingReasonCodes(LambdaFunctionRecommendationFindingReasonCodeEnum[] findingReasonCodes) {
        this.findingReasonCodes = findingReasonCodes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionArn")
    public String functionArn;

    public LambdaFunctionRecommendation withFunctionArn(String functionArn) {
        this.functionArn = functionArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionVersion")
    public String functionVersion;

    public LambdaFunctionRecommendation withFunctionVersion(String functionVersion) {
        this.functionVersion = functionVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastRefreshTimestamp")
    public OffsetDateTime lastRefreshTimestamp;

    public LambdaFunctionRecommendation withLastRefreshTimestamp(OffsetDateTime lastRefreshTimestamp) {
        this.lastRefreshTimestamp = lastRefreshTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookbackPeriodInDays")
    public Double lookbackPeriodInDays;

    public LambdaFunctionRecommendation withLookbackPeriodInDays(Double lookbackPeriodInDays) {
        this.lookbackPeriodInDays = lookbackPeriodInDays;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memorySizeRecommendationOptions")
    public LambdaFunctionMemoryRecommendationOption[] memorySizeRecommendationOptions;

    public LambdaFunctionRecommendation withMemorySizeRecommendationOptions(LambdaFunctionMemoryRecommendationOption[] memorySizeRecommendationOptions) {
        this.memorySizeRecommendationOptions = memorySizeRecommendationOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfInvocations")
    public Long numberOfInvocations;

    public LambdaFunctionRecommendation withNumberOfInvocations(Long numberOfInvocations) {
        this.numberOfInvocations = numberOfInvocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("utilizationMetrics")
    public LambdaFunctionUtilizationMetric[] utilizationMetrics;

    public LambdaFunctionRecommendation withUtilizationMetrics(LambdaFunctionUtilizationMetric[] utilizationMetrics) {
        this.utilizationMetrics = utilizationMetrics;
        return this;
    }
    
    public LambdaFunctionRecommendation(){}
}
