// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PlaceType string

const (
	PlaceTypeDetailed PlaceType = "detailed"
	PlaceTypeCompact  PlaceType = "compact"
	PlaceTypeDefault  PlaceType = "default"
)

type Place struct {
	CompactPlace  *CompactPlace
	DefaultPlace  *DefaultPlace
	DetailedPlace *DetailedPlace

	Type PlaceType
}

func CreatePlaceDetailed(detailed DetailedPlace) Place {
	typ := PlaceTypeDetailed
	typStr := string(typ)
	detailed.Format = typStr

	return Place{
		DetailedPlace: &detailed,
		Type:          typ,
	}
}

func CreatePlaceCompact(compact CompactPlace) Place {
	typ := PlaceTypeCompact
	typStr := string(typ)
	compact.Format = typStr

	return Place{
		CompactPlace: &compact,
		Type:         typ,
	}
}

func CreatePlaceDefault(defaultT DefaultPlace) Place {
	typ := PlaceTypeDefault
	typStr := string(typ)
	defaultT.Format = typStr

	return Place{
		DefaultPlace: &defaultT,
		Type:         typ,
	}
}

func (u *Place) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Format string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Format {
	case "detailed":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		detailedPlace := new(DetailedPlace)
		if err := d.Decode(&detailedPlace); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DetailedPlace = detailedPlace
		u.Type = PlaceTypeDetailed
		return nil
	case "compact":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		compactPlace := new(CompactPlace)
		if err := d.Decode(&compactPlace); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CompactPlace = compactPlace
		u.Type = PlaceTypeCompact
		return nil
	case "default":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		defaultPlace := new(DefaultPlace)
		if err := d.Decode(&defaultPlace); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DefaultPlace = defaultPlace
		u.Type = PlaceTypeDefault
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Place) MarshalJSON() ([]byte, error) {
	if u.CompactPlace != nil {
		return json.Marshal(u.CompactPlace)
	}

	if u.DefaultPlace != nil {
		return json.Marshal(u.DefaultPlace)
	}

	if u.DetailedPlace != nil {
		return json.Marshal(u.DetailedPlace)
	}

	return nil, nil
}
