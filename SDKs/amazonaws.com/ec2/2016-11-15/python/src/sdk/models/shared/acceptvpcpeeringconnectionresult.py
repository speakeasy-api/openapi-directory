"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet:
    r"""Describes an IPv4 CIDR block."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet:
    r"""Describes an IPv6 CIDR block."""
    
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions:
    r"""Information about the VPC peering connection options for the accepter or requester VPC."""
    
    allow_dns_resolution_from_remote_vpc: Optional[bool] = dataclasses.field(default=None)  
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = dataclasses.field(default=None)  
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo:
    r"""Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    cidr_block_set: Optional[list[AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet]] = dataclasses.field(default=None)  
    ipv6_cidr_block_set: Optional[list[AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet]] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    peering_options: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions] = dataclasses.field(default=None)  
    region: Optional[str] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet:
    r"""Describes an IPv4 CIDR block."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet:
    r"""Describes an IPv6 CIDR block."""
    
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions:
    r"""Information about the VPC peering connection options for the accepter or requester VPC."""
    
    allow_dns_resolution_from_remote_vpc: Optional[bool] = dataclasses.field(default=None)  
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = dataclasses.field(default=None)  
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo:
    r"""Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    cidr_block_set: Optional[list[AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet]] = dataclasses.field(default=None)  
    ipv6_cidr_block_set: Optional[list[AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet]] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    peering_options: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions] = dataclasses.field(default=None)  
    region: Optional[str] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum(str, Enum):
    r"""The status of the VPC peering connection."""
    INITIATING_REQUEST = 'initiating-request'
    PENDING_ACCEPTANCE = 'pending-acceptance'
    ACTIVE = 'active'
    DELETED = 'deleted'
    REJECTED = 'rejected'
    FAILED = 'failed'
    EXPIRED = 'expired'
    PROVISIONING = 'provisioning'
    DELETING = 'deleting'


@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus:
    r"""The status of the VPC peering connection."""
    
    code: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum] = dataclasses.field(default=None)  
    message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResultVpcPeeringConnection:
    r"""Information about the VPC peering connection."""
    
    accepter_vpc_info: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo] = dataclasses.field(default=None)  
    expiration_time: Optional[datetime] = dataclasses.field(default=None)  
    requester_vpc_info: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo] = dataclasses.field(default=None)  
    status: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnectionStatus] = dataclasses.field(default=None)  
    tags: Optional[list[AcceptVpcPeeringConnectionResultVpcPeeringConnectionTags]] = dataclasses.field(default=None)  
    vpc_peering_connection_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class AcceptVpcPeeringConnectionResult:
    r"""Success"""
    
    vpc_peering_connection: Optional[AcceptVpcPeeringConnectionResultVpcPeeringConnection] = dataclasses.field(default=None)  
    