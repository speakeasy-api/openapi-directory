// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type StopPointSearchPathParams struct {
	// The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
	Query string `pathParam:"style=simple,explode=false,name=query"`
}

type StopPointSearchQueryParams struct {
	// True to only return stations in that have Fares data available for single fares to another station.
	FaresOnly *bool `queryParam:"style=form,explode=true,name=faresOnly"`
	// If true, returns results including HUBs.
	IncludeHubs *bool `queryParam:"style=form,explode=true,name=includeHubs"`
	// An optional, parameter separated list of the lines to filter by
	Lines []string `queryParam:"style=form,explode=true,name=lines"`
	// An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
	//             it is possible that the flattened result set will contain more than 50 items.
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// An optional, parameter separated list of the modes to filter by
	Modes []string `queryParam:"style=form,explode=true,name=modes"`
	// If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
	TflOperatedNationalRailStationsOnly *bool `queryParam:"style=form,explode=true,name=tflOperatedNationalRailStationsOnly"`
}

type StopPointSearchRequest struct {
	PathParams  StopPointSearchPathParams
	QueryParams StopPointSearchQueryParams
}

type StopPointSearchResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesSearchResponse *shared.TflAPIPresentationEntitiesSearchResponse
}
