"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alarmtype_enum as shared_alarmtype_enum
from datetime import datetime
from enum import Enum
from typing import Optional

class GETDescribeAlarmHistoryActionEnum(str, Enum):
    DESCRIBE_ALARM_HISTORY = 'DescribeAlarmHistory'

class GETDescribeAlarmHistoryHistoryItemTypeEnum(str, Enum):
    r"""The type of alarm histories to retrieve."""
    CONFIGURATION_UPDATE = 'ConfigurationUpdate'
    STATE_UPDATE = 'StateUpdate'
    ACTION = 'Action'

class GETDescribeAlarmHistoryScanByEnum(str, Enum):
    r"""Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first."""
    TIMESTAMP_DESCENDING = 'TimestampDescending'
    TIMESTAMP_ASCENDING = 'TimestampAscending'

class GETDescribeAlarmHistoryVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_08_01 = '2010-08-01'


@dataclasses.dataclass
class GETDescribeAlarmHistoryRequest:
    
    action: GETDescribeAlarmHistoryActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDescribeAlarmHistoryVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    alarm_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AlarmName', 'style': 'form', 'explode': True }})
    r"""The name of the alarm."""  
    alarm_types: Optional[list[shared_alarmtype_enum.AlarmTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AlarmTypes', 'style': 'form', 'explode': True }})
    r"""Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned."""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndDate', 'style': 'form', 'explode': True }})
    r"""The ending date to retrieve alarm history."""  
    history_item_type: Optional[GETDescribeAlarmHistoryHistoryItemTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HistoryItemType', 'style': 'form', 'explode': True }})
    r"""The type of alarm histories to retrieve."""  
    max_records: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxRecords', 'style': 'form', 'explode': True }})
    r"""The maximum number of alarm history records to retrieve."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""The token returned by a previous call to indicate that there is more data available."""  
    scan_by: Optional[GETDescribeAlarmHistoryScanByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ScanBy', 'style': 'form', 'explode': True }})
    r"""Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StartDate', 'style': 'form', 'explode': True }})
    r"""The starting date to retrieve alarm history."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDescribeAlarmHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    