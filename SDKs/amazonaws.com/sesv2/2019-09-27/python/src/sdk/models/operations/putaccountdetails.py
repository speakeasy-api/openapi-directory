"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PutAccountDetailsRequestBodyContactLanguageEnum(str, Enum):
    r"""The language you would prefer to be contacted with."""
    EN = 'EN'
    JA = 'JA'

class PutAccountDetailsRequestBodyMailTypeEnum(str, Enum):
    r"""The type of email your account will send."""
    MARKETING = 'MARKETING'
    TRANSACTIONAL = 'TRANSACTIONAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAccountDetailsRequestBody:
    
    mail_type: PutAccountDetailsRequestBodyMailTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MailType') }})
    r"""The type of email your account will send."""  
    use_case_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseCaseDescription') }})
    r"""A description of the types of email that you plan to send."""  
    website_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebsiteURL') }})
    r"""The URL of your website. This information helps us better understand the type of content that you plan to send."""  
    additional_contact_email_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalContactEmailAddresses'), 'exclude': lambda f: f is None }})
    r"""Additional email addresses that you would like to be notified regarding Amazon SES matters."""  
    contact_language: Optional[PutAccountDetailsRequestBodyContactLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactLanguage'), 'exclude': lambda f: f is None }})
    r"""The language you would prefer to be contacted with."""  
    production_access_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductionAccessEnabled'), 'exclude': lambda f: f is None }})
    r"""<p>Indicates whether or not your account should have production access in the current Amazon Web Services Region.</p> <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p> <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>"""  
    

@dataclasses.dataclass
class PutAccountDetailsRequest:
    
    request_body: PutAccountDetailsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutAccountDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    put_account_details_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    