"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductSet = exports.ProductSetProductSetBehaviorEnum = void 0;
var utils_1 = require("../../../internal/utils");
var productvisibility_1 = require("./productvisibility");
var class_transformer_1 = require("class-transformer");
/**
 * The interpretation of this product set. "unknown" should never be sent and is ignored if received. "whitelist" means that the user is entitled to access the product set. "includeAll" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. "allApproved" means that the user is entitled to access all products that are approved for the enterprise. If the value is "allApproved" or "includeAll", the productId field is ignored. If no value is provided, it is interpreted as "whitelist" for backwards compatibility. Further "allApproved" or "includeAll" does not enable automatic visibility of "alpha" or "beta" tracks for Android app. Use ProductVisibility to enable "alpha" or "beta" tracks per user.
 */
var ProductSetProductSetBehaviorEnum;
(function (ProductSetProductSetBehaviorEnum) {
    ProductSetProductSetBehaviorEnum["Unknown"] = "unknown";
    ProductSetProductSetBehaviorEnum["Whitelist"] = "whitelist";
    ProductSetProductSetBehaviorEnum["IncludeAll"] = "includeAll";
    ProductSetProductSetBehaviorEnum["AllApproved"] = "allApproved";
})(ProductSetProductSetBehaviorEnum = exports.ProductSetProductSetBehaviorEnum || (exports.ProductSetProductSetBehaviorEnum = {}));
/**
 * A set of products.
 */
var ProductSet = /** @class */ (function (_super) {
    __extends(ProductSet, _super);
    function ProductSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "productId" }),
        __metadata("design:type", Array)
    ], ProductSet.prototype, "productId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "productSetBehavior" }),
        __metadata("design:type", String)
    ], ProductSet.prototype, "productSetBehavior", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: productvisibility_1.ProductVisibility }),
        (0, class_transformer_1.Expose)({ name: "productVisibility" }),
        (0, class_transformer_1.Type)(function () { return productvisibility_1.ProductVisibility; }),
        __metadata("design:type", Array)
    ], ProductSet.prototype, "productVisibility", void 0);
    return ProductSet;
}(utils_1.SpeakeasyBase));
exports.ProductSet = ProductSet;
